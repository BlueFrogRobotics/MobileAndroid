<?xml version="1.0"?>
<doc>
    <assembly>
        <name>API</name>
    </assembly>
    <members>
        <member name="T:MobileBaseStatus">
            <summary>
            The current mobile base status 
            </summary>
        </member>
        <member name="F:MobileBaseStatus.MOTIONLESS">
            <summary>
            The robot is not moving
            </summary>
        </member>
        <member name="F:MobileBaseStatus.MOVING">
            <summary>
            The robot is moving
            </summary>
        </member>
        <member name="F:MobileBaseStatus.REACHED_GOAL">
            <summary>
            The robot has reached your last hardware command
            </summary>
        </member>
        <member name="F:MobileBaseStatus.BLOCKED">
            <summary>
            The robot seems to be blocked
            </summary>
        </member>
        <member name="F:MobileBaseStatus.CANCELLED_ORDER">
            <summary>
            The order has beend cancelled, currently not used
            </summary>
        </member>
        <member name="T:HeadAxe">
            <summary>
            Head value position, use for internal purpose. You should never use it.
            </summary>
        </member>
        <member name="F:HeadAxe.NO">
            <summary>
            The no axe
            </summary>
        </member>
        <member name="F:HeadAxe.YES">
            <summary>
            The yes axe
            </summary>
        </member>
        <member name="T:BuddyAPI.RegularFace">
            <summary>
            Class which includes the speficities of the animator for the regular face and provides every methods to control it.
            </summary>
        </member>
        <member name="M:BuddyAPI.KittAITrigger.LaunchRecognition">
            <summary>
            Launches the voice recognition.
            </summary>
        </member>
        <member name="M:BuddyAPI.KittAITrigger.StopRecognition">
            <summary>
            Stops the voice recognition.
            </summary>
        </member>
        <member name="M:BuddyAPI.KittAITrigger.HasTriggered">
            <summary>
            Detects if the trigger has been activated.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BuddyAPI.KittAITrigger.SetSensitivity(System.Single)">
            <summary>
            Set the sensitivity of the trigger of the voice recognition.
            </summary>
        </member>
        <member name="M:BuddyAPI.KittAITrigger.SetSensitivity(System.String)">
            <summary>
            Set the sensitivity of the trigger of the voice recognition.
            </summary>
        </member>
        <member name="M:BuddyAPI.KittAITrigger.SetGain(System.Single)">
            <summary>
            Set the gain of the microphone of the voice recognition.
            </summary>
        </member>
        <member name="T:BuddyAPI.SpeechToText">
            <summary>
            Once the voice recognition is activated, use this class to get the last heared sentence.
            </summary>
        </member>
        <member name="M:BuddyAPI.SpeechToText.Awake">
            <summary>
            Initialization of the android plugin for speech to text
            </summary>
        </member>
        <member name="M:BuddyAPI.SpeechToText.GetLastError">
            <summary>
            Retrieve the last error sent by the Speech To Text
            </summary>
            <returns>Returns the error in string</returns>
        </member>
        <member name="M:BuddyAPI.SpeechToText.ErrorCallback(System.String)">
            <summary>
            This is the error callback called by the android plugin. It shouldn't be changed
            </summary>
            <param name="iMsg">The message received by the plugin</param>
        </member>
        <member name="M:BuddyAPI.SpeechToText.ErrorCallbackInt(System.String)">
            <summary>
            This is the error callback called by the android plugin. It shouldn't be changed
            </summary>
            <param name="iMsg">The message received by the plugin</param>
        </member>
        <member name="M:BuddyAPI.SpeechToText.OnPartialResults(System.String)">
            <summary>
            Callback while listening
            This is the recognition callback called by the android plugin. It shouldn't be changed
            </summary>
            <param name="iMsg">The message received by the plugin</param>
        </member>
        <member name="M:BuddyAPI.SpeechToText.RecognitionCallback(System.String)">
            <summary>
            Callback when finished listening
            This is the recognition callback called by the android plugin. It shouldn't be changed
            </summary>
            <param name="iMsg">The message received by the plugin</param>
        </member>
        <member name="M:BuddyAPI.SpeechToText.OnBeginningOfSpeech">
            <summary>
            Callback when beginning speech
            This is the recognition callback called by the android plugin. It shouldn't be changed
            </summary>
        </member>
        <member name="M:BuddyAPI.SpeechToText.OnEndOfSpeech">
            <summary>
            Callback when speech is ended
            This is the recognition callback called by the android plugin. It shouldn't be changed
            </summary>
        </member>
        <member name="M:BuddyAPI.SpeechToText.ConfidenceCallback(System.String)">
            <summary>
            This is the confidence callback called by the android plugin. It shouldn't be changed
            </summary>
            <param name="iMsg">The message received by the plugin</param>
        </member>
        <member name="M:BuddyAPI.SpeechToText.SetLanguage(Language)">
            <summary>
            Set the language of the Speech To Text
            </summary>
            <param name="iLanguage">The language to set in Locale Codes (e.g. "en-US" for english from United-States, "fr-FR" for french from France)</param>
        </member>
        <member name="M:BuddyAPI.SpeechToText.Request">
            <summary>
            Launch the request call for the Speech To Text. Has to be done whenever you want the recognition to begin.
            </summary>
        </member>
        <member name="M:BuddyAPI.SpeechToText.Stop">
            <summary>
            Stops listening and destroys the speechrecognizer (relaunch request to instantiate)
            </summary>
        </member>
        <member name="P:BuddyAPI.SpeechToText.LastAnswer">
            <summary>
            Get the best answer heard by the Speech To Text
            </summary>
            <returns>String of the text recognized</returns>
        </member>
        <member name="P:BuddyAPI.SpeechToText.LastRecoText">
            <summary>
            Get the answers list heard by the Speech To Text
            </summary>
            <returns>String of the text recognized. All the suggestions of what seemed to be heard are listed</returns>
        </member>
        <member name="P:BuddyAPI.SpeechToText.LastRecoConfidence">
            <summary>
            Get the confidence of the best answer recognized by the Speech To Text 
            </summary>
            <returns>float from 0.0f to 1.0f specifying the amount of confidence in the suggested answer</returns>
        </member>
        <member name="P:BuddyAPI.SpeechToText.HasFinished">
            <summary>
            Is the listening finished?
            </summary>
            <returns>Is the listening finished?</returns>
        </member>
        <member name="P:BuddyAPI.SpeechToText.LastRMS">
            <summary>
            Get the last decibel listened
            </summary>
            <returns>DB in float</returns>
        </member>
        <member name="T:BuddyAPI.SphinxTrigger">
            <summary>
            Trigger used for begin the voice recognition phase.
            </summary>
        </member>
        <member name="M:BuddyAPI.SphinxTrigger.Awake">
            <summary>
            Initialization of the Sphinx plugin
            </summary>
        </member>
        <member name="M:BuddyAPI.SphinxTrigger.LaunchRecognition">
            <summary>
            Launches the voice recognition.
            </summary>
        </member>
        <member name="M:BuddyAPI.SphinxTrigger.StopRecognition">
            <summary>
            Ends the voice recognition.
            </summary>
        </member>
        <member name="M:BuddyAPI.SphinxTrigger.SetLanguage(Language)">
            <summary>
            Update the current detected language.
            </summary>
            <param name="iLanguage"></param>
        </member>
        <member name="M:BuddyAPI.SphinxTrigger.ChangeThreshold(System.Single)">
            <summary>
            Set the threshold of the sphinx trigger
            Shouldn't be called continously
            </summary>
            <param name="iThreshold">Threshold of the trigger, default is 1e-30f</param>
        </member>
        <member name="M:BuddyAPI.SphinxTrigger.HasTriggered">
            <summary>
            Detects if the trigger has been activated.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BuddyAPI.SphinxTrigger.FinishedSetup">
            <summary>
            Update all new setup.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BuddyAPI.TextToSpeech">
            <summary>
            This class allows Buddy to "speak" an input sentence.
            </summary>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.NullHardware.GetUSValue(System.Int32)">
            <summary>
            Get the value of USSensors sensor.
            </summary>
            <param name="iID">The ID of the desired USSensors sensor, front right, front left, or back</param>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.NullHardware.GetUSDistance(System.Int32)">
            <summary>
            Get the distance in m from USSensors sensor.
            </summary>
            <param name="iID">The ID of the desired USSensors sensor, front right, front left, or back</param>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.NullHardware.SetHeadAxisPosition(System.Int32,System.Single,System.Single)">
            <summary>
            Set head axis.
            </summary>
            <param name="iAxis">ID of the axis, HEAD (no) or NECK (yes) </param>
            <param name="iAngleDeg">Position asked in degrees</param>
            <param name="iSpeed">Speed asked between 0F and 1f</param>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.NullHardware.SetAxisPositionInPercent(System.Int32,System.Single,System.Single)">
            <summary>
            Set head axis.
            </summary>
            <param name="iAxis">ID of the axis, HEAD (no) or NECK (yes) </param>
            <param name="iAngleDeg">Position asked in degrees</param>
            <param name="iSpeed">Speed asked between 0F and 1f</param>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.NullTablet.InitWebcam(System.Int32)">
            <summary>
            Init the camera with default parameters.
            See defaults parameters
            </summary>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.NullTablet.OpenWebcam">
            <summary>
            Open the camera device. Should be call one time.
            </summary>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.NullTablet.CloseWebcam">
            <summary>
            Close the current opened camera. Must be call when you don't use the camera anymore. 
            </summary>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.NullTablet.CameraAngle">
            <summary>
            Gets the angle of the camera in degrees.
            </summary>
            <returns>Angle in degrees</returns>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.NullTablet.UpdateFrame">
            <summary>
            Update the camera frame to the current input RGB camera value.
            </summary>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.NullTablet.StartMicro(System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Starts Recording. 
            Returns an AudioClip, or NULL if recording fails to start.
            </summary>
            <param name="iDeviceName">Name of the device</param>
            <param name="iLoop">Indicates whether the recording should continue recording if lengthSec is reached, and wrap around and record from the beginning of the AudioClip.</param>
            <param name="iLenghtSec">Time record in seconds</param>
            <param name="iFrequency">The sample rate of the AudioClip produced by the recording.</param>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.NullTablet.StopMicro(System.String)">
            <summary>
            Stops Recording.
            </summary>
            <param name="iDeviceName">Name of the device</param>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.NullTablet.IsRecordingMicro(System.String)">
            <summary>
            Asks if a device is currently recording.
            </summary>
            <param name="iDeviceName">Name of the device</param>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.NullTablet.GetPositionMicro(System.String)">
            <summary>
            Get the position in samples of the recording.
            </summary>
            <param name="iDeviceName">Name of the device</param>        
        </member>
        <member name="M:BuddyAPI.HardwareDivision.NullTablet.GetDeviceCapsMicro(System.String)">
            <summary>
            Get the frequency capabilities of a device.
            Returns min and max frequency that the device supports.
            </summary>
            <param name="iDeviceName">Name of the device</param>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.RealDepthCam.UpdateFrame">
            <summary>
            Update the current frame of the 3D camera
            </summary>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.RealDepthCam.Open(DepthMode)">
            <summary>
            Open the 3D camera
            </summary>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.RealDepthCam.Close">
            <summary>
            Close the 3D camera
            </summary>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.RealHardware.GetIRValue(System.Int32)">
            <summary>
            Get the value in m from IRSensors sensor.
            </summary>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.RealHardware.GetIRDistance(System.Int32)">
            <summary>
            Get the distance in m from IRSensors sensor.
            </summary>
            <param name="iID">The ID of the desired IRSensors sensor, front right, front middle, front left, or front head</param>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.RealHardware.SetWheelSpeed(System.Single,System.Single,System.Int32)">
            <summary>
            Control the speed of wheels with a timeout.
            </summary>
            <param name="iLeft">Left speed in degrees per second</param>
            <param name="iRight">Right speed in degrees per second</param>
            <param name="iTimeout">Stop controlling in 'timeout' milliseconds</param>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.RealHardware.TurnAbsoluteAngle(System.Single,System.Single,System.Single)">
            <summary>
            Turn until the desired global angle is reached.
            </summary>
            <param name="iAngleDeg">The angle desired in degrees</param>
            <param name="iSpeed">The speed in degrees per second</param>
            <param name="iTolerance">The angle tolerance to reach to stop command in radians</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:BuddyAPI.HardwareDivision.RealHardware.TurnAngle(System.Single,System.Single,System.Single)" -->
        <member name="M:BuddyAPI.HardwareDivision.RealHardware.MoveToAbsolutePosition(UnityEngine.Vector2,System.Single,System.Single)">
            <summary>
            Make the robot go to a desired global position.
            </summary>
            <param name="iPosition">x and y coordinate in meter</param>
            <param name="iSpeed">Speed desired in degrees per second</param>
            <param name="iTolerance">The distance tolerance to reach to stop command in meters</param>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.RealHardware.MoveToPosition(UnityEngine.Vector2,System.Single,System.Single)">
            <summary>
            Make the robot go to a desired position.
            </summary>
            <param name="iPosition">x and y coordinate in meter</param>
            <param name="iSpeed">Speed desired in degrees per second</param>
            <param name="iTolerance">The distance tolerance to reach to stop command in meters</param>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.RealHardware.MoveDistance(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Indicate speeds of wheels during a desired distance.
            </summary>
            <param name="iLeft">Left speed in degrees per second</param>
            <param name="iRight">right speed in degrees per second</param>
            <param name="iDistance">distance to reach until the command is done in meter</param>
            <param name="iTolerance">distance tolerance in meter to stop the command</param>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.RealHardware.StopWheels">
            <summary>
            Stop wheels by setting their speed values to 0F.
            </summary>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.RealHardware.SetOdometryBelieves(UnityEngine.Vector2,System.Single)">
            <summary>
            Set the hardware value of the odometry's believes.
            </summary>
            <param name="iPosition">Position (x,y) in meters</param>
            <param name="iRotation">Orientation theta in degrees</param>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.RealHardware.SetOdometryBelieves(UnityEngine.Vector3)">
            <summary>
            Set the hardware value of the odometry's believes.
            </summary>
            <param name="iPosition">Position (x, y, th) with x and y in meters and theta in degrees</param>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.RealHardware.GetRobotPoseBelieves">
            <summary>
            Set the hardware value of the odometry's believes.
            </summary>
            <returns>returns the 3D robot Pose obtained using wheel's odometry</returns>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.RealHardware.SetHeadAxisPosition(System.Int32,System.Single,System.Single)">
            <summary>
            Set head axis.
            </summary>
            <param name="iAxis">ID of the axis, 0 (no) or 1 (yes) </param>
            <param name="iAngleDeg">Position asked in degrees</param>
            <param name="iSpeed">Speed asked in degrees per second</param>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.RealHardware.SetAxisPositionInPercent(System.Int32,System.Single,System.Single)">
            <summary>
            Set head axis.
            </summary>
            <param name="iAxis">ID of the axis, 0 (no) or 1 (yes) </param>
            <param name="iAngleDeg">Position asked in degrees</param>
            <param name="iSpeed">Speed asked between 0 and 1</param>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.RealTablet.ChoseWebcam">
            <summary>
            Chose an available camera.
            Check if there is any available camera on the device.
            </summary>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.RealTablet.ChoseWebcam(System.Int32)">
            <summary>
            Chose a specific camera from iID.
            </summary>
            <param name="iID"></param>
            <returns></returns>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.RealTablet.InitWebcam(System.Int32)">
            <summary>
            Init the camera with default parameters.
            Defaults parameters :
            DEFAULT_CAMERA_ID = 0
            </summary>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.RealTablet.OpenWebcam">
            <summary>
            Open the camera device. 
            </summary>
            <remarks>
            Should be called only when the camera is closed.
            See "IsOpen" accessor to know this.
            </remarks>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.RealTablet.CloseWebcam">
            <summary>
            Close the current opened camera. Must be called when you don't use the camera anymore. 
            </summary>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.RealTablet.CameraAngle">
            <summary>
            Gets the angle of the camera in degrees.
            </summary>
            <returns>Angle in degrees</returns>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.RealTablet.UpdateFrame">
            <summary>
            Update the camera frame to the current input RGB camera value.
            </summary>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.RealTablet.StartMicro(System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Starts Recording. 
            Returns an AudioClip, or NULL if recording fails to start.
            </summary>
            <param name="iDeviceName">Name of the device</param>
            <param name="iLoop">Indicates whether the recording should continue recording if lengthSec is reached, and wrap around and record from the beginning of the AudioClip.</param>
            <param name="iLenghtSec">Time record in seconds</param>
            <param name="iFrequency">The sample rate of the AudioClip produced by the recording.</param>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.RealTablet.StopMicro(System.String)">
            <summary>
            Stops Recording.
            </summary>
            <param name="iDeviceName">Name of the device</param>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.RealTablet.IsRecordingMicro(System.String)">
            <summary>
            Asks if a device is currently recording.
            </summary>
            <param name="iDeviceName">Name of the device</param>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.RealTablet.GetPositionMicro(System.String)">
            <summary>
            Get the position in samples of the recording.
            </summary>
            <param name="iDeviceName">Name of the device</param>        
        </member>
        <member name="M:BuddyAPI.HardwareDivision.RealTablet.GetDeviceCapsMicro(System.String)">
            <summary>
            Get the frequency capabilities of a device.
            Returns min and max frequency that the device supports.
            </summary>
            <param name="iDeviceName">Name of the device</param>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.SimuDepthCam.UpdateFrame">
            <summary>
            Update the current frame of the 3D camera
            </summary>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.SimuDepthCam.Open(DepthMode)">
            <summary>
            Open the camera device. Should be call one time.
            </summary>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.SimuDepthCam.Close">
            <summary>
            Close the current opened camera. Must be call when you don't use the camera anymore. 
            </summary>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.SimuHardware.SetBodyLight(UnityEngine.Color,System.Single,System.Single)">
            <summary>
            Set Buddy lights.
            </summary>
            <param name="iNewColor">Color of the lights in RGB</param>
            <param name="iVariation">Amplitude of the oscillation in purcentage (0.0f to 2.55f with step of 0.01f)</param>
            <param name="iFrequency">Frequency of oscillation in Hertz (0.0f to 5.10f with step of 0.02f)</param>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.SimuHardware.SetBodyLight(System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Set the body light value and oscillation. The oscillation saturate under 0.0f and above 1.0f.
            </summary>
            <param name="H">Hue value in degrees (0 to 360)</param>
            <param name="S">Saturation purcentage (0 to 100)</param>
            <param name="V">Brightness of the color (0 to 100)</param>
            <param name="variation">Amplitude of the oscillation in purcentage (0.0f to 2.55f with step of 0.01f)</param>
            <param name="frequency">Frequency of oscillation in Hertz (0.0f to 5.10f with step of 0.02f)</param>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.SimuTablet.InitWebcam(System.Int32)">
            <summary>
            Init the camera with default parameters.
            </summary>
            <remarks>
            Defaults parameters : 0
            </remarks>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.SimuTablet.OpenWebcam">
            <summary>
            Open the camera device. Should be call one time.
            </summary>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.SimuTablet.CloseWebcam">
            <summary>
            Close the current opened camera. Must be call when you don't use the camera anymore. 
            </summary>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.SimuTablet.CameraAngle">
            <summary>
            Gets the angle of the camera in degrees.
            </summary>
            <returns>Angle in degrees</returns>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.SimuTablet.UpdateFrame">
            <summary>
            Update the camera frame to the current input RGB camera value.
            </summary>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.SimuTablet.StartMicro(System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Starts Recording. 
            Returns an AudioClip, or NULL if recording fails to start.
            </summary>
            <param name="iDeviceName">Name of the device</param>
            <param name="iLoop">Indicates whether the recording should continue recording if lengthSec is reached, and wrap around and record from the beginning of the AudioClip.</param>
            <param name="iLenghtSec">Time record in seconds</param>
            <param name="iFrequency">The sample rate of the AudioClip produced by the recording.</param>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.SimuTablet.StopMicro(System.String)">
            <summary>
            Stops Recording.
            </summary>
            <param name="iDeviceName">Name of the device</param>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.SimuTablet.IsRecordingMicro(System.String)">
            <summary>
            Asks if a device is currently recording.
            </summary>
            <param name="iDeviceName">Name of the device</param>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.SimuTablet.GetPositionMicro(System.String)">
            <summary>
            Get the position in samples of the recording.
            </summary>
            <param name="iDeviceName">Name of the device</param>        
        </member>
        <member name="M:BuddyAPI.HardwareDivision.SimuTablet.GetDeviceCapsMicro(System.String)">
            <summary>
            Get the frequency capabilities of a device.
            Returns min and max frequency that the device supports.
            </summary>
            <param name="iDeviceName">Name of the device</param>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.SoundChannel.#ctor(UnityEngine.AudioSource)">
            <summary>
            Constructor
            </summary>
            <param name="iAudioSource">Unity Component</param>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.SoundChannel.Update">
            <summary>
            Use to Update the status of the sound chanel
            </summary>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.SoundChannel.Play(UnityEngine.AudioClip)">
            <summary>
            Play the current Audio Clip, or the selected AudioClip
            </summary>
            <param name="iAudioClip">Selected audio clip to play.</param>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.SoundChannel.Pause">
            <summary>
            Pause the audio clip.
            </summary>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.SoundChannel.Resume">
            <summary>
            If paused, replay the audio clip
            </summary>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.SoundChannel.Stop">
            <summary>
            Stop the current Audio Clip
            </summary>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.SoundChannel.Kill">
            <summary>
            Kill the Audio clip (stop + audio source = null)
            </summary>
        </member>
        <member name="M:BuddyAPI.HardwareDivision.SoundChannel.LoadSource(System.String)">
            <summary>
            Load an audioclip from the folder Resources/Sounds/
            </summary>
            <param name="iUrlSource">Filename of the audio source without the extension</param>
        </member>
        <member name="P:BuddyAPI.HardwareDivision.SoundChannel.Loop">
            <summary>
            Loop state of the audiosource
            </summary>
        </member>
        <member name="P:BuddyAPI.HardwareDivision.SoundChannel.Volume">
            <summary>
            Volume of the audiosource
            </summary>
        </member>
        <member name="P:BuddyAPI.HardwareDivision.SoundChannel.Mute">
            <summary>
            Mute state of the audiosource
            </summary>
        </member>
        <member name="T:BuddyAPI.Parameters">
            <summary>
            Variables and methods related to the tablet's parameters.
            </summary>
        </member>
        <member name="M:BuddyAPI.Parameters.SetTablet(BuddyAPI.HardwareDivision.ATablet)">
            <summary>
            Sets the Tablet for inner connection.
            For simulated tablet (for simulation), set a SimuTablet
            For real tablet (with a real Buddy robot), set a RealTablet
            </summary>
            <param name="iTablet">The simulated or real tablet to link.</param>
        </member>
        <member name="M:BuddyAPI.Parameters.Start">
            <summary>
            Called once at the start.
            </summary>
        </member>
        <member name="M:BuddyAPI.Parameters.ConnectToNetwork(System.String,System.String)">
            <summary>
            Connects to wanted Access Point
            </summary>
            <param name="iSSID">Name of the Access Point</param>
            <param name="iPassword">Password to this Access Point</param>
        </member>
        <member name="M:BuddyAPI.Parameters.GetWifiCount">
            <summary>
            Gets the number of Wifi Access Point
            </summary>
            <returns>Number of Wifi Access Point</returns>
        </member>
        <member name="M:BuddyAPI.Parameters.GetWifiAPName(System.Int32)">
            <summary>
            Gets the Wifi Access Point Name at index iPosition
            </summary>
            <param name="iPosition">Index of the Wifi Access Point</param>
            <returns>Name of the Access Point</returns>
        </member>
        <member name="M:BuddyAPI.Parameters.GetWifiForce(System.Int32)">
            <summary>
            Gets the Force of the Wifi Access Point at index iPosition
            </summary>
            <param name="iPosition">Index of the Wifi Access Point</param>
            <returns>Integer of the force</returns>
        </member>
        <member name="M:BuddyAPI.Parameters.StartWifiScan">
            <summary>
            Starts a Wifi Scan
            </summary>
        </member>
        <member name="M:BuddyAPI.Parameters.HasScannedWifi">
            <summary>
            Has the Wifi finish scanning
            </summary>
            <returns>True if the wifi was scanned</returns>
        </member>
        <member name="M:BuddyAPI.Parameters.EnableBluetooth">
            <summary>
            Enables Bluetooth connection
            </summary>
        </member>
        <member name="M:BuddyAPI.Parameters.DisableBluetooth">
            <summary>
            Disables Bluetooth connection
            </summary>
        </member>
        <member name="M:BuddyAPI.Parameters.GetAvailableInternalStorage">
            <summary>
            Gets the available internal storage
            </summary>
            <returns>Value in bytes</returns>
        </member>
        <member name="M:BuddyAPI.Parameters.GetAvailableExternalStorage">
            <summary>
            Gets the available external storage
            </summary>
            <returns>Value in bytes</returns>
        </member>
        <member name="M:BuddyAPI.Parameters.GetTotalInternalStorage">
            <summary>
            Gets the total internal storage
            </summary>
            <returns>Value in bytes</returns>
        </member>
        <member name="M:BuddyAPI.Parameters.GetTotalExternalStorage">
            <summary>
            Gets the total external storage
            </summary>
            <returns>Value in bytes</returns>
        </member>
        <member name="M:BuddyAPI.Parameters.GetXAccelerometer">
            <summary>
            Gets the X axis force of the accelerometer, including gravity force
            </summary>
            <returns>Value in float</returns>
        </member>
        <member name="M:BuddyAPI.Parameters.GetYAccelerometer">
            <summary>
            Gets the Y axis force of the accelerometer, including gravity force
            </summary>
            <returns>Value in float</returns>
        </member>
        <member name="M:BuddyAPI.Parameters.GetZAccelerometer">
            <summary>
            Gets the Z axis force of the accelerometer, including gravity force
            </summary>
            <returns>Value in float</returns>
        </member>
        <member name="M:BuddyAPI.Parameters.GetTabletBatteryPercentage">
            <summary>
            Gets tablet battery value
            </summary>
        </member>
        <member name="T:BuddyAPI.Battery">
            <summary>
            Battery interface for the robot.
            </summary>
            <remarks>For the simulator, Battery autonomy is set to 8 hours, as the autonomy of the real robot.</remarks>
        </member>
        <member name="F:BuddyAPI.Battery.mBattery">
            <summary>
            Instance of Battery
            </summary>
        </member>
        <member name="M:BuddyAPI.Battery.SetHardware(BuddyAPI.HardwareDivision.AHardware)">
            <summary>
            Sets the Hardware for inner connection.
            </summary>
            <param name="iHardware">Simulated or real hardware to link.</param>
        </member>
        <member name="P:BuddyAPI.Battery.MaxVoltage">
            <summary>
            Maximum value of the battery in volts.
            </summary>
        </member>
        <member name="P:BuddyAPI.Battery.MinVoltage">
            <summary>
            Minimum value of the battery in volts.
            </summary>
        </member>
        <member name="P:BuddyAPI.Battery.Volts">
            <summary>
            Returns battery's value in volts.
            </summary>
            <returns>Instant battery's voltage, in volts</returns>
        </member>
        <member name="P:BuddyAPI.Battery.EnergyLevel">
            <summary>
            Returns the purcentage of the battery's recharge.
            </summary>
        </member>
        <member name="P:BuddyAPI.Battery.SuppliesPower">
            <summary>
            Let the battery provide power to the robot or not.
            </summary>
            <remarks> You have to put the value to true tu use Buddy's functionnalities.</remarks>
        </member>
        <member name="T:BuddyAPI.DepthCam">
            <summary>
            Depth camera interface of the robot. Currently not implemented for real robot
            </summary>
        </member>
        <member name="F:BuddyAPI.DepthCam.mDepthCam">
            <summary>
            Instance of 3D Camera 
            </summary>
        </member>
        <member name="M:BuddyAPI.DepthCam.Start">
            <summary>
            Called once at the beginning.
            </summary>
        </member>
        <member name="M:BuddyAPI.DepthCam.Update">
            <summary>
            Called at each frame
            </summary>
        </member>
        <member name="M:BuddyAPI.DepthCam.SetDepthCam(BuddyAPI.HardwareDivision.ADepthCam)">
            <summary>
            Sets the DepthCam for inner connection.
            To Simulate DepthCam, it sets SimuCam3D.
            For real DepthCam (with a real Buddy robot), it sets RealCam3D.
            </summary>
            <param name="iDepthCam">Simulated or real cam3D to link.</param>
        </member>
        <member name="M:BuddyAPI.DepthCam.Open(DepthMode)">
            <summary>
            Opens the camera device. Should be called once by session.
            </summary>
            <param name="iMode">Mode of the camera</param>
        </member>
        <member name="M:BuddyAPI.DepthCam.Open(System.Int32)">
            <summary>
            Opens the camera device. Should be called once by session.
            </summary>
            <param name="iMode">Mode of the camera</param>
        </member>
        <member name="M:BuddyAPI.DepthCam.Close">
            <summary>
            Closes the current opened camera. Must be call when you don't use the camera anymore. 
            </summary>
        </member>
        <member name="P:BuddyAPI.DepthCam.FieldOfView">
            <summary>
            Field of view of the camera
            </summary>
        </member>
        <member name="P:BuddyAPI.DepthCam.FrameMat">
            <summary>
            Gets the current frame as a Mat OpenCVUnity format.
            </summary>
            <returns>Mat format of the current frame</returns>
        </member>
        <member name="P:BuddyAPI.DepthCam.FrameTexture2D">
            <summary>
            Gets the current frame as a Texture2D format.
            </summary>
            <returns>Texture2D format of the current frame</returns>
        </member>
        <member name="P:BuddyAPI.DepthCam.DepthFrame">
            <summary>
            Gets the current frame as a Mat OpenCVUnity format in grayscale.
            </summary>
            <returns>Mat format of the current frame</returns>
        </member>
        <member name="P:BuddyAPI.DepthCam.DepthTexture2D">
            <summary>
            Gets the current frame as a Texture2D format in grayscale.
            </summary>
            <returns>Texture2D format of the current frame</returns>
        </member>
        <member name="P:BuddyAPI.DepthCam.Width">
            <summary>
            Gets the width of the camera output.
            </summary>
            <returns>Number of pixels corresponding to the width of the frame</returns>
        </member>
        <member name="P:BuddyAPI.DepthCam.Height">
            <summary>
            Gets the height of the camera output.
            </summary>
            <returns>Number of pixels corresponding to the height of the frame</returns>
        </member>
        <member name="P:BuddyAPI.DepthCam.FrameID">
            <summary>
            Gets the id of the current frame.
            </summary>
            <returns>ID of the frame</returns>
        </member>
        <member name="P:BuddyAPI.DepthCam.IsOpen">
            <summary>
            Checks if the camera is open.
            </summary>
            <remarks>
            An opened camera will update its frame depending to the input view
            </remarks>
            <returns>Return true if the camera is open</returns>
        </member>
        <member name="P:BuddyAPI.DepthCam.IsRelative">
            <summary>
            Is the color relative to the maximum of the distance
            </summary>
        </member>
        <member name="P:BuddyAPI.DepthCam.PointCloud">
            <summary>
            Return the point cloud of the 
            </summary>
            <returns>The point cloud</returns>
        </member>
        <member name="T:BuddyAPI.RGBCam">
            <summary>
            RGB camera (webcam of the tablet) interface of the robot.
            </summary>
        </member>
        <member name="F:BuddyAPI.RGBCam.mRGBCam">
            <summary>
            Instance of Camera RGB
            </summary>
        </member>
        <member name="M:BuddyAPI.RGBCam.Start">
            <summary>
            Called once at the start
            </summary>
        </member>
        <member name="M:BuddyAPI.RGBCam.Update">
            <summary>
            Called at each frame.
            </summary>
        </member>
        <member name="M:BuddyAPI.RGBCam.OnDisable">
            <summary>
            Called when script is disabled.
            </summary>
        </member>
        <member name="M:BuddyAPI.RGBCam.SetTablet(BuddyAPI.HardwareDivision.ATablet)">
            <summary>
            Sets the Tablet for inner connection.
            </summary>
            <remarks>
            To simulate Tablet, it sets a SimuTablet.
            For real Tablet (with a real Buddy robot), it sets a RealTablet.
            </remarks>
            <param name="iTablet">Simulated or real Tablet to link</param>
        </member>
        <member name="M:BuddyAPI.RGBCam.Open">
            <summary>
            Open the camera device. 
            </summary>
            <remarks>
            Should be called only when the camera is closed.
            See "IsOpen" accessor to know this.
            </remarks>
        </member>
        <member name="M:BuddyAPI.RGBCam.Close">
            <summary>
            Closes the current opened video stream. 
            </summary>
            <remarks>
            Must be called when you will not use the camera anymore. 
            </remarks>
        </member>
        <member name="P:BuddyAPI.RGBCam.CameraID">
            <summary>
            ID of the selected Camera
            </summary>
        </member>
        <member name="P:BuddyAPI.RGBCam.FieldOfView">
            <summary>
            Field of view of the webcam
            </summary>
        </member>
        <member name="P:BuddyAPI.RGBCam.Orientation">
            <summary>
            Get the current angle of the camera around its normal axis in degrees.
            </summary>
            <returns>Angle in degrees</returns>
        </member>
        <member name="P:BuddyAPI.RGBCam.FrameTexture2D">
            <summary>
            Returns the current frame.
            </summary>
            <returns>The current frame in a Texture2D format</returns>
        </member>
        <member name="P:BuddyAPI.RGBCam.FrameMat">
            <summary>
            Returns the current frame as a Mat OpenCVUnity format.
            </summary>
            <returns>The current frame in a Mat OpenCVUnity format</returns>
        </member>
        <member name="P:BuddyAPI.RGBCam.Width">
            <summary>
            Returns the width of the video stream output.
            </summary>
            <returns>The width of the video stream output in pixels</returns>
        </member>
        <member name="P:BuddyAPI.RGBCam.Height">
            <summary>
            Returns the height of the video stream output.
            </summary>
            <returns>The height of the video stream output in pixels</returns>
        </member>
        <member name="P:BuddyAPI.RGBCam.FrameID">
            <summary>
            Returns the ID of the current frame.
            </summary>
            <returns>ID of the frame</returns>
        </member>
        <member name="P:BuddyAPI.RGBCam.IsOpen">
            <summary>
            Checks if the camera is opened.
            An opened video stream will update its frame depending to the input view.
            </summary>
            <returns>Return true if the video stream  is opened, and false if not.</returns>
        </member>
        <member name="P:BuddyAPI.RGBCam.Resolution">
            <summary>
            The resolution of the webcam 640x480, 320x240 or 176x144
            When setted, close and re-open automaticaly the camera.
            </summary>
        </member>
        <member name="T:BuddyAPI.LED">
            <summary>
            LED interface of the robot
            </summary>
        </member>
        <member name="F:BuddyAPI.LED.mLED">
            <summary>
            Instance of LED
            </summary>
        </member>
        <member name="M:BuddyAPI.LED.SetHardware(BuddyAPI.HardwareDivision.AHardware)">
            <summary>
            Set the Hardware for inner connection.
            For simulate Hardware (for simulation), set a SimuHardware
            For real Hardware (with a real Buddy robot), set a RealHardware
            </summary>
            <param name="iHardware">The simulate or real Hardware to link.</param>
        </member>
        <member name="M:BuddyAPI.LED.Start">
            <summary>
            Called once at the start.
            </summary>
        </member>
        <member name="M:BuddyAPI.LED.SetBodyLight(LEDColor)">
            <summary>
            Set the body light based on the mood.
            </summary>
            <param name="iMoodColor">Color coresponding to the mood</param>
        </member>
        <member name="M:BuddyAPI.LED.SetBodyLight(UnityEngine.Color,System.Single,System.Single)">
            <summary>
            Set the body light value and oscillation with UnityEngine Color.
            </summary>
            <param name="iColor">Color of the lights in RGB</param>
            <param name="iVariation">Amplitude of the oscillation in purcentage (0.0f to 1f with step of 0.01f)</param>
            <param name="iFrequency">Frequency of oscillation in Hertz (0.0f to 5.10f with step of 0.02f)</param>
        </member>
        <member name="M:BuddyAPI.LED.SetBodyLight(System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Set the body light value and oscillation with HSV Color.
            </summary>
            <param name="iH">Hue value in degrees (0.0f to 360.0f)</param>
            <param name="iS">Saturation purcentage (0.0f to 100f)</param>
            <param name="iV">Brightness of the color  (0.0f to 100f)</param>
            <param name="iVariation">>Amplitude of the oscillation in purcentage (0.0f to 1f with step of 0.01f)</param>
            <param name="iFrequency">Frequency of oscillation in Hertz (0.0f to 5.10f with step of 0.02f)</param>
        </member>
        <member name="T:BuddyAPI.Micro">
            <summary>
            This Class contains all variables and methods related to the buddy's micro control and return.
            </summary>
        </member>
        <member name="M:BuddyAPI.Micro.SetTablet(BuddyAPI.HardwareDivision.ATablet)">
            <summary>
            Sets the Tablet for inner connection.
            For simulate tablet (for simulation), set a SimuTablet
            For real tablet (with a real Buddy robot), set a RealTablet
            </summary>
            <param name="iTablet">The simulate or real tablet to link.</param>
        </member>
        <member name="M:BuddyAPI.Micro.Start">
            <summary>
            Methode launch at the start
            </summary>
        </member>
        <member name="M:BuddyAPI.Micro.StartMicro(System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Starts Recording. 
            Returns an AudioClip, or NULL if recording fails to start.
            </summary>
            <param name="iDeviceName">Name of the device</param>
            <param name="iLoop">Indicates whether the recording should continue recording if lengthSec is reached, and wrap around and record from the beginning of the AudioClip.</param>
            <param name="iLenghtSec">Time record in seconds</param>
            <param name="iFrequency">The sample rate of the AudioClip produced by the recording.</param>
        </member>
        <member name="M:BuddyAPI.Micro.StopMicro(System.String)">
            <summary>
            Stops Recording.
            </summary>
            <param name="iDeviceName">Name of the device</param>
        </member>
        <member name="M:BuddyAPI.Micro.IsRecordingMicro(System.String)">
            <summary>
            Asks if a device is currently recording.
            </summary>
            <param name="iDeviceName">Name of the device</param>
        </member>
        <member name="M:BuddyAPI.Micro.GetPositionMicro(System.String)">
            <summary>
            Get the position in samples of the recording.
            </summary>
            <param name="iDeviceName">Name of the device</param>        
        </member>
        <member name="M:BuddyAPI.Micro.GetDeviceCapsMicro(System.String)">
            <summary>
            Get the frequency capabilities of a device.
            Returns min and max frequency that the device supports.
            </summary>
            <param name="iDeviceName">Name of the device</param>
        </member>
        <member name="P:BuddyAPI.Micro.Record">
            <summary>
            The current recording
            </summary>
        </member>
        <member name="T:BuddyAPI.Motors">
            <summary>
            This Class contains all variables and methods related to the buddy's motion control.
            </summary>
            <remarks>
            It allows the control of the different motors of Buddy's head and body, and its Motors.
            You can control :
            <DL>
            <DT>Buddy's ordientation</DT>
            <DT>Buddy's position</DT>
            <DT>Buddy's head on the X axis</DT>
            <DT>Buddy's head on the Y axis</DT>
            <DT>Buddy's odometry.</DT>
            </DL>
            </remarks>
        </member>
        <member name="F:BuddyAPI.Motors.mWheels">
            <summary>
            Instance of wheels
            </summary>
        </member>
        <member name="F:BuddyAPI.Motors.mNoHinge">
            <summary>
            Instance of Head Hinge
            </summary>
        </member>
        <member name="F:BuddyAPI.Motors.mYesHinge">
            <summary>
            Instance of Neck Hinge
            </summary>
        </member>
        <member name="M:BuddyAPI.Motors.SetHardware(BuddyAPI.HardwareDivision.AHardware)">
            <summary>
            Sets the hardware (Hardware) for inner connections.
            </summary>
            <param name="iHardware">Simulated or real hardware to link.</param>
        </member>
        <member name="P:BuddyAPI.Motors.Wheels">
            <summary>
            Accessor to control wheels
            </summary>
        </member>
        <member name="P:BuddyAPI.Motors.NoHinge">
            <summary>
            Accessor to control the Head Hinge
            </summary>
        </member>
        <member name="P:BuddyAPI.Motors.YesHinge">
            <summary>
            Accessor to control the Neck Hinge
            </summary>
        </member>
        <member name="T:BuddyAPI.CliffSensors">
            <summary>
            Cliff sensors interface of the robot. Currently not implemented for real robot.
            </summary>
        </member>
        <member name="M:BuddyAPI.CliffSensors.Start">
            <summary>
            Called once at the start
            </summary>
        </member>
        <member name="M:BuddyAPI.CliffSensors.SetHardware(BuddyAPI.HardwareDivision.AHardware)">
            <summary>
            Set the hardware for inner connection.
            For simulated hardware (for simulation), set a SimuHardware
            For real hardware (with a real Buddy robot), set a RealHardware
            </summary>
            <param name="iHardware">The simulate or real hardware to link.</param>
        </member>
        <member name="P:BuddyAPI.CliffSensors.FrontLeft">
            <summary>
            Accessor to the structure for the front left cliff sensor.
            </summary>
        </member>
        <member name="P:BuddyAPI.CliffSensors.FrontRight">
            <summary>
            Accessor to the structure for the front right cliff sensor.
            </summary>
        </member>
        <member name="P:BuddyAPI.CliffSensors.BackLeft">
            <summary>
            Accessor to the structure for the back left cliff sensor.
            </summary>
        </member>
        <member name="P:BuddyAPI.CliffSensors.BackRight">
            <summary>
            Accessor to the structure for the back right cliff sensor.
            </summary>
        </member>
        <member name="T:BuddyAPI.IRSensors">
            <summary>
            This Class contains the instance to the object Structure.IRSensors and return it.
            </summary>
        </member>
        <member name="M:BuddyAPI.IRSensors.Start">
            <summary>
            Called once at the start.
            </summary>
        </member>
        <member name="M:BuddyAPI.IRSensors.SetHardware(BuddyAPI.HardwareDivision.AHardware)">
            <summary>
            Set the Hardware for inner connections.
            </summary>
            <remarks>
            For simulated hardware (for simulation), set a SimuHardware
            For real hardware (with a real Buddy robot), set a RealHardware
            </remarks>
            <param name="iHardware">The simulated or real Hardware to link</param>
        </member>
        <member name="P:BuddyAPI.IRSensors.Left">
            <summary>
            Access to structure data for the left infrared sensor.
            </summary>
        </member>
        <member name="P:BuddyAPI.IRSensors.Middle">
            <summary>
            Access to structure data for the middle infrared sensor.
            </summary>
        </member>
        <member name="P:BuddyAPI.IRSensors.Right">
            <summary>
            Access to structure data for the right infrared sensor.
            </summary>
        </member>
        <member name="T:BuddyAPI.ThermalSensor">
            <summary>
            Thermal Sensor interface of the robot. Currently not implemented for simulated robot.
            </summary>
        </member>
        <member name="M:BuddyAPI.ThermalSensor.Start">
            <summary>
            Called once at the start.
            </summary>
        </member>
        <member name="M:BuddyAPI.ThermalSensor.SetHardware(BuddyAPI.HardwareDivision.AHardware)">
            <summary>
            Set the hardware for inner connection.
            For simulated hardware (for simulation), set a SimuHardware
            For real hardware (with a real Buddy robot), set a RealHardware
            </summary>
            <param name="iHardware">The simulate or real Hardware to link.</param>
        </member>
        <member name="P:BuddyAPI.ThermalSensor.Matrix">
            <summary>
            Gets the matrix of the thermal sensor. Currently 4x4 resolution.
            </summary>
        </member>
        <member name="T:BuddyAPI.USSensors">
            <summary>
            Ultra sound sensors interface of the robot.
            </summary>
        </member>
        <member name="M:BuddyAPI.USSensors.Start">
            <summary>
            Called once at the start.
            </summary>
        </member>
        <member name="M:BuddyAPI.USSensors.SetHardware(BuddyAPI.HardwareDivision.AHardware)">
            <summary>
            Set the hardware for inner connections.
            For simulated hardware (for simulation), set a SimuHardware
            For real hardware (with a real Buddy robot), set a RealHardware
            </summary>
            <param name="iHardware">The simulated or real Hardware to link.</param>
        </member>
        <member name="P:BuddyAPI.USSensors.Left">
            <summary>
            Access to structure data for the left ultrasound sensor.
            </summary>
        </member>
        <member name="P:BuddyAPI.USSensors.Right">
            <summary>
            Access to structure data for the right ultrasound sensor.
            </summary>
        </member>
        <member name="P:BuddyAPI.USSensors.Back">
            <summary>
            Access to structure data for the back ultrasound sensor.
            </summary>
        </member>
        <member name="T:BuddyAPI.Speaker">
            <summary>
            Speaker interface of the robot.
            </summary>
        </member>
        <member name="P:BuddyAPI.Speaker.Voice">
            <summary>
            Sound Chanel to manage the voice
            </summary>
        </member>
        <member name="P:BuddyAPI.Speaker.Media">
            <summary>
            Sound Chanel to manage the media sounds
            </summary>
        </member>
        <member name="P:BuddyAPI.Speaker.SoundFx">
            <summary>
            Sound Chanel to manage the FX sounds
            </summary>
        </member>
        <member name="M:BuddyAPI.Speaker.SetTablet(BuddyAPI.HardwareDivision.ATablet)">
            <summary>
            Set the Tablet for inner connection.
            For simulation, sets a SimuTablet instance
            For a real tablet (with a real Buddy robot), sets a RealTablet instance
            </summary>
            <param name="iTablet">The simulate or real tablet to link.</param>
        </member>
        <member name="M:BuddyAPI.Speaker.Start">
            <summary>
            Called once at the start.
            </summary>
        </member>
        <member name="M:BuddyAPI.Speaker.GetVolume">
            <summary>
            Gets the volume of the speaker. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:BuddyAPI.Speaker.VolumeUp(System.Boolean)">
            <summary>
            Increases the volume by 1
            </summary>
            <param name="iSound">Whether to play sound when changin volume</param>
        </member>
        <member name="M:BuddyAPI.Speaker.VolumeDown(System.Boolean)">
            <summary>
            Decreases the volume by 1
            </summary>
            <param name="iSound">Whether to play sound when changin volume</param>
        </member>
        <member name="M:BuddyAPI.Speaker.ChangeVolume(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Changes the volume accordingly
            </summary>
            <param name="iVolume">Volume (1-100)</param>
            <param name="iSound">Whether to play sound when changin volume</param>
            <param name="iShowUI">Whether to show the Volume UI or not</param>
        </member>
        <member name="M:BuddyAPI.Speaker.Update">
            <summary>
            Update Function of Unity3D Call once per frame
            </summary>
        </member>
        <member name="M:BuddyAPI.Speaker.KillAllSounds">
            <summary>
            Kill the sound to all Sound Channels
            </summary>
        </member>
        <member name="T:BuddyAPI.Structure.Parameters">
            <summary>
            Tablet parameters structure. No real change from the monobehaviour interface.
            </summary>
        </member>
        <member name="T:BuddyAPI.Structure.Battery">
            <summary>
            Battery structure. No real change from the monobehaviour interface.
            </summary>
        </member>
        <member name="M:BuddyAPI.Structure.Battery.#ctor(BuddyAPI.HardwareDivision.AHardware)">
            <summary>
            Instanciate with the hardware of the battery for inner connections.
            </summary>
            <remarks>
            For simulated hardware (for simulation), set a SimuHardware
            For real hardware (with a real Buddy robot), set a RealHardware
            </remarks>
            <param name="iHardware">The simulated or real Hardware to link</param>
        </member>
        <member name="P:BuddyAPI.Structure.Battery.MaxVoltage">
            <summary>
            Maximum value of the battery in volts.
            </summary>
        </member>
        <member name="P:BuddyAPI.Structure.Battery.MinVoltage">
            <summary>
            Minimum value of the battery in volts.
            </summary>
        </member>
        <member name="P:BuddyAPI.Structure.Battery.Volts">
            <summary>
            Returns battery's value in volts.
            </summary>
            <returns>Instant battery's voltage, in volts</returns>
        </member>
        <member name="P:BuddyAPI.Structure.Battery.EnergyLevel">
            <summary>
            Returns the purcentage of the battery's recharge.
            </summary>
        </member>
        <member name="P:BuddyAPI.Structure.Battery.SuppliesPower">
            <summary>
            Let the battery provide power to the robot or not.
            </summary>
            <remarks> You have to put the value to true tu use Buddy's functionnalities.</remarks>
        </member>
        <member name="T:BuddyAPI.Structure.DepthCam">
            <summary>
            Depth camera structure. No real change from the monobehaviour interface.
            </summary>
        </member>
        <member name="M:BuddyAPI.Structure.DepthCam.#ctor(BuddyAPI.HardwareDivision.ADepthCam)">
            <summary>
            Instanciate with the DepthCam for inner connection.
            </summary>
            <remarks>
            To simulate Tablet, it sets a SimuCam3D.
            For real DepthCam (with a real Buddy robot), it sets a RealCam3D.
            </remarks>
            <param name="iDepthCam">Simulated or real DepthCam to link</param>
        </member>
        <member name="M:BuddyAPI.Structure.DepthCam.UpdateFrame">
            <summary>
            Update the camera frame to the current input RGB camera value.
            </summary>
        </member>
        <member name="M:BuddyAPI.Structure.DepthCam.Open(DepthMode)">
            <summary>
            Open the camera device. Should be call one time.
            </summary>
        </member>
        <member name="M:BuddyAPI.Structure.DepthCam.Close">
            <summary>
            Close the current opened camera. Must be call when you don't use the camera anymore. 
            </summary>
        </member>
        <member name="P:BuddyAPI.Structure.DepthCam.FieldOfView">
            <summary>
            Field of view of the camera
            </summary>
        </member>
        <member name="P:BuddyAPI.Structure.DepthCam.FrameMat">
            <summary>
            Get the current frame as a Mat OpenCVUnity format.
            </summary>
            <returns>Mat format of the current frame</returns>
        </member>
        <member name="P:BuddyAPI.Structure.DepthCam.FrameTexture2D">
            <summary>
            Get the current frame as a Texture2D format.
            </summary>
            <returns>Texture2D format of the current frame</returns>
        </member>
        <member name="P:BuddyAPI.Structure.DepthCam.DepthFrame">
            <summary>
            Get the current frame as a Mat OpenCVUnity format in grayscale.
            </summary>
            <returns>Mat format of the current frame</returns>
        </member>
        <member name="P:BuddyAPI.Structure.DepthCam.DepthTexture2D">
            <summary>
            Get the current frame as a Texture2D format in grayscale.
            </summary>
            <returns>Texture2D format of the current frame</returns>
        </member>
        <member name="P:BuddyAPI.Structure.DepthCam.Width">
            <summary>
            Get the width of the camera output.
            </summary>
            <returns>Number of pixels corresponding to the width of the frame</returns>
        </member>
        <member name="P:BuddyAPI.Structure.DepthCam.Height">
            <summary>
            Get the height of the camera output.
            </summary>
            <returns>Number of pixels corresponding to the height of the frame</returns>
        </member>
        <member name="P:BuddyAPI.Structure.DepthCam.FrameID">
            <summary>
            Get the id of the current frame.
            </summary>
            <returns>ID of the frame</returns>
        </member>
        <member name="P:BuddyAPI.Structure.DepthCam.IsOpen">
            <summary>
            Check if the camera is open.
            An opened camera will update its frame depending to the input view.
            </summary>
            <returns>Return true if the camera is open</returns>s
        </member>
        <member name="P:BuddyAPI.Structure.DepthCam.IsRelative">
            <summary>
            Is the color relative to the maximum of the distance
            </summary>
        </member>
        <member name="T:BuddyAPI.Structure.RGBCam">
            <summary>
            RGB webcam structure. No real change from the monobehaviour interface.
            </summary>
        </member>
        <member name="P:BuddyAPI.Structure.RGBCam.CameraID">
            <summary>
            Access to the camera ID which was defined while initialization of the cam.
            </summary>
            <remarks>
            Get the value or reinitialize the camera with another value.
            </remarks>
        </member>
        <member name="M:BuddyAPI.Structure.RGBCam.ReInitialize(System.Int32)">
            <summary>
            Initialize the camera with the selected device.
            </summary>
            <remarks>
            Close and re-open the camera if it was previously openned.
            </remarks>
            <param name="iID">ID of the selected camera.</param>
        </member>
        <member name="M:BuddyAPI.Structure.RGBCam.#ctor(BuddyAPI.HardwareDivision.ATablet)">
            <summary>
            Instanciate with the Tablet for inner connection.
            </summary>
            <remarks>
            To simulate Tablet, it sets a SimuTablet.
            For real Tablet (with a real Buddy robot), it sets a RealTablet.
            </remarks>
            <param name="iTablet">Simulated or real Tablet to link</param>
        </member>
        <member name="M:BuddyAPI.Structure.RGBCam.Init(System.Int32)">
            <summary>
            Inits the video stream  with default parameters.
            </summary>
            <remarks>        
            Defaults parameters :
            DEFAULT_CAMERA_ID = 0
            </remarks>
        </member>
        <member name="M:BuddyAPI.Structure.RGBCam.Open">
            <summary>
            Open the camera device. 
            </summary>
            <remarks>
            Should be called only when the camera is closed.
            See "IsOpen" accessor to know this.
            </remarks>
        </member>
        <member name="M:BuddyAPI.Structure.RGBCam.Close">
            <summary>
            Closes the current opened video stream. 
            </summary>
            <remarks>
            Must be called when you will not use the camera anymore. 
            </remarks>
        </member>
        <member name="M:BuddyAPI.Structure.RGBCam.UpdateFrame">
            <summary>
            Updates the video stream frame to the current input RGB camera value.
            </summary>
        </member>
        <member name="P:BuddyAPI.Structure.RGBCam.FieldOfView">
            <summary>
            Field of view of the webcam
            </summary>
        </member>
        <member name="P:BuddyAPI.Structure.RGBCam.Orientation">
            <summary>
            Get the current angle of the camera around its normal axis in degrees.
            </summary>
            <returns>Angle in degrees</returns>d
        </member>
        <member name="P:BuddyAPI.Structure.RGBCam.FrameTexture2D">
            <summary>
            Returns the current frame.
            </summary>
            <returns>The current frame in a Texture2D format</returns>
        </member>
        <member name="P:BuddyAPI.Structure.RGBCam.FrameMat">
            <summary>
            Returns the current frame as a Mat OpenCVUnity format.
            </summary>
            <returns>The current frame in a Mat OpenCVUnity format</returns>
        </member>
        <member name="P:BuddyAPI.Structure.RGBCam.Width">
            <summary>
            Returns the width of the video stream output.
            </summary>
            <returns>The width of the video stream output in pixels</returns>
        </member>
        <member name="P:BuddyAPI.Structure.RGBCam.Height">
            <summary>
            Returns the height of the video stream output.
            </summary>
            <returns>The height of the video stream output in pixels</returns>
        </member>
        <member name="P:BuddyAPI.Structure.RGBCam.FrameID">
            <summary>
            Returns the ID of the current frame.
            </summary>
            <returns>ID of the frame</returns>
        </member>
        <member name="P:BuddyAPI.Structure.RGBCam.IsOpen">
            <summary>
            Checks if the camera is opened.
            An opened video stream will update its frame depending to the input view.
            </summary>
            <returns>Return true if the video stream  is opened, and false if not.</returns>
        </member>
        <member name="P:BuddyAPI.Structure.RGBCam.Resolution">
            <summary>
            Gets or sets the resolution of the camera. 
            When setted, close and re-open automaticaly the camera.
            </summary>
        </member>
        <member name="T:BuddyAPI.Structure.LED">
            <summary>
            LED structure. No real change from the monobehaviour interface.
            </summary>
        </member>
        <member name="M:BuddyAPI.Structure.LED.SetBodyLight(UnityEngine.Color,System.Single,System.Single)">
            <summary>
            Set the body light value and oscillation with UnityEngine Color.
            </summary>
            <param name="iNewColor">Color of the lights in RGB</param>
            <param name="iVariation">Amplitude of the oscillation in purcentage (0.0F to 1f with step of 0.01f)</param>
            <param name="iFrequency">Frequency of oscillation in Hertz (0.0F to 5.10F with step of 0.02f)</param>
        </member>
        <member name="M:BuddyAPI.Structure.LED.SetBodyLight(System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Set the body light value and oscillation with HSV Color.
            </summary>
            <param name="iH">Hue value in degrees (0.0F to 360.0F)</param>
            <param name="iS">Saturation purcentage (0.0F to 100F)</param>
            <param name="iV">Brightness of the color  (0.0F to 100F)</param>
            <param name="iVariation">>Amplitude of the oscillation in purcentage (0.0F to 1f with step of 0.01f)</param>
            <param name="iFrequency">Frequency of oscillation in Hertz (0.0F to 5.10F with step of 0.02f)</param>
        </member>
        <member name="T:BuddyAPI.Structure.Hinge">
            <summary>
            Hinge structure. Corresponds to an hinge of the robot (Yes axe or No axe)
            </summary>
        </member>
        <member name="F:BuddyAPI.Structure.Hinge.mID">
            <summary>
            ID of the hinge : NO or YES
            </summary>
        </member>
        <member name="M:BuddyAPI.Structure.Hinge.#ctor(BuddyAPI.HardwareDivision.AHardware,System.Int32)">
            <summary>
            Sets the hardware (Hardware) for inner connections.
            </summary>
            <param name="iHardware">Simulated or real hardware to link.</param>
        </member>
        <member name="P:BuddyAPI.Structure.Hinge.DestinationAnglePosition">
            <summary>
            Get the setted angular position of the motor in degrees
            </summary>
        </member>
        <member name="P:BuddyAPI.Structure.Hinge.CurrentAnglePosition">
            <summary>
            Get the current angular position of the motor in degrees
            </summary>
        </member>
        <member name="P:BuddyAPI.Structure.Hinge.TargetSpeed">
            <summary>
            Current target velocity in degrees per second
            </summary>
        </member>
        <member name="P:BuddyAPI.Structure.Hinge.MaximumAngle">
            <summary>
            Maximum possible angular position of the motor in degrees
            </summary>
        </member>
        <member name="P:BuddyAPI.Structure.Hinge.MinimumAngle">
            <summary>
            Minimum possible angular position of the motor in degrees
            </summary>
        </member>
        <member name="P:BuddyAPI.Structure.Hinge.MaximumSpeed">
            <summary>
            Maximum possible velocity of the motor in degrees per second
            </summary>
        </member>
        <member name="M:BuddyAPI.Structure.Hinge.SetPosition(System.Single,System.Single)">
            <summary>
            Set the angular position in degrees of the motor at a specific speed in degrees per second
            </summary>
            <param name="iAngleDeg">Angle in degrees of the angular position</param>
            <param name="iSpeed">Speed in degrees/sec of the motor</param>
        </member>
        <member name="M:BuddyAPI.Structure.Hinge.SetPosition(System.Single)">
            <summary>
            Set the angular position in degrees of the motor
            </summary>
            <param name="iAngleDeg">Angle in degrees of the angular position</param>
        </member>
        <member name="T:BuddyAPI.Structure.Micro">
            <summary>
            Microphone structure. No real change from the monobehaviour interface.
            </summary>
        </member>
        <member name="M:BuddyAPI.Structure.Micro.StartMicro(System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Starts Recording. 
            Returns an AudioClip, or NULL if recording fails to start.
            </summary>
            <param name="iDeviceName">Name of the device</param>
            <param name="iLoop">Indicates whether the recording should continue recording if lengthSec is reached, and wrap around and record from the beginning of the AudioClip.</param>
            <param name="iLenghtSec">Time record in seconds</param>
            <param name="iFrequency">The sample rate of the AudioClip produced by the recording.</param>
        </member>
        <member name="M:BuddyAPI.Structure.Micro.StopMicro(System.String)">
            <summary>
            Stops Recording.
            </summary>
            <param name="iDeviceName">Name of the device</param>
        </member>
        <member name="M:BuddyAPI.Structure.Micro.IsRecordingMicro(System.String)">
            <summary>
            Asks if a device is currently recording.
            </summary>
            <param name="iDeviceName">Name of the device</param>
        </member>
        <member name="M:BuddyAPI.Structure.Micro.GetPositionMicro(System.String)">
            <summary>
            Get the position in samples of the recording.
            </summary>
            <param name="iDeviceName">Name of the device</param>        
        </member>
        <member name="M:BuddyAPI.Structure.Micro.GetDeviceCapsMicro(System.String)">
            <summary>
            Get the frequency capabilities of a device.
            Returns min and max frequency that the device supports.
            </summary>
            <param name="iDeviceName">Name of the device</param>
        </member>
        <member name="T:BuddyAPI.Structure.CliffSensor">
            <summary>
            Cliff sensor structure. Represents a unique sensor at a specific position.
            </summary>
        </member>
        <member name="P:BuddyAPI.Structure.CliffSensor.Distance">
            <summary>
            Returns the distance detected by the sensor, in meters. 
            </summary>
        </member>
        <member name="P:BuddyAPI.Structure.CliffSensor.IsCliff">
            <summary>
            Returns True if a cliff is detected by the sensor.
            </summary>
        </member>
        <member name="P:BuddyAPI.Structure.CliffSensor.MaxDistance">
            <summary>
            Returns the maximum distance for detection of the cliff sensor, in meters.
            </summary>
        </member>
        <member name="P:BuddyAPI.Structure.CliffSensor.MinDistance">
            <summary>
            Returns the minimum distance for detection of the cliff sensor, in meters.
            </summary>
        </member>
        <member name="T:BuddyAPI.Structure.IRSensor">
            <summary>
            Infrared sensor structure. Represents a unique sensor at a specific position.
            </summary>
        </member>
        <member name="M:BuddyAPI.Structure.IRSensor.#ctor(BuddyAPI.HardwareDivision.AHardware,System.Int32)">
            <summary>
            Instanciate with the hardware and the ID of the sensor for inner connections.
            </summary>
            <remarks>
            For simulated hardware (for simulation), set a SimuHardware
            For real hardware (with a real Buddy robot), set a RealHardware
            </remarks>
            <param name="iHardware">The simulated or real Hardware to link</param>
            <param name="iID">The ID of the sensor</param>
        </member>
        <member name="P:BuddyAPI.Structure.IRSensor.Value">
            <summary>
            Get the value sent by the infrared sensor.
            </summary>
            <remarks>
            The value means the lightning measured by the infrared sensor.
            </remarks>
        </member>
        <member name="P:BuddyAPI.Structure.IRSensor.Distance">
            <summary>
            Get the distance calculated by the sensor.
            </summary>
            <remarks>
            The distance is calculated using the lightning value sent by the sensor.
            See "Value" to get this value.
            </remarks>
        </member>
        <member name="P:BuddyAPI.Structure.IRSensor.MaxDistance">
            <summary>
            Access to the maximum distance which can be measured by the sensor.
            </summary>
        </member>
        <member name="P:BuddyAPI.Structure.IRSensor.MinDistance">
            <summary>
            Access to the minimum distance which can be measured by the sensor.
            </summary>
        </member>
        <member name="P:BuddyAPI.Structure.IRSensor.Angle">
            <summary>
            Access to the angle in degrees of the sensor.
            </summary>
        </member>
        <member name="T:BuddyAPI.Structure.ThermalSensor">
            <summary>
            Thermal sensor structure. No real change from the monobehaviour interface.
            </summary>
        </member>
        <member name="M:BuddyAPI.Structure.ThermalSensor.#ctor(BuddyAPI.HardwareDivision.AHardware)">
            <summary>
            Set the Hardware to the sensor thermic
            </summary>
            <param name="iHardware">Instance of Hardware</param>
        </member>
        <member name="P:BuddyAPI.Structure.ThermalSensor.Matrix">
            <summary>
            Gets the matrix of the thermal sensor. Currently 4x4 resolution.
            </summary>s
        </member>
        <member name="T:BuddyAPI.Structure.USSensor">
            <summary>
            Ultra sound structure. Represents a unique sensor at a specific position.
            </summary>
        </member>
        <member name="M:BuddyAPI.Structure.USSensor.#ctor(BuddyAPI.HardwareDivision.AHardware,System.Int32)">
            <summary>
            Instanciate with the hardware and the ID of the sensor for inner connections.
            </summary>
            <remarks>
            For simulated hardware (for simulation), set a SimuHardware
            For real hardware (with a real Buddy robot), set a RealHardware
            </remarks>
            <param name="iHardware">The simulated or real Hardware to link</param>
            <param name="iID">The ID of the sensor</param>
        </member>
        <member name="P:BuddyAPI.Structure.USSensor.Value">
            <summary>
            Returns The value of the Ultrasound Sensor.
            </summary>
        </member>
        <member name="P:BuddyAPI.Structure.USSensor.Distance">
            <summary>
            Returns the calculated distance value of the Ultrasound Sensor, in meters.
            </summary>
        </member>
        <member name="P:BuddyAPI.Structure.USSensor.MaxDistance">
            <summary>
            Returns to the maximum distance which can be measured by the sensor, in meters.
            </summary>
        </member>
        <member name="P:BuddyAPI.Structure.USSensor.MinDistance">
            <summary>
            Returns the minimum distance which can be measured by the sensor, in meters.
            </summary>
        </member>
        <member name="P:BuddyAPI.Structure.USSensor.Angle">
            <summary>
            Returns the orientation in degrees of the sensor, with respect to the robot.
            </summary>
        </member>
        <member name="T:BuddyAPI.Structure.Speaker">
            <summary>
            Speaker structure. No real change from the monobehaviour interface.
            </summary>
        </member>
        <member name="T:BuddyAPI.Structure.Wheels">
            <summary>
            This Class contains all variables and methods related to control the wheels.
            </summary>
        </member>
        <member name="P:BuddyAPI.Structure.Wheels.LeftWheelAngle">
            <summary>
            Actual angle of left wheel, in degrees.
            </summary>
        </member>
        <member name="P:BuddyAPI.Structure.Wheels.RightWheelAngle">
            <summary>
            Actual angle of right wheel, in degrees.
            </summary>
        </member>
        <member name="P:BuddyAPI.Structure.Wheels.LeftWheelDeltaAngle">
            <summary>
            Rotation of left wheel since the last frame, in degrees.
            </summary>
        </member>
        <member name="P:BuddyAPI.Structure.Wheels.RightWheelDeltaAngle">
            <summary>
            Rotation of right wheel since the last frame, in degrees.
            </summary>
        </member>
        <member name="P:BuddyAPI.Structure.Wheels.LeftWheelAngularVelocity">
            <summary>
            Angular velocity of the left wheel, in degrees per seconds.
            </summary>
        </member>
        <member name="P:BuddyAPI.Structure.Wheels.RightWheelAngularVelocity">
            <summary>
            Angular velocity of the right wheel, in degrees per seconds.
            </summary>
        </member>
        <member name="P:BuddyAPI.Structure.Wheels.Radius">
            <summary>
            Radius of Buddy's wheels in meters.
            </summary>
        </member>
        <member name="P:BuddyAPI.Structure.Wheels.Entrax">
            <summary>
            Buddy's mobile base's entrax : The distance between the center of the left wheel and the center of the right wheel, in meters.
            </summary>
        </member>
        <member name="P:BuddyAPI.Structure.Wheels.MaxSpeed">
            <summary>
            The maximum speed, in degrees per seconds, possible for Buddy's wheels.
            </summary>
        </member>
        <member name="P:BuddyAPI.Structure.Wheels.Speed">
            <summary>
            Current Speed in meters by second.
            </summary>
        </member>
        <member name="M:BuddyAPI.Structure.Wheels.SetWheelsSpeed(System.Single,System.Single,System.Int32)">
            <summary>
            Controls the speed of the wheels, stops after the timeout.
            </summary>
            <param name="iLeft">Desired left wheel speed, in degrees per seconds</param>
            <param name="iRight">Desired right wheel speed, in degrees per seconds</param>
            <param name="iTimeout">Timeout in milliseconds</param>
        </member>
        <member name="M:BuddyAPI.Structure.Wheels.SetWheelsSpeedAtLow(System.Int32)">
            <summary>
            Apply a Low speed to wheels.
            </summary>
            <param name="iTimeout">Optional timeout (in milliseconds)</param>
        </member>
        <member name="M:BuddyAPI.Structure.Wheels.SetWheelsSpeedAtMedium(System.Int32)">
            <summary>
            Apply a medium speed to wheels.
            </summary>
            <param name="iTimeout">Optional timeout (in milliseconds)</param>
        </member>
        <member name="M:BuddyAPI.Structure.Wheels.SetWheelsSpeedAtHigh(System.Int32)">
            <summary>
            Apply a High speed to wheels.
            </summary>
            <param name="iTimeout">Optional timeout (in milliseconds)</param>
        </member>
        <member name="M:BuddyAPI.Structure.Wheels.TurnAbsoluteAngle(System.Single,System.Single,System.Single)">
            <summary>
            Turns until the desired angle is reached in world space (based Buddy's odometry).
            </summary>
            <param name="iAngle">Desired angle in degrees</param>
            <param name="iSpeed">Desired wheels speed in degrees per seconds</param>
            <param name="iTolerance">Tolerance, in degrees, around the final angle where the robot would stop</param>
            <remarks>The absolute target angle defines the robot orientation in world space (relative to the first position when the robot woke up)
            The robot's pose in world space at time = 0 is (x = 0, z = 0, theta = 0).</remarks>
        </member>
        <member name="M:BuddyAPI.Structure.Wheels.TurnAngle(System.Single,System.Single,System.Single)">
            <summary>
            Turns with a target angle (in degrees) from the current orientation.
            </summary>
            <param name="iAngle">Desired angle in degrees</param>
            <param name="iSpeed">Desired wheels speed in degrees per seconds</param>
            <param name="iTolerance">Tolerance, in degrees, around the final angle where the robot would stop</param>
            <remarks>The target angle defines the robot orientation in local space (relative to its actual orientation)</remarks>
        </member>
        <member name="M:BuddyAPI.Structure.Wheels.MoveToAbsolutePosition(UnityEngine.Vector2,System.Single,System.Single)">
            <summary>
            Makes the robot go to a target position in world space (relative to the first position when the robot woke up).
            </summary>
            <param name="iPosition">x and y coordinate in meters</param>
            <param name="iSpeed">Desired wheels speed in degrees per seconds</param>
            <param name="iTolerance">Tolerance, in meters, around the final position where the robot would stop</param>
            <remarks>The absolute target position defines the robot position in world space (relative to the first position when the robot woke up)
            The robot's pose in world space at time = 0 is (x = 0, z = 0, theta = 0).</remarks>
        </member>
        <member name="M:BuddyAPI.Structure.Wheels.MoveToPosition(UnityEngine.Vector2,System.Single,System.Single)">
            <summary>
            Makes the robot go to a desired position relative to the actual position.
            </summary>
            <param name="iPosition">x and y coordinate in meter</param>
            <param name="iSpeed">Desired whees speed in degrees per seconds</param>
            <param name="iTolerance">Tolerance, in meters, around the final position where the robot would stop</param>
            <remarks>The target position defines the robot position in local space (relative to its actual orientation)
            The robot's pose in world space at time = 0 is (x = 0, z = 0, theta = 0).</remarks>
        </member>
        <member name="M:BuddyAPI.Structure.Wheels.MoveDistance(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the speeds of the wheels for a desired distance.
            </summary>
            <param name="iLeft">Left wheel speed in degrees per seconds</param>
            <param name="iRight">Right wheel speed in degrees per seconds</param>
            <param name="iDistance">Distance to reach until the robot stops</param>
            <param name="iTolerance">Tolerance, in meters, around the final position where the robot would stop</param>
        </member>
        <member name="M:BuddyAPI.Structure.Wheels.StopWheels">
            <summary>
            Stops the wheels by setting their speed values to 0f.
            </summary>
        </member>
        <member name="M:BuddyAPI.Structure.Wheels.SetOdometryBelieves(UnityEngine.Vector2,System.Single)">
            <summary>
            Resets the robot's pose to the setted values.
            </summary>
            <param name="iPosition">Position (x,y) in meters</param>
            <param name="iRotation">Orientation theta in degree</param>
            <remarks>Motors is the use of data from motion sensors to estimate change in position over time
            The robot's pose is a 3D vector that contains (X, Y, Theta). (X, Y) being the robot's position in horizontal plane and Theta the orientation of the robot.</remarks>
        </member>
        <member name="M:BuddyAPI.Structure.Wheels.SetOdometryBelieves(UnityEngine.Vector3)">
            <summary>
            Resets the robot's pose to the setted values.
            </summary>
            <param name="iPose">Position (x, y, th) with x and y in meters and th in degrees</param>
            <remarks>Motors is the use of data from motion sensors to estimate change in position over time
            The robot's pose is a 3D vector that contains (X, Y, Theta). (X, Y) being the robot's position in horizontal plane and Theta the orientation of the robot.</remarks>
        </member>
        <member name="M:BuddyAPI.Structure.Wheels.GetRobotPoseBelieves">
            <summary>
            Returns the actual robot's pose estimated using odometry.
            </summary>
            <returns>Robot's pose (X, Y, Tetha), the position (X,Y) in meters and the orientation Theta in degrees</returns>
            <remarks>Motors is the use of data from motion sensors to estimate change in position over time
            The robot's pose is a 3D vector that contains (X, Y, Theta). (X, Y) being the robot's position in horizontal plane and Theta the orientation of the robot.</remarks>
        </member>
        <member name="P:BuddyAPI.Structure.Wheels.WorldOrigin">
            <summary>
            The world space origin used to control the robot, wich is expressed in unity world space.
            </summary>
        </member>
        <member name="P:BuddyAPI.Structure.Wheels.Status">
            <summary>
            Enumeration corresponding to the current mobile base status
            </summary>
        </member>
        <member name="F:BuddyAPI.Simulation.DSimuBattery.mMaxVoltage">
            <summary>Maximum Battery's voltage, in Volt, when the robot is recharged at 100%.</summary>
        </member>
        <member name="F:BuddyAPI.Simulation.DSimuBattery.mMinVoltage">
            <summary>Minimum Battery's voltage, in Volts, it is not possible to use the robot under this value.</summary>
        </member>
        <member name="F:BuddyAPI.Simulation.DSimuBattery.mLowVoltage">
            <summary>Battery's rechage in percentage, under this value it's recommanded to recharge the battery. </summary>
        </member>
        <member name="F:BuddyAPI.Simulation.DSimuBattery.mBatteryVoltage">
            <summary>The actual Battery voltage, in volts.</summary>
        </member>
        <member name="F:BuddyAPI.Simulation.DSimuBattery.mBatteryLevel">
            <summary>Actual Battery's rechage in percentage.</summary>
        </member>
        <member name="F:BuddyAPI.Simulation.DSimuBattery.mBatteryAutonomy">
            <summary>Battry's autonomy, in hours.</summary>
        </member>
        <member name="F:BuddyAPI.Simulation.DSimuBattery.mTimeBattery">
            <summary>Actual time, in seconds.</summary>
        </member>
        <member name="F:BuddyAPI.Simulation.DSimuBattery.mCoefficient">
            <summary>Coefficient of the linear function : Voltage = function(time).</summary>
        </member>
        <member name="F:BuddyAPI.Simulation.DSimuBattery.mConstant">
            <summary>The constant of the linear function : Voltage = function(time).</summary>
        </member>
        <member name="P:BuddyAPI.Simulation.DSimuHinge.SpeedLimit">
            <summary>The maximum speed possible for motor</summary>
        </member>
        <member name="P:BuddyAPI.Simulation.DSimuHinge.MaximumAngle">
            <summary>The maximum angle possible for motor</summary>
        </member>
        <member name="P:BuddyAPI.Simulation.DSimuHinge.MinimumAngle">
            <summary>The minimum angle possible for motor</summary>
        </member>
        <member name="P:BuddyAPI.Simulation.DSimuHinge.CurrentMaxVelocity">
            <summary>The maximum velocity for Buddy's neck.</summary>
        </member>
        <member name="P:BuddyAPI.Simulation.DSimuHinge.CurrentAnglePosition">
            <summary>Current orientation, in degrees, of Buddy's neck.</summary>
        </member>
        <member name="P:BuddyAPI.Simulation.DSimuHinge.DestinationAnglePosition">
            <summary>Orientation, in degrees, of Buddy's neck setted with setPosition.</summary>
        </member>
        <member name="P:BuddyAPI.Simulation.DSimuHinge.Kp">
            <summary>Proportional coefficient for the PID controller.</summary>
        </member>
        <member name="P:BuddyAPI.Simulation.DSimuHinge.Kd">
            <summary>Derivative coefficient for the PID controller.</summary>
        </member>
        <member name="P:BuddyAPI.Simulation.DSimuHinge.Ki">
            <summary>Integral coefficient for the PID controller.</summary>
        </member>
        <member name="P:BuddyAPI.Simulation.DSimuHinge.LastError">
            <summary>Error in position of the last frame.</summary>
            <remarks>This error is the difference between the current orientation and the desired orientation.</remarks>
        </member>
        <member name="P:BuddyAPI.Simulation.DSimuHinge.IntError">
            <summary>The integral of the error</summary>
        </member>
        <member name="F:BuddyAPI.Simulation.DSimuOdometry.mGaussianNoise">
            <summary>Generates Gaussian Noise</summary>
        </member>
        <member name="F:BuddyAPI.Simulation.DSimuOdometry.mWheelsEntrax">
            <summary>Distance between robot wheels', in meters.</summary>
        </member>
        <member name="F:BuddyAPI.Simulation.DSimuOdometry.mPoseX">
            <summary>X coordinate of robot's pose, in meters.</summary>
        </member>
        <member name="F:BuddyAPI.Simulation.DSimuOdometry.mPoseY">
            <summary>Y coordinate of robot's pose, in meters.</summary>
        </member>
        <member name="F:BuddyAPI.Simulation.DSimuOdometry.mPoseTheta">
            <summary>Theta coordinate of robot's pose, in degrees.</summary>
        </member>
        <member name="F:BuddyAPI.Simulation.DSimuOdometry.mOdoRobotPose">
            <summary>The robot's Pose computed from Motors</summary>
            <remarks>
            It is a 3d vector that contains (X, Y, Theta) coordinates.
            With X and Y in meters, and Theta in degrees.
            </remarks>
        </member>
        <member name="P:BuddyAPI.Simulation.DSimuWheels.GaussianNoise">
            <summary>Generate Gaussian Noise</summary>
        </member>
        <member name="P:BuddyAPI.Simulation.DSimuWheels.WheelsMaxSpeed">
            <summary>Maximum speed allowed for wheels, in degrees per seconds.</summary>
        </member>
        <member name="P:BuddyAPI.Simulation.DSimuWheels.WheelSpeed">
            <summary>Vector that contrains left (x) and right (y) wheel speed, in degrees per seconds.</summary>
        </member>
        <member name="P:BuddyAPI.Simulation.DSimuWheels.Kp">
            <summary>Proportional coefficient for the PID speed controller.</summary>
        </member>
        <member name="P:BuddyAPI.Simulation.DSimuWheels.Kd">
            <summary>Derivative coefficient for the PID speed controller.</summary>
        </member>
        <member name="P:BuddyAPI.Simulation.DSimuWheels.Ki">
            <summary>Integral coefficient for the PID speed controller.</summary>
        </member>
        <member name="P:BuddyAPI.Simulation.DSimuWheels.Proportional">
            <summary>Proportional coefficient of the PID motion controller.</summary>
            <remarks>Motors controller, that means for the functions  ControlRotation(),  
            ControlPosition(), and ControlDistance().</remarks>
        </member>
        <member name="P:BuddyAPI.Simulation.DSimuWheels.Integral">
            <summary>Integral coefficient of the PID motion controller.</summary>
            <remarks>Motors controller, that means for the functions  ControlRotation(),  
            ControlPosition(), and ControlDistance().</remarks>
        </member>
        <member name="P:BuddyAPI.Simulation.DSimuWheels.Derive">
            <summary>Derivative coefficient of the PID motion controller.</summary>
            <remarks>Motors controller, that means for the functions  ControlRotation(),  
            ControlPosition(), and ControlDistance().</remarks>
        </member>
        <member name="P:BuddyAPI.Simulation.DSimuWheels.LastError">
            <summary>Saved error, of the last frame.</summary>
        </member>
        <member name="P:BuddyAPI.Simulation.DSimuWheels.IntError">
            <summary>The integral of the error.</summary>
        </member>
        <member name="P:BuddyAPI.Simulation.DSimuWheels.Timeout">
            <summary>Time out in milliseconds</summary>
        </member>
        <member name="P:BuddyAPI.Simulation.DSimuWheels.DesiredDistance">
            <summary>Target distance, in meters.</summary>
        </member>
        <member name="P:BuddyAPI.Simulation.DSimuWheels.DesiredAngle">
            <summary>Target angle, in degrees.</summary>
        </member>
        <member name="P:BuddyAPI.Simulation.DSimuWheels.DesiredSpeed">
            <summary>Target speed, in meters per seconds.</summary>
        </member>
        <member name="P:BuddyAPI.Simulation.DSimuWheels.DesiredTolerance">
            <summary>Target tolerance to reach the desired position or angle, 
            it is expressed in degrees or in meters, depending on the called function.</summary>
        </member>
        <member name="P:BuddyAPI.Simulation.DSimuWheels.DesiredRobotPose">
            <summary>Target robot's Pose.
            It is a 3d vectors that contains : (X, Y, Theta) coordinates.
            With X and Y expressed in meters, and Theta in degrees.</summary>
        </member>
        <member name="P:BuddyAPI.Simulation.DSimuWheels.ControlAngle">
            <summary>This allows ControlRotation().</summary>
        </member>
        <member name="P:BuddyAPI.Simulation.DSimuWheels.ControlYXPosition">
            <summary>This allows ControlPosition().</summary>
        </member>
        <member name="P:BuddyAPI.Simulation.DSimuWheels.ControlDistance">
            <summary>This allows ControlPosition().</summary>
        </member>
        <member name="P:BuddyAPI.Simulation.DSimuWheels.OdoRobotPose">
            <summary>The robot's Pose computed from Motors
            It is a 3d vectors that contains : (X, Y, Theta) coordinates.
            With X and Y expressed in meters, and Theta in degrees.</summary>
        </member>
        <member name="P:BuddyAPI.Simulation.DSimuWheels.Distance">
            <summary>Actual crossed distance, in meters.</summary>
        </member>
        <member name="P:BuddyAPI.Simulation.DSimuWheels.PureRotation">
            <summary>It is True if the robot is rotating without moving forward or backward.</summary>
        </member>
        <member name="P:BuddyAPI.Simulation.DSimuWheels.Position">
            <summary>(X,Y) robot coordinates in world space, in meters. </summary>
        </member>
        <member name="M:BuddyAPI.Simulation.SimuBattery.CompleteRecharge">
            <summary>It recharge the battery at the maximum voltage and power on</summary>
            <remarks>Only in simulation</remarks>
        </member>
        <member name="M:BuddyAPI.Simulation.SimuHingeMotor.CalculateErrorNo">
            <summary>
            Calculates errors for the PID position controller of head NO axis.
            </summary>
        </member>
        <member name="M:BuddyAPI.Simulation.SimuHingeMotor.CalculateErrorYes">
            <summary>
            Calculates errors for the PID position controller of head YES axis.
            </summary>
        </member>
        <member name="M:BuddyAPI.Simulation.SimuHingeMotor.ControlHeadAxis">
            <summary>
             PID position controller for both head axises.
            </summary>
        </member>
        <member name="P:BuddyAPI.Simulation.SimuInputDepthCam.EnableCamera">
            <summary>
            Methode to Active the DepthCam and traitement of picture
            </summary>
            <returns>true</returns>
        </member>
        <member name="M:BuddyAPI.Simulation.SimuInputDepthCam.OnRenderImage(UnityEngine.RenderTexture,UnityEngine.RenderTexture)">
            <summary>
            Simulate the 3D camera output with a shader.
            </summary>
            <param name="iSource"></param>
            <param name="iDestination"></param>
        </member>
        <member name="M:BuddyAPI.Simulation.SimuInputRGBCam.OnRenderImage(UnityEngine.RenderTexture,UnityEngine.RenderTexture)">
            <summary>
            Simulate the RGB camera output.
            </summary>
        </member>
        <member name="M:BuddyAPI.Simulation.SimuOdometry.UpdateBuddyPose">
            <summary>
            Updates Buddy Pose from robot transform of unity.
            </summary>
        </member>
        <member name="M:BuddyAPI.Simulation.SimuOdometry.CalculateDisplacement">
            <summary>
            Computes the displacement of right and left wheels using current and last wheels center position.
            </summary>
        </member>
        <member name="M:BuddyAPI.Simulation.SimuOdometry.PerformOdometry">
            <summary>
            Performs odometry calculated from wheels rotation.
            This method updates mOdoRobotPose variable that contains robot Pose.
            </summary>
        </member>
        <member name="M:BuddyAPI.Simulation.SimuOdometry.ComputeOdometry">
            <summary>
            Computes odometry from wheel's center displacement on which a Gaussian Noise is added.
            This method updates mOdoRobotPose variable that contains robot Pose. 
            </summary>
        </member>
        <member name="F:BuddyAPI.Simulation.SimuCliffSensor.period">
            <summary>
            Periode of sensors refresh.
            </summary>
        </member>
        <member name="F:BuddyAPI.Simulation.SimuCliffSensor.mValue">
            <summary>
            Stocks the last value of the cliff sensor. 
            </summary>
        </member>
        <member name="F:BuddyAPI.Simulation.SimuCliffSensor.mBoolValue">
            <summary>
            Stocks the last value of the cliff sensor. 
            </summary>
        </member>
        <member name="M:BuddyAPI.Simulation.SimuCliffSensor.DrawGizmosCliff">
            <summary>
            Draw Gizmos on Unity Scene
            </summary>
        </member>
        <member name="F:BuddyAPI.Simulation.SimuIRSensor.period">
            <summary>
            Periode of sensors refresh.
            </summary>
        </member>
        <member name="F:BuddyAPI.Simulation.SimuIRSensor.mValue">
            <summary>
            Stores the last value of the IRSensors sensor. 
            </summary>
        </member>
        <member name="F:BuddyAPI.Simulation.SimuIRSensor.mDistance">
            <summary>
            Stores the last distance of the IRSensors sensor. 
            </summary>
        </member>
        <member name="F:BuddyAPI.Simulation.SimuIRSensor.mAngle">
            <summary>
            Stores the orientation of the IRSensors sensor with respect to the robot, in degrees.
            </summary>
        </member>
        <member name="M:BuddyAPI.Simulation.SimuIRSensor.Update">
            <summary>
            Update Function of Unity3D Call once per frame
            </summary>
        </member>
        <member name="M:BuddyAPI.Simulation.SimuIRSensor.GetValueIR">
            <summary>
            Updates the value in meters and byte from IRSensors sensor.
            </summary>
        </member>
        <member name="M:BuddyAPI.Simulation.SimuIRSensor.DrawGizmosIR">
            <summary>
            Draw Gizmos on Unity scene.
            </summary>
        </member>
        <member name="F:BuddyAPI.Simulation.SimuUSSensor.period">
            <summary>
            Periode of of sensors refresh.
            </summary>
        </member>
        <member name="F:BuddyAPI.Simulation.SimuUSSensor.mValue">
            <summary>
            Stores the last value of the USSensors sensor 
            </summary>
        </member>
        <member name="F:BuddyAPI.Simulation.SimuUSSensor.mDistance">
            <summary>
            Stores the last distance of the USSensors sensor 
            </summary>
        </member>
        <member name="F:BuddyAPI.Simulation.SimuUSSensor.mAngle">
            <summary>
            Stores the orientation of the USSensors sensor with respect to the robot, in degrees.
            </summary>
        </member>
        <member name="M:BuddyAPI.Simulation.SimuUSSensor.GetValue">
            <summary>
            Updates The value of the selected Ultra sound Sensor.
            </summary>
        </member>
        <member name="M:BuddyAPI.Simulation.SimuUSSensor.DrawGizmosUS">
            <summary>
            Draw Gizmos on Unity scene
            </summary>
        </member>
        <member name="M:BuddyAPI.Simulation.SimuWheels.CalculateError">
            <summary>
            Calculates Errors for PID
            </summary>
        </member>
        <member name="M:BuddyAPI.Simulation.SimuWheels.StopWheels">
            <summary>
            Stops robot by setting wheels' speed to zero
            </summary>
        </member>
        <member name="M:BuddyAPI.Simulation.SimuWheels.ControlDistance">
            <summary>
            Distance controller for robot functions' (moveDistance)
            </summary>
        </member>
        <member name="M:BuddyAPI.Simulation.SimuWheels.ControlSpeedPID">
            <summary>
            Speed controller for robot wheels'
            A PID controller
            </summary>
        </member>
        <member name="M:BuddyAPI.Simulation.SimuWheels.SetWheelSpeed(System.Single,System.Single,System.Int32)">
            <summary>
            Speed controller for robot wheels'
            A simple P controller
            </summary>
            <param name="iLeft">Desired speed for the left wheel</param>
            <param name="iRight">Desired speed for the right wheel</param>
            <param name="iTimeout">The Timeout</param>
        </member>
        <member name="M:BuddyAPI.Simulation.SimuWheels.ControlPosition">
            <summary>
            Position control for the body of buddy
            This is a PID controller
            </summary>
        </member>
        <member name="M:BuddyAPI.Simulation.SimuWheels.ControlRotation">
            <summary>
            Orientation control for the body  of buddy
            This is a PID controller
            </summary>
        </member>
        <member name="M:BuddyAPI.Simulation.SimuWheels.ControlFreeWheel">
            <summary>
            Allows to control the rotation of the free wheel on Y axis (Y axis on unity scene)
            This is allows to limit problems due to wheels sliding
            </summary>
        </member>
        <member name="F:BuddyAPI.SimuSideWheel.mAngleDelta">
            <summary>Delta angle rotation of the wheel, expressed in degrees.</summary>
        </member>
        <member name="F:BuddyAPI.SimuSideWheel.mMotorTorque">
            <summary>Torque applied to the wheel's motor, in Newton meters.</summary>
        </member>
        <member name="F:BuddyAPI.SimuSideWheel.mWheelAngularVelocity">
            <summary>Angular Velociy of the wheel, expressed in degrees per seconds.</summary>
        </member>
        <member name="P:BuddyAPI.SimuSideWheel.WheelAngle">
            <summary>Rotation of the wheel from last frame, expressed in degrees.</summary>
        </member>
        <member name="P:BuddyAPI.SimuSideWheel.WheelRadius">
            <summary>Wheels radius, expressed in meters.</summary>
        </member>
        <member name="P:BuddyAPI.SimuSideWheel.WheelPosition">
            <summary>The wheel's position (X,Y,Z), in world space.</summary>
        </member>
        <member name="P:BuddyAPI.SimuSideWheel.WheelSidewayFriction">
            <summary></summary>
        </member>
        <member name="T:CliffPosition">
            <summary>
            Position of a cliff sensor, use for internal purpose. You should never use it.
            </summary>
        </member>
        <member name="F:CliffPosition.FRONT_LEFT">
            <summary>
            Front left position
            </summary>
        </member>
        <member name="F:CliffPosition.FRONT_RIGHT">
            <summary>
            Front right position
            </summary>
        </member>
        <member name="F:CliffPosition.BACK_RIGHT">
            <summary>
            Back right position
            </summary>
        </member>
        <member name="F:CliffPosition.BACK_LEFT">
            <summary>
            Back left position
            </summary>
        </member>
        <member name="T:LEDColor">
            <summary>
            Color enumeration corresponding to the mood of the robot.
            Can be easily combine with de Face.SetMood(FaceMood) component.
            </summary>
        </member>
        <member name="F:LEDColor.RED_ANGRY">
            <summary>
            Will set the LED in red
            </summary>
        </member>
        <member name="F:LEDColor.PURPLE_GRUMPY">
            <summary>
            Will set the LED in soft purple
            </summary>
        </member>
        <member name="F:LEDColor.ORANGE_HAPPY">
            <summary>
            Will set the LED in orange
            </summary>
        </member>
        <member name="F:LEDColor.BLUE_LISTENING">
            <summary>
            Will set the LED in hard blue
            </summary>
        </member>
        <member name="F:LEDColor.BLUE_NEUTRAL">
            <summary>
            Will set the LED in soft blue
            </summary>
        </member>
        <member name="F:LEDColor.PINK_SAD">
            <summary>
            Will set the LED in hard purple
            </summary>
        </member>
        <member name="F:LEDColor.BROWN_SCARY">
            <summary>
            Will set the LED in hard orange
            </summary>
            
        </member>
        <member name="F:LEDColor.YELLOW_SICK">
            <summary>
            Will set the LED in soft green
            </summary>
        </member>
        <member name="F:LEDColor.YELLOW_SURPRISED">
            <summary>
            Will set the LED in hard yellow
            </summary>
        </member>
        <member name="F:LEDColor.GREEN_THINKING">
            <summary>
            Will set the LED in green
            </summary>
        </member>
        <member name="F:LEDColor.GREY_TIRED">
            <summary>
            Will set the LED in grey
            </summary>
        </member>
        <member name="T:DepthMode">
            <summary>
            Mode for the Depthcam component. Can only be used for the real robot
            </summary>
        </member>
        <member name="F:DepthMode.MODE_INVALID">
            <summary>
            Bad mode
            </summary>
        </member>
        <member name="F:DepthMode.MODE_9_5FPS_2000">
            <summary>
            Long distance, use this for mapping
            </summary>
        </member>
        <member name="F:DepthMode.MODE_9_10FPS_1000">
            <summary>
            Long distance, use this for mapping or movement detection
            </summary>
        </member>
        <member name="F:DepthMode.MODE_9_15FPS_700">
            <summary>
            Medium distance, use this for movement detection
            </summary>
        </member>
        <member name="F:DepthMode.MODE_9_25FPS_450">
            <summary>
            Medium distance, use this for movement detection
            </summary>
        </member>
        <member name="F:DepthMode.MODE_5_35FPS_600">
            <summary>
            Short distance, use this for medium interaction purpose
            </summary>
        </member>
        <member name="F:DepthMode.MODE_5_45FPS_500">
            <summary>
            Short distance, use this for close interaction purpose
            </summary>
        </member>
        <member name="T:MouthEvent">
            <summary>
            Mouth events that Buddy face can handle
            </summary>
        </member>
        <member name="F:MouthEvent.SMILE">
            <summary>
            Make the face smiling
            </summary>
        </member>
        <member name="F:MouthEvent.YAWN">
            <summary>
            Make the face yawing
            </summary>
        </member>
        <member name="F:MouthEvent.SCREAM">
            <summary>
            Make the face screaming like a barbarian
            </summary>
        </member>
        <member name="T:EyeEvent">
            <summary>
            Eye event concerning Buddy face
            </summary>
        </member>
        <member name="F:EyeEvent.BLINK_RIGHT">
            <summary>
            Make the face blinking the right eye
            </summary>
        </member>
        <member name="F:EyeEvent.BLINK_LEFT">
            <summary>
            Make the face blinking the left eye
            </summary>
        </member>
        <member name="F:EyeEvent.BLINK_DOUBLE">
            <summary>
            Make the face blinking both eyes
            </summary>
        </member>
        <member name="T:FaceLookAt">
            <summary>
            Facility enum for face LookAt() method
            </summary>
        </member>
        <member name="F:FaceLookAt.CENTER">
            <summary>
            Look at center
            </summary>
        </member>
        <member name="F:FaceLookAt.TOP_LEFT">
            <summary>
            Look at top left
            </summary>
        </member>
        <member name="F:FaceLookAt.TOP_RIGHT">
            <summary>
            Look at top right
            </summary>
        </member>
        <member name="F:FaceLookAt.BOTTOM_RIGHT">
            <summary>
            Look at bottom rigth
            </summary>
        </member>
        <member name="F:FaceLookAt.BOTTOM_LEFT">
            <summary>
            Look at bottom left
            </summary>
        </member>
        <member name="T:MoodType">
            <summary>
            Represents different expressions that Buddy can show
            </summary>
        </member>
        <member name="F:MoodType.NEUTRAL">
            <summary>
            Neutral
            </summary>
        </member>
        <member name="F:MoodType.ANGRY">
            <summary>
            Angry
            </summary>
        </member>
        <member name="F:MoodType.GRUMPY">
            <summary>
            Grumpy
            </summary>
        </member>
        <member name="F:MoodType.HAPPY">
            <summary>
            Happy
            </summary>
        </member>
        <member name="F:MoodType.LISTENING">
            <summary>
            Listening
            </summary>
        </member>
        <member name="F:MoodType.SAD">
            <summary>
            Sad
            </summary>
        </member>
        <member name="F:MoodType.SCARED">
            <summary>
            Scared
            </summary>
        </member>
        <member name="F:MoodType.SICK">
            <summary>
            Sick
            </summary>
        </member>
        <member name="F:MoodType.SURPRISED">
            <summary>
            Surprised
            </summary>
        </member>
        <member name="F:MoodType.THINKING">
            <summary>
            Thinking
            </summary>
        </member>
        <member name="F:MoodType.TIRED">
            <summary>
            Tired
            </summary>
        </member>
        <member name="T:IRPosition">
            <summary>
            Position of an ir sensor, use for internal purpose. You should never use it.
            </summary>
        </member>
        <member name="F:IRPosition.LEFT">
            <summary>
            Left front position
            </summary>
        </member>
        <member name="F:IRPosition.MIDDLE">
            <summary>
            Middle front positon
            </summary>
        </member>
        <member name="F:IRPosition.RIGHT">
            <summary>
            Right front position
            </summary>
        </member>
        <member name="T:Language">
            <summary>
            Language for Speech to text, text to speech and sphinx settings. Only FRA and ENG are currently managed
            </summary>
        </member>
        <member name="F:Language.ENG">
            <summary>
            English language
            </summary>
        </member>
        <member name="F:Language.FRA">
            <summary>
            French language
            </summary>
        </member>
        <member name="F:Language.ITA">
            <summary>
            Italian language
            </summary>
        </member>
        <member name="F:Language.GER">
            <summary>
            German language
            </summary>
        </member>
        <member name="F:Language.SPA">
            <summary>
            Spanish language
            </summary>
        </member>
        <member name="T:RGBCamResolution">
            <summary>
            Resolution (width, height) of the RGB camera in pixels.
            Can be setted with RGBCam.Resolution = RGBCamResolution
            </summary>
        </member>
        <member name="F:RGBCamResolution.W_640_H_480">
            <summary>
            The highest resolution, use this only for photographs
            </summary>
        </member>
        <member name="F:RGBCamResolution.W_320_H_240">
            <summary>
            Medium resolution, can be use for anything
            </summary>
        </member>
        <member name="F:RGBCamResolution.W_176_H_144">
            <summary>
            The lowest resolution. You should mainly use this one. Useful for mapping, recognition, detection...
            </summary>
        </member>
        <member name="T:FunctionCallbackWithString">
            <summary>
            Use this delegate in STT. Called after a voice recognition
            </summary>
            <param name="iMsg">The input voice as a string</param>
        </member>
        <member name="T:FunctionCallback">
            <summary>
            Use this delegate in STT. Called after any interaction this the STT
            </summary>
        </member>
        <member name="T:FunctionVolumeCallback">
            <summary>
            Use this delegate in STT. Called after a volume modification
            </summary>
            <param name="iVolume"></param>
        </member>
        <member name="T:FunctionCallbackWithError">
            <summary>
            Use this delegate in STT. Called after any error during the STT process
            </summary>
            <param name="iError"></param>
        </member>
        <member name="T:STTError">
            <summary>
            Error that can rise during the STT process
            </summary>
        </member>
        <member name="F:STTError.ERROR_NETWORK_TIMEOUT">
            <summary>
            The network has encounter a time out 
            </summary>
        </member>
        <member name="F:STTError.ERROR_NETWORK">
            <summary>
            Are you correcly connected ?
            </summary>
        </member>
        <member name="F:STTError.ERROR_AUDIO">
            <summary>
            Micro error. Another micro may be currently in use ?
            </summary>
        </member>
        <member name="F:STTError.ERROR_SERVER">
            <summary>
            The server does not respond
            </summary>
        </member>
        <member name="F:STTError.ERROR_CLIENT">
            <summary>
            Internal error during sending
            </summary>
        </member>
        <member name="F:STTError.ERROR_SPEECH_TIMEOUT">
            <summary>
            STT has hear nothing
            </summary>
        </member>
        <member name="F:STTError.ERROR_NO_MATCH">
            <summary>
            Unknown phrase, your sentence doesn't has any sence
            </summary>
        </member>
        <member name="F:STTError.ERROR_RECOGNIZER_BUSY">
            <summary>
            Vocal recognition is buzy
            </summary>
        </member>
        <member name="F:STTError.ERROR_INSUFFICIENT_PERMISSIONS">
            <summary>
            Cannot access to micro
            </summary>
        </member>
        <member name="F:STTError.ERROR_REQUEST_AGAIN">
            <summary>
            A request has been asked while another is processing
            </summary>
        </member>
        <member name="T:USPosition">
            <summary>
            Position of an ir sensor, use for internal purpose. You should never use it.
            </summary>
        </member>
        <member name="F:USPosition.LEFT">
            <summary>
            Left front position
            </summary>
        </member>
        <member name="F:USPosition.RIGHT">
            <summary>
            Right front position
            </summary>
        </member>
        <member name="F:USPosition.BACK">
            <summary>
            Middle back position
            </summary>
        </member>
        <member name="T:BuddyTools.IIndexedObject">
            <summary>
            Interface for item indexation.
            </summary>
        </member>
        <member name="T:BuddyTools.Gaussian">
            <summary>
            Box-Muller method to generate gaussian distribuated variable
            </summary>
        </member>
        <member name="M:BuddyTools.Gaussian.RandomGauss">
            <summary>
            Gets a random gaussian value
            </summary>
            <returns>Gaussian value</returns>
        </member>
        <member name="M:BuddyTools.Gaussian.RandomGauss(System.Single,System.Single)">
            <summary>
            Centered random gaussian with a standart derivation
            </summary>
            <param name="iMu">Mean</param>
            <param name="iSigma">Standart derivation</param>
            <returns>The gaussian value</returns>
        </member>
        <member name="M:BuddyTools.Gaussian.RandomGauss(System.Single)">
            <summary>
            Random gaussian with a standart derivation
            </summary>
            <param name="iSigma">Standart derivation</param>
            <returns>The gaussian value</returns>
        </member>
        <member name="T:BuddyTools.Pair`2">
            <summary>
            Create a pair of element.
            </summary>
            <typeparam name="A">Type of the first element</typeparam>
            <typeparam name="B">Type of the second element</typeparam>
        </member>
        <member name="P:BuddyTools.Pair`2.First">
            <summary>
            The first element
            </summary>
        </member>
        <member name="P:BuddyTools.Pair`2.Second">
            <summary>
            The second element
            </summary>
        </member>
        <member name="M:BuddyTools.Pair`2.#ctor(`0,`1)">
            <summary>
            Constructor of the complete pair.
            </summary>
            <param name="iFirst">The first element</param>
            <param name="iSecond">The second element</param>
        </member>
        <member name="T:BuddyTools.PriorityQueue`1">
            <summary>
            C# Implementation of the priority queue
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:BuddyTools.PriorityQueue`1.#ctor">
            <summary>
            Create a new priority queue.
            </summary>
        </member>
        <member name="M:BuddyTools.PriorityQueue`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Create a new priority queue with a specific comparator.
            </summary>
            <param name="iComparer">The element comparator</param>
        </member>
        <member name="M:BuddyTools.PriorityQueue`1.#ctor(System.Collections.Generic.IComparer{`0},System.Int32)">
            <summary>
            Create a new priority queue with a specific comparator and a max size.
            </summary>
            <param name="iComparer">The element comparator</param>
            <param name="iCapacity">The max capacity of the queue</param>
        </member>
        <member name="M:BuddyTools.PriorityQueue`1.SwitchElements(System.Int32,System.Int32)">
            <summary>
            Switch two elements.
            </summary>
            <param name="iFirstIndex">Index of the first element</param>
            <param name="iSecondIndex">Index of the second element</param>
        </member>
        <member name="M:BuddyTools.PriorityQueue`1.OnCompare(System.Int32,System.Int32)">
            <summary>
            Compare two elements.
            </summary>
            <param name="iFirstIndex">Index of the first element</param>
            <param name="iSecondIndex">Index of the second element</param>
            <returns></returns>
        </member>
        <member name="M:BuddyTools.PriorityQueue`1.Remove(`0)">
            <summary>
            Remove an element
            </summary>
            <param name="iItem"></param>
        </member>
        <member name="M:BuddyTools.PriorityQueue`1.Push(`0)">
            <summary>
            Add a new element in the queue.
            </summary>
            <param name="iItem"></param>
            <returns></returns>
        </member>
        <member name="M:BuddyTools.PriorityQueue`1.Pop">
            <summary>
            Return and delete the first element of the queue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BuddyTools.PriorityQueue`1.Update(`0)">
            <summary>
            Update the queue with the specific element.
            </summary>
            <param name="iItem">The element to update</param>
        </member>
        <member name="M:BuddyTools.PriorityQueue`1.Peek">
            <summary>
            Return the first element of the queue without delete it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BuddyTools.PriorityQueue`1.Clear">
            <summary>
            Clear the queue.
            </summary>
        </member>
        <member name="P:BuddyTools.PriorityQueue`1.Count">
            <summary>
            Number of elements in the queue.
            </summary>
        </member>
        <member name="T:BuddyTools.SerializeCSV">
            <summary>
            Serialization tools for CSV format
            </summary>
        </member>
        <member name="M:BuddyTools.SerializeCSV.Save(System.String,System.Object[])">
            <summary>
            Serialize objects inside the specified file.
            </summary>
        </member>
        <member name="M:BuddyTools.SerializeCSV.EraseFile(System.String)">
            <summary>
            Erase the specified file
            </summary>
            <param name="iFileName">File to delete</param>
        </member>
        <member name="M:BuddyTools.SerializeCSV.Load(System.String)">
            <summary>
            Load the list of item from the specified csv file.
            </summary>
            <param name="iFileName">File to load from</param>
            <returns>The list of item. One string array per line.</returns>
        </member>
        <member name="T:BuddyTools.SerializeXML">
            <summary>
            Serialization tools for XML format
            </summary>
        </member>
        <member name="M:BuddyTools.SerializeXML.SerializeObject``1(``0,System.String)">
            <summary>
            Serializes an object.
            </summary>
            <typeparam name="T">Type of the object to serialize</typeparam>
            <param name="iSerializableObject">Object to serialize</param>
            <param name="iFileName">Path to the file</param>
        </member>
        <member name="M:BuddyTools.SerializeXML.DeSerializeObject``1(System.String)">
            <summary>
            Deserializes an xml file into an object list
            </summary>
            <typeparam name="T">Type of the objet to deserialize</typeparam>
            <param name="iFileName">Path to the file</param>
            <returns></returns>
        </member>
        <member name="T:BuddyTools.Transformation">
            <summary>
            
            </summary>
        </member>
        <member name="T:BuddyTools.Tuple`3">
            <summary>
            Tuple of three elements
            </summary>
            <typeparam name="A">Type of the first element</typeparam>
            <typeparam name="B">Type of the second element</typeparam>
            <typeparam name="C">Type of the third element</typeparam>
        </member>
        <member name="P:BuddyTools.Tuple`3.First">
            <summary>
            The first element
            </summary>
        </member>
        <member name="P:BuddyTools.Tuple`3.Second">
            <summary>
            The second element
            </summary>
        </member>
        <member name="P:BuddyTools.Tuple`3.Third">
            <summary>
            The thirst elemnt
            </summary>
        </member>
        <member name="M:BuddyTools.Tuple`3.#ctor(`0,`1,`2)">
            <summary>
            Contructor of the complete tuple
            </summary>
            <param name="iFirst">The first element</param>
            <param name="iSecond">The second element</param>
            <param name="iThird">The third element</param>
        </member>
        <member name="M:BuddyTools.Tuple`3.#ctor">
            <summary>
            Basic contructor
            </summary>
        </member>
        <member name="T:BuddyTools.Utils">
            <summary>
            Common tools, mathematic functions and conversions
            </summary>
        </member>
        <member name="M:BuddyTools.Utils.CollectionToString``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Converts an T element array to a string. Elements are separate with a coma (without space).
            </summary>
            <typeparam name="T">Type of element inside the array</typeparam>
            <param name="iArray">The array</param>
            <returns>the string value of the array</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:BuddyTools.Utils.GetFolderPath(System.String)" -->
        <member name="M:BuddyTools.Utils.StructureToByteArray``1(``0,System.Int32)">
            <summary>
            Converts a structure into bytes array with marshaling.
            </summary>
            <typeparam name="T">Type of the structure</typeparam>
            <param name="iStructure">The structure to convert</param>
            <param name="iLength">The size of the structure. Must be specified for a complex structure</param>
            <returns>The data representation of the structure</returns>
        </member>
        <member name="M:BuddyTools.Utils.FindMostFrequentElement``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Finds the most frequent element in a list.
            </summary>
            <typeparam name="T">Type of elements of the list</typeparam>
            <param name="iCollection">The list</param>
            <returns>A pair containing the element and its occurences ratio (occ / size)</returns>
        </member>
        <member name="M:BuddyTools.Utils.MakeUniquePairs``1(System.Collections.Generic.List{``0})">
            <summary>
            Creates a list of unique pair for an original list of element.
            </summary>
            <typeparam name="T">Type of the elements</typeparam>
            <param name="iOriginalSet">The original list of elements</param>
            <returns>A list of unique pairs</returns>
        </member>
        <member name="M:BuddyTools.Utils.MakeUniquePairsID``1(System.Collections.Generic.List{``0})">
            <summary>
            Creates a list of unique id pair for an original list of element.
            </summary>
            <typeparam name="T">Type of the elements</typeparam>
            <param name="iOriginalSet">The original list of elements</param>
            <returns>A list of unique pairs of element id</returns>
        </member>
        <member name="M:BuddyTools.Utils.CheckIDInTransforms(System.Collections.Generic.List{UnityEngine.Transform},System.Int32)">
            <summary>
            Checks the existence of a specific ID in a List.
            </summary>
            <param name="iTransforms"></param>
            <param name="iID">The ID to check for</param>
            <returns>True if the check is successfull, false otherwise</returns>
        </member>
        <member name="M:BuddyTools.Utils.Interpolate(System.Single,System.Single,System.Single)">
            <summary>
            Makes an interpolation between two values.
            </summary>
            <param name="iX1">First value</param>
            <param name="iX2">Second value</param>
            <param name="iAlpha">Must be between 0 and 1</param>
            <returns>The interpolate value</returns>
        </member>
        <member name="M:BuddyTools.Utils.Interpolate(System.Double,System.Double,System.Double)">
            <summary>
            Makes an interpolation between two values.
            </summary>
            <param name="iX1">First value</param>
            <param name="iX2">Second value</param>
            <param name="iAlpha">Must be between 0 and 1</param>
            <returns>The interpolate value</returns>
        </member>
        <member name="M:BuddyTools.Utils.Gaussian(System.Single,System.Single,System.Single)">
            <summary>
            Computes the gaussian probability based on iMean.
            </summary>
            <param name="iMean">Mean of the gaussian</param>
            <param name="iStd">Standart Derivation of the gaussian</param>
            <param name="iValue">Value to compute</param>
            <returns>The gaussian probability of iValue</returns>
        </member>
        <member name="M:BuddyTools.Utils.Gaussian(System.Double,System.Double,System.Double)">
            <summary>
            Computes the gaussian probability based on iMean.
            </summary>
            <param name="iMean">Mean of the gaussian</param>
            <param name="iStd">Standart Derivation of the gaussian</param>
            <param name="iValue">Value to compute</param>
            <returns>The gaussian probability of iValue</returns>
        </member>
        <member name="M:BuddyTools.Utils.SimpleGaussian(System.Single,System.Single)">
            <summary>
            Computes the continuous simplified gaussian probability based on 0.
            </summary>
            <param name="iStd">Standart Derivation of the gaussian</param>
            <param name="iValue">Value to compute</param>
            <returns>The simplified gausian probability of iValue</returns>
        </member>
        <member name="M:BuddyTools.Utils.SimpleGaussian(System.Double,System.Double)">
            <summary>
            Computes the continuous simplified gaussian probability based on 0.
            </summary>
            <param name="iStd">Standart Derivation of the gaussian</param>
            <param name="iValue">Value to compute</param>
            <returns>The simplified gausian probability of iValue</returns>
        </member>
        <member name="M:BuddyTools.Utils.Uniform(System.Single,System.Single,System.Single)">
            <summary>
            Computes the continuous uniform probability between A and B values.
            </summary>
            <param name="iA">Lower value</param>
            <param name="iB">Upper value</param>
            <param name="iValue">Value to compute</param>
            <returns>The uniform probability of iValue</returns>
        </member>
        <member name="M:BuddyTools.Utils.Uniform(System.Double,System.Double,System.Double)">
            <summary>
            Computes the continuous uniform probability between A and B values.
            </summary>
            <param name="iA">Lower value</param>
            <param name="iB">Upper value</param>
            <param name="iValue">Value to compute</param>
            <returns>The uniform probability of iValue</returns>
        </member>
        <member name="M:BuddyTools.Utils.Hysteresis(System.Single,System.Single)">
            <summary>
            Computes the hysteresis value (delay effect).
            </summary>
            <remarks>
            Hysteresis is the time-based dependence of a system's output on present and past inputs.
            The dependence arises because the history affects the value of an internal state.
            The implemented hysteresis function looks like : (c - 1)^(x - 1) / c^x 
            </remarks>
            <param name="iCoeff">Coefficient parameter of the hysteresis</param>
            <param name="iValue">Input value to be computed</param>
            <returns>The delay value of iValue</returns>
        </member>
        <member name="M:BuddyTools.Utils.Hysteresis(System.Double,System.Double)">
            <summary>
            Computes the hysteresis value (delay effect).
            </summary>
            <remarks>
            Hysteresis is the time-based dependence of a system's output on present and past inputs.
            The dependence arises because the history affects the value of an internal state.
            The implemented hysteresis function looks like : (c - 1)^(x - 1) / c^x 
            </remarks>
            <param name="iCoeff">Coefficient parameter of the hysteresis</param>
            <param name="iValue">Input value to be computed</param>
            <returns>The delay value of iValue</returns>
        </member>
        <member name="M:BuddyTools.Utils.Sigmoide(System.Single,System.Single,System.Single)">
            <summary>
            Computes the sigmoid function centered on iCenter of the iValue.
            </summary>
            <remarks>
            The centered sigmoid function looks like : 1 / (1 + exp(-lambda * x - center))
            </remarks>
            <param name="iLambda">Parameter of the function. Bigger lambda make smoother activation</param>
            <param name="iCenter">The centered value of the function</param>
            <param name="iValue">The input value</param>
            <returns>The Sigmoid value of iValue</returns>
        </member>
        <member name="M:BuddyTools.Utils.Sigmoide(System.Double,System.Double,System.Double)">
            <summary>
            Computes the sigmoid function centered on iCenter of the iValue.
            </summary>
            <remarks>
            The centered sigmoid function looks like : 1 / (1 + exp(-lambda * x - center))
            </remarks>
            <param name="iLambda">Parameter of the function. Bigger lambda make smoother activation</param>
            <param name="iCenter">The centered value of the function</param>
            <param name="iValue">The input value</param>
            <returns>The Sigmoid value of iValue</returns>
        </member>
        <member name="M:BuddyTools.Utils.Angle(OpenCVUnity.Point,OpenCVUnity.Point)">
            <summary>
            Computes the signed angle in degrees (ccw) between the two vectors iv1 and iv2
            </summary>
            <param name="iV1">From vector</param>
            <param name="iV2">To vector</param>
            <returns>The signed angle in degrees</returns>
        </member>
        <member name="M:BuddyTools.Utils.Angle(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Computes the signed angle in degrees (ccw) between the two vectors iv1 and iv2
            </summary>
            <param name="iV1">From vector</param>
            <param name="iV2">To vector</param>
            <returns>The signed angle in degrees</returns>
        </member>
        <member name="M:BuddyTools.Utils.Angle(OpenCVUnity.Point3,OpenCVUnity.Point3)">
            <summary>
            Computes the signed angle in degrees (ccw) between the two vectors iv1 and iv2
            </summary>
            <param name="iV1">From vector</param>
            <param name="iV2">To vector</param>
            <returns>The signed angle in degrees</returns>
        </member>
        <member name="M:BuddyTools.Utils.Angle(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Computes the signed angle in degrees (ccw) between the two vectors iv1 and iv2
            </summary>
            <param name="iV1">From vector</param>
            <param name="iV2">To vector</param>
            <returns>The signed angle in degrees</returns>
        </member>
        <member name="M:BuddyTools.Utils.Angle(OpenCVUnity.Point,OpenCVUnity.Point,OpenCVUnity.Point)">
            <summary>
            Computes the acute angle (in degrees) from 3 positions.
            It compute the angle at P1.
            </summary>
            <param name="iP0">First position</param>
            <param name="iP1">Second position, where the acute angle will be computed</param>
            <param name="iP2">Third position</param>
            <returns>The acute angle at the point iP1 in degrees</returns>
        </member>
        <member name="M:BuddyTools.Utils.Angle(OpenCVUnity.Point3,OpenCVUnity.Point3,OpenCVUnity.Point3)">
            <summary>
            Computes the acute angle (in degrees) from 3 positions.
            It compute the angle at P1.
            </summary>
            <param name="iP0">First position</param>
            <param name="iP1">Second position, where the acute angle will be computed</param>
            <param name="iP2">Third position</param>
            <returns>The acute angle at the point iP1 in degrees</returns>
        </member>
        <member name="M:BuddyTools.Utils.Angle(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Computes the acute angle (in degrees) from 3 positions.
            It compute the angle at P1.
            </summary>
            <param name="iP0">First position</param>
            <param name="iP1">Second position, where the acute angle will be computed</param>
            <param name="iP2">Third position</param>
            <returns>The acute angle at the point iP1 in degrees</returns>
        </member>
        <member name="M:BuddyTools.Utils.Angle(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Computes the acute angle (in degrees) from 3 positions.
            It compute the angle at P1.
            </summary>
            <param name="iP0">First position</param>
            <param name="iP1">Second position, where the acute angle will be computed</param>
            <param name="iP2">Third position</param>
            <returns>The acute angle at the point iP1 in degrees</returns>
        </member>
        <member name="M:BuddyTools.Utils.Angle(OpenCVUnity.Point3[])">
            <summary>
            Computes the acute angle (in degrees) from 3 positions or from 2 vectors.
            It compute the angle at P1.
            </summary>
            <param name="iPositions">Positions</param>
            <returns>The acute angle at the point iPositions[1] in degrees</returns>
        </member>
        <member name="M:BuddyTools.Utils.Angle(UnityEngine.Vector3[])">
            <summary>
            Computes the acute angle (in degrees) from 3 positions or from 2 vectors.
            It compute the angle at P1.
            </summary>
            <param name="iPositions">Positions</param>
            <returns>The acute angle at the point iPositions[1] in degrees</returns>
        </member>
        <member name="M:BuddyTools.Utils.Angle(OpenCVUnity.Point[])">
            <summary>
            Computes the acute angle (in degrees) from 3 positions or from 2 vectors.
            It compute the angle at P1.
            </summary>
            <param name="iPositions">Positions</param>
            <returns>The acute angle at the point iPositions[1] in degrees</returns>
        </member>
        <member name="M:BuddyTools.Utils.Angle(UnityEngine.Vector2[])">
            <summary>
            Computes the acute angle (in degrees) from 3 positions or from 2 vectors.
            It compute the angle at P1.
            </summary>
            <param name="iPositions">Positions</param>
            <returns>The acute angle at the point iPositions[1] in degrees</returns>
        </member>
        <member name="M:BuddyTools.Utils.ThresholdedValue(System.Single,System.Single,System.Single)">
            <summary>
            Makes an lower and upper Threshold on the iValue. 
            </summary>
            <param name="iInf">The lower thresold</param>
            <param name="iSup">The upper thresold</param>
            <param name="iValue">The value to be Thresholded</param>
            <returns></returns>
        </member>
        <member name="M:BuddyTools.Utils.ThresholdedValue(System.Single,System.Single)">
            <summary>
            Makes an lower Threshold on the iValue. 
            </summary>
            <param name="iInf">The lower thresold</param>
            <param name="iValue">The value to be Thresholded</param>
            <returns>The Thresholded value</returns>
        </member>
        <member name="M:BuddyTools.Utils.ThresholdedValue(System.Single)">
            <summary>
            Computes the Rectified Linear Unit (ReLU) of iValue.
            </summary>
            <remarks>
            Quite similar to ln(1 + exp(x)) but faster to compute.
            </remarks>
            <param name="iValue"></param>
            <returns>The Thresholded value</returns>
        </member>
        <member name="M:BuddyTools.Utils.ThresholdedValue(System.Double,System.Double,System.Double)">
            <summary>
            Makes an lower and upper Threshold on the iValue. 
            </summary>
            <param name="iInf">The lower thresold</param>
            <param name="iSup">The upper thresold</param>
            <param name="iValue">The value to be Thresholded</param>
            <returns></returns>
        </member>
        <member name="M:BuddyTools.Utils.ThresholdedValue(System.Double,System.Double)">
            <summary>
            Makes an lower Threshold on the iValue. 
            </summary>
            <param name="iInf">The lower thresold</param>
            <param name="iValue">The value to be Thresholded</param>
            <returns>The Thresholded value</returns>
        </member>
        <member name="M:BuddyTools.Utils.ThresholdedValue(System.Double)">
            <summary>
            Computes the Rectified Linear Unit (ReLU) of iValue.
            </summary>
            <remarks>
            Quite similar to ln(1 + exp(x)) but faster to compute.
            </remarks>
            <param name="iValue"></param>
            <returns>The Thresholded value</returns>
        </member>
        <member name="M:BuddyTools.Utils.RadiusFromTrajectory(UnityEngine.Vector3[])">
            <summary>
            Computes the radius of the circumscribes circle from an array of 3 positions.
            </summary>
            <param name="iPositions">Array of three points on the circle</param>
            <returns>The radius of the circle</returns>
        </member>
        <member name="M:BuddyTools.Utils.RadiusFromTrajectory(UnityEngine.Vector2[])">
            <summary>
            Computes the radius of the circumscribes circle from an array of 3 positions.
            </summary>
            <param name="iPositions">Array of three points on the circle</param>
            <returns>The radius of the circle</returns>
        </member>
        <member name="M:BuddyTools.Utils.RadiusFromTrajectory(OpenCVUnity.Point[])">
            <summary>
            Computes the radius of the circumscribes circle from an array of 3 positions.
            </summary>
            <param name="iPositions">Array of three points on the circle</param>
            <returns>The radius of the circle</returns>
        </member>
        <member name="M:BuddyTools.Utils.RadiusFromTrajectory(OpenCVUnity.Point3[])">
            <summary>
            Computes the radius of the circumscribes circle from an array of 3 positions.
            </summary>
            <param name="iPositions">Array of three points on the circle</param>
            <returns>The radius of the circle</returns>
        </member>
        <member name="M:BuddyTools.Utils.CartesianToPolar2D(System.Single[])">
            <summary>
            Converts X and X from cartesian coordinates into polar coordinates.
            </summary>
            <param name="iCoordinates">Cartesian X Y values of the coordinate</param>
            <returns>Polar coordinate (Rau, Theta)</returns>
        </member>
        <member name="M:BuddyTools.Utils.CartesianToPolar2D(System.Double[])">
            <summary>
            Converts X and X from cartesian coordinates into polar coordinates.
            </summary>
            <param name="iCoordinates">Cartesian X Y values of the coordinate</param>
            <returns>Polar coordinate (Rau, Theta)</returns>
        </member>
        <member name="M:BuddyTools.Utils.CartesianToPolar2D(System.Single,System.Single)">
            <summary>
            Converts X and X from cartesian coordinates into polar coordinates.
            </summary>
            <param name="iX">X value of the coordinate</param>
            <param name="iY">Y value of the coordinate</param>
            <returns>Polar coordinate (Rau, Theta)</returns>
        </member>
        <member name="M:BuddyTools.Utils.CartesianToPolar2D(System.Double,System.Double)">
            <summary>
            Converts X and X from cartesian coordinates into polar coordinates.
            </summary>
            <param name="iX">X value of the coordinate</param>
            <param name="iY">Y value of the coordinate</param>
            <returns>Polar coordinate (Rau, Theta)</returns>
        </member>
        <member name="M:BuddyTools.Utils.PolarToCartesian2D(System.Single[])">
            <summary>
            Converts Rau and Theta from polar coordinates into 2D cartesian coordinates.
            </summary>
            <param name="iCoordinates">Rau and Theta values of the coordinate, i.e : the radius 
            and the angle of the coordinate</param>
            <returns>Cartesian coordinate (x, y)</returns>
        </member>
        <member name="M:BuddyTools.Utils.PolarToCartesian2D(System.Double[])">
            <summary>
            Converts Rau and Theta from polar coordinates into 2D cartesian coordinates.
            </summary>
            <param name="iCoordinates">Rau and Theta values of the coordinate, i.e : the radius 
            and the angle of the coordinate</param>
            <returns>Cartesian coordinate (x, y)</returns>
        </member>
        <member name="M:BuddyTools.Utils.PolarToCartesian2D(System.Single,System.Single)">
            <summary>
            Converts Rau and Theta from polar coordinates into 2D cartesian coordinates.
            </summary>
            <param name="iRau">Rau value of the coordinate, i.e : the radius of the coordinate</param>
            <param name="iTheta">Theta value of the coordinate, i.e : the angle of the coordinate</param>
            <returns>Cartesian coordinate (x, y)</returns>
        </member>
        <member name="M:BuddyTools.Utils.PolarToCartesian2D(System.Double,System.Double)">
            <summary>
            Converts Rau and Theta from polar coordinates into 2D cartesian coordinates.
            </summary>
            <param name="iRau">Rau value of the coordinate, i.e : the radius of the coordinate</param>
            <param name="iTheta">Theta value of the coordinate, i.e : the angle of the coordinate</param>
            <returns>Cartesian coordinate (x, y)</returns>
        </member>
        <member name="M:BuddyTools.Utils.RadToDegrees(System.Single)">
            <summary>
            Converts the input radian value into degrees value.
            </summary>
            <param name="iRadValue">The radian value</param>
            <returns>The degree value</returns>
        </member>
        <member name="M:BuddyTools.Utils.RadToDegrees(System.Double)">
            <summary>
            Converts the input radian value into degrees value.
            </summary>
            <param name="iRadValue">The radian value</param>
            <returns>The degree value</returns>
        </member>
        <member name="M:BuddyTools.Utils.DegreesToRad(System.Single)">
            <summary>
            Converts the input degrees value into radian value.
            </summary>
            <param name="iDegreesValue">The degree value</param>
            <returns>The radian value</returns>
        </member>
        <member name="M:BuddyTools.Utils.DegreesToRad(System.Double)">
            <summary>
            Converts the input degrees value into radian value.
            </summary>
            <param name="iDegreesValue">The degree value</param>
            <returns>The radian value</returns>
        </member>
        <member name="M:BuddyTools.Utils.Texture2DToMat(UnityEngine.Texture2D,System.Int32)">
            <summary>
            Convert the input Unity texture 2D into a OpenCVUnity Mat.
            </summary>
            <param name="iTexture2D">The texture to convert</param>
            <param name="iType">The type of the output mat</param>
            <returns>The Mat of the texture 2D</returns>
        </member>
        <member name="M:BuddyTools.Utils.GetMatFromFile(System.String,System.Int32)">
            <summary>
            Gets a Mat from a specific file (absolute path).
            Works with JPG and PNG.
            </summary>
            <param name="iFilename">The name of the file to convert</param>
            <param name="iType">The type of the output Mat</param>
            <returns>Mat of the file</returns>
        </member>
        <member name="M:BuddyTools.Utils.GetTextureFromFile(System.String)">
            <summary>
            Gets a Texture 2D from a specific file (absolute path).
            Works with JPG and PNG
            </summary>
            <param name="iFilename">The name of the file to convert</param>
            <returns>Texture 2D of the file</returns>
        </member>
        <member name="M:BuddyTools.Utils.PathToTessData">
            <summary>
            WORK IN PROGRESS : Only works on Windows platform.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BuddyTools.Utils.MatToColor32(OpenCVUnity.Mat,System.Byte[],UnityEngine.Color32[])">
            <summary>
            Gets an array of Color32 from a OpenCVUnity Mat
            </summary>
            <param name="iMat">The original mat</param>
            <param name="iBuff">The data buffer of the mat</param>
            <param name="iData32">The output color32 array</param>
        </member>
        <member name="M:BuddyTools.Utils.MatToTexture2D(OpenCVUnity.Mat)">
            <summary>
            Converts an OpenCVUnity Mat into an Unity texture 2D.
            Careful, creates a texture 2D at each call.
            </summary>
            <param name="iMat">The mat to convert</param>
            <returns>The texture 2D of the mat</returns>
        </member>
        <member name="M:BuddyTools.Utils.MatToColor32(OpenCVUnity.Mat)">
            <summary>
            Converts an OpenCVUnity Mat into an array of Color32.
            Careful, creates a texture 2D at each call.
            </summary>
            <param name="iMat">The mat to convert</param>
            <returns>The Color32 array of the mat</returns>
        </member>
        <member name="M:BuddyTools.Utils.MatToTexture2D(OpenCVUnity.Mat,UnityEngine.Texture2D,UnityEngine.Color32[])">
            <summary>
            Converts an OpenCVUnity Mat into an Unity texture 2D.
            </summary>
            <param name="iMat">The mat to convert</param>
            <param name="iTexture2D">The output texture2D</param>
            <param name="iBufferColors">The colors32 array of the texture</param>
        </member>
        <member name="M:BuddyTools.Utils.Texture2DToMat(UnityEngine.Texture2D,OpenCVUnity.Mat)">
            <summary>
            Converts an Unity Texture2D into an OpenCVUnity Mat.
            </summary>
            <param name="iTexture2D">The texture 2D to convert</param>
            <param name="iMat">The output OpenCVUnity Mat</param>
        </member>
        <member name="M:BuddyTools.Utils.WebCamTextureToMat(UnityEngine.WebCamTexture,OpenCVUnity.Mat,UnityEngine.Color32[])">
            <summary>
            Converts an Unity WebcamTexture into an OpenCVUnity Mat.
            </summary>
            <param name="iWebCamTexture">The webcamtexture to convert</param>
            <param name="iMat">The output OpenCVUnity Mat</param>
            <param name="iBufferColors">The color32 array of the input texture2D</param>
        </member>
        <member name="M:BuddyTools.Utils.RotateMat(OpenCVUnity.Mat,OpenCVUnity.Mat,System.Double,OpenCVUnity.Scalar)">
            <summary>
            Makes a rotation of iSrc to iDst of a iAngle.
            </summary>
            <param name="iSrc">Input mat</param>
            <param name="iDst">Output mat</param>
            <param name="iAngle">Angle in degrees</param>
            <param name="iBackgroundColor">Background color</param>
        </member>
        <member name="M:BuddyTools.Utils.SanityCheck(OpenCVUnity.Mat)">
            <summary>
            Checks inside the first channel of each pixel of a matrix 
            for unwanted value (infinity and NaN)
            </summary>
            <param name="iMat">The matrix to check in</param>
            <returns>False if there is a bad value</returns>
        </member>
        <member name="M:BuddyTools.Utils.DrawCustomRect(OpenCVUnity.Mat,OpenCVUnity.Rect,System.String,OpenCVUnity.Scalar)">
            <summary>
            Draw a fancy rect in the specified image.
            </summary>
            <param name="iImage">The image to draw in</param>
            <param name="iRect">The rect (points) to draw</param>
            <param name="iText">A no-mandatory text to draw above the rect</param>
            <param name="iColor">Color of the rect and text</param>
        </member>
        <member name="M:BuddyTools.Utils.Center(OpenCVUnity.Rect)">
            <summary>
            Returns a new point corresponding to the centroid of the rect.
            </summary>
            <param name="iRect">The rect</param>
            <returns>The centroid</returns>
        </member>
        <member name="M:BuddyTools.Utils.Center(OpenCVUnity.Point,OpenCVUnity.Point)">
            <summary>
            Returns a new point corresponding to the centroid of the rect.
            </summary>
            <param name="iFirstPt">First point</param>
            <param name="iSecondPt">Second point</param>
            <returns>The centroid</returns>
        </member>
        <member name="M:BuddyTools.Utils.Center(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Returns a new point corresponding to the centroid of the rect.
            </summary>
            <param name="iFirstPt">First point</param>
            <param name="iSecondPt">Second point</param>
        </member>
        <member name="M:BuddyTools.Utils.Distance(OpenCVUnity.Point,OpenCVUnity.Point)">
            <summary>
            Computes the euclidian distance between two points.
            </summary>
            <param name="iPointA">The first point</param>
            <param name="iPointB">The second point</param>
            <returns>The euclian distance between the first and the second point</returns>
        </member>
        <member name="M:BuddyTools.Utils.Distance(OpenCVUnity.Point3,OpenCVUnity.Point3)">
            <summary>
            Computes the euclidian distance between two points.
            </summary>
            <param name="iPointA">The first point</param>
            <param name="iPointB">The second point</param>
            <returns>The euclian distance between the first and the second point</returns>
        </member>
        <member name="M:BuddyTools.Utils.Distance(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Computes the euclidian distance between two points.
            </summary>
            <param name="iPointA">The first point</param>
            <param name="iPointB">The second point</param>
            <returns>The euclian distance between the first and the second point</returns>
        </member>
        <member name="M:BuddyTools.Utils.Distance(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Computes the euclidian distance between two points.
            </summary>
            <param name="iPointA">The first point</param>
            <param name="iPointB">The second point</param>
            <returns>The euclian distance between the first and the second point</returns>
        </member>
        <member name="M:BuddyTools.Utils.TriangleArea(System.Single,System.Single,System.Single)">
            <summary>
            Computes triangle area with Heron formula.
            </summary>
            <param name="iA">First side length</param>
            <param name="iB">Second side length</param>
            <param name="iC">Third side length</param>
            <returns>The area</returns>
        </member>
        <member name="M:BuddyTools.Utils.TriangleArea(System.Double,System.Double,System.Double)">
            <summary>
            Computes triangle area with Heron formula.
            </summary>
            <param name="iA">First side length</param>
            <param name="iB">Second side length</param>
            <param name="iC">Third side length</param>
            <returns>The area</returns>
        </member>
        <member name="M:BuddyTools.Utils.CounterClockWise(OpenCVUnity.Point,OpenCVUnity.Point,OpenCVUnity.Point)">
            <summary>
            Check for counter clockwise style from points
            </summary>
            <param name="iA">First point</param>
            <param name="iB">Second point</param>
            <param name="iC">Third point</param>
        </member>
        <member name="M:BuddyTools.Utils.CounterClockWise(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Check for counter clockwise style from points
            </summary>
            <param name="iA">First point</param>
            <param name="iB">Second point</param>
            <param name="iC">Third point</param>
        </member>
        <member name="M:BuddyTools.Utils.IsIntersect(OpenCVUnity.Point,OpenCVUnity.Point,OpenCVUnity.Point,OpenCVUnity.Point)">
            <summary>
            Checks if two lines intersect.
            </summary>
            <param name="iA">Point of the first line</param>
            <param name="iB">Point of the first line</param>
            <param name="iC">Point of the second line</param>
            <param name="iD">Point of the second line</param>
            <returns>True if there is an intersection</returns>
        </member>
        <member name="M:BuddyTools.Utils.IsIntersect(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Checks if two lines intersect.
            </summary>
            <param name="iA">Point of the first line</param>
            <param name="iB">Point of the first line</param>
            <param name="iC">Point of the second line</param>
            <param name="iD">Point of the second line</param>
            <returns>True if there is an intersection</returns>
        </member>
        <member name="M:BuddyTools.Utils.Intersection(OpenCVUnity.Point,OpenCVUnity.Point,OpenCVUnity.Point,OpenCVUnity.Point)">
            <summary>
            Returns the intersection point between two lines
            </summary>
            <param name="iA">Point of the first line</param>
            <param name="iB">Point of the first line</param>
            <param name="iC">Point of the second line</param>
            <param name="iD">Point of the second line</param>
            <returns>The intersection point</returns>
        </member>
        <member name="M:BuddyTools.Utils.Intersection(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Returns the intersection point between two lines
            </summary>
            <param name="iA">Point of the first line</param>
            <param name="iB">Point of the first line</param>
            <param name="iC">Point of the second line</param>
            <param name="iD">Point of the second line</param>
            <returns>The intersection point</returns>
        </member>
        <member name="M:BuddyTools.Utils.Projection(OpenCVUnity.Point,OpenCVUnity.Point,OpenCVUnity.Point)">
            <summary>
            Returns the projection of iPoint over the line defined by iA and iB
            </summary>
            <param name="iPoint">The point</param>
            <param name="iA">Point of the line</param>
            <param name="iB">Point of the line</param>
            <returns>The projection</returns>
        </member>
        <member name="M:BuddyTools.Utils.Projection(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Returns the projection of iPoint over the line defined by iA and iB
            </summary>
            <param name="iPoint">The point</param>
            <param name="iA">Point of the line</param>
            <param name="iB">Point of the line</param>
            <returns>The projection</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:BuddyTools.Utils.CloseTo(System.Single,System.Single,System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:BuddyTools.Utils.CloseTo(System.Double,System.Double,System.Double)" -->
        <member name="M:BuddyTools.Utils.GetStreamingAssetFilePath(System.String)">
            <summary>
            Gets the absolute path of the file (must be in StreamingAssets).
            </summary>
            <param name="iFilename">The name of the file</param>
            <returns>The absolute path of the file</returns>
        </member>
    </members>
</doc>
