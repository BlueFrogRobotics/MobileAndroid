<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OS</name>
    </assembly>
    <members>
        <member name="T:BuddyOS.Mood">
            <summary>
            Mood element of the robot. It is an helper component combining Face, LED and moving commands.
            </summary>
        </member>
        <member name="M:BuddyOS.Mood.Set(MoodType,System.Boolean,System.Collections.Generic.List{BuddyOS.Command.ACommand})">
            <summary>
            Ask the face to switch to the specified mood.
            </summary>
            <param name="iMood">The name of the mood to switch to</param>
            <param name="iMove">Specify if the robot must move according to the wanted mood</param>
            <param name="iScheduledMoveCommands">Moving commands to execute, if iMove is true, default move commands will be esxecuted</param>
        </member>
        <member name="T:BuddyOS.ITrackable">
            <summary>
            Make the component Error-trackable
            </summary>
        </member>
        <member name="P:BuddyOS.ITrackable.Error">
            <summary>
            Error code if there is any error on the component
            </summary>
        </member>
        <member name="T:BuddyOS.Battery">
            <summary>
            Battery component of the robot. Its autonomy is about 6-8 hours.
            Its voltage never should be under 9.5 volts
            </summary>
        </member>
        <member name="P:BuddyOS.Battery.MaxVoltage">
            <summary>
            Maximum value of the battery in volts.
            </summary>
        </member>
        <member name="P:BuddyOS.Battery.MinVoltage">
            <summary>
            Minimum value of the battery in volts.
            </summary>
        </member>
        <member name="P:BuddyOS.Battery.Volts">
            <summary>
            Battery's value in volts.
            </summary>
            <returns>Instant battery's voltage, in volts</returns>
        </member>
        <member name="P:BuddyOS.Battery.EnergyLevel">
            <summary>
            The purcentage of the battery's recharge.
            </summary>
        </member>
        <member name="P:BuddyOS.Battery.SuppliesPower">
            <summary>
            Let the battery provide power to the robot or not.
            </summary>
            <remarks> You have to put the value to true tu use Buddy's functionnalities.</remarks>
        </member>
        <member name="P:BuddyOS.Battery.Error">
            <summary>
            Error code if there is any error on the component
            </summary>
        </member>
        <member name="T:BuddyOS.CliffSensor">
            <summary>
            Cliff sensor component of the robot. It allows to detect cliff and holes.
            The final robot will have 4 of those sensors.
            </summary>
        </member>
        <member name="P:BuddyOS.CliffSensor.Distance">
            <summary>
            The distance detected by the sensor, in meters. 
            </summary>
        </member>
        <member name="P:BuddyOS.CliffSensor.IsCliff">
            <summary>
            True if a cliff is detected by the sensor.
            </summary>
        </member>
        <member name="P:BuddyOS.CliffSensor.MaxDistance">
            <summary>
            The maximum distance for detection of the cliff sensor, in meters.
            </summary>
        </member>
        <member name="P:BuddyOS.CliffSensor.MinDistance">
            <summary>
            The minimum distance for detection of the cliff sensor, in meters.
            </summary>
        </member>
        <member name="P:BuddyOS.CliffSensor.Error">
            <summary>
            Error code if there is any error on the component
            </summary>
        </member>
        <member name="T:BuddyOS.CliffSensors">
            <summary>
            Set of 4 cliff sensor components.
            </summary>
        </member>
        <member name="P:BuddyOS.CliffSensors.FrontLeft">
            <summary>
            The front left cliff sensor.
            </summary>
        </member>
        <member name="P:BuddyOS.CliffSensors.FrontRight">
            <summary>
            The front right cliff sensor.
            </summary>
        </member>
        <member name="P:BuddyOS.CliffSensors.BackLeft">
            <summary>
            The back left cliff sensor.
            </summary>
        </member>
        <member name="P:BuddyOS.CliffSensors.BackRight">
            <summary>
            The back right cliff sensor.
            </summary>
        </member>
        <member name="T:BuddyOS.DepthCam">
            <summary>
            Depth camera component of the robot. The real depth camera will has multiple modes (varing FPS and view distance).
            The simulated depth is computed with a shader. The point cloud is created from this compute.
            </summary>
        </member>
        <member name="M:BuddyOS.DepthCam.Open(DepthMode)">
            <summary>
            Opens the camera device. Should be called once by session.
            </summary>
            <param name="iMode">Mode of the camera</param>
        </member>
        <member name="M:BuddyOS.DepthCam.Open(System.Int32)">
            <summary>
            Opens the camera device. Should be called once by session.
            </summary>
            <param name="iMode">Mode of the camera</param>
        </member>
        <member name="M:BuddyOS.DepthCam.Close">
            <summary>
            Closes the current opened camera. Must be call when you don't use the camera anymore. 
            </summary>
        </member>
        <member name="P:BuddyOS.DepthCam.FieldOfView">
            <summary>
            Field of view of the camera
            </summary>
        </member>
        <member name="P:BuddyOS.DepthCam.FrameMat">
            <summary>
            Current frame as a Mat OpenCVUnity format.
            </summary>
            <returns>Mat format of the current frame</returns>
        </member>
        <member name="P:BuddyOS.DepthCam.FrameTexture2D">
            <summary>
            Current frame as a Texture2D format.
            </summary>
            <returns>Texture2D format of the current frame</returns>
        </member>
        <member name="P:BuddyOS.DepthCam.DepthMat">
            <summary>
            Current frame as a Mat OpenCVUnity format in grayscale.
            </summary>
            <returns>Mat format of the current frame</returns>
        </member>
        <member name="P:BuddyOS.DepthCam.DepthTexture2D">
            <summary>
            Current frame as a Texture2D format in grayscale.
            </summary>
            <returns>Texture2D format of the current frame</returns>
        </member>
        <member name="P:BuddyOS.DepthCam.Width">
            <summary>
            Width of the camera output.
            </summary>
            <returns>Number of pixels corresponding to the width of the frame</returns>
        </member>
        <member name="P:BuddyOS.DepthCam.Height">
            <summary>
            Height of the camera output.
            </summary>
            <returns>Number of pixels corresponding to the height of the frame</returns>
        </member>
        <member name="P:BuddyOS.DepthCam.FrameID">
            <summary>
            Id of the current frame.
            </summary>
            <returns>ID of the frame</returns>
        </member>
        <member name="P:BuddyOS.DepthCam.IsOpen">
            <summary>
            Checks if the camera is open.
            </summary>
            <remarks>
            An opened camera will update its frame depending to the input view
            </remarks>
            <returns>Return true if the camera is open</returns>
        </member>
        <member name="P:BuddyOS.DepthCam.PointCloud">
            <summary>
            Point cloud of the depth cam view.
            </summary>
            <returns>Set of data points in the robot coordinate system</returns>
        </member>
        <member name="P:BuddyOS.DepthCam.Error">
            <summary>
            Error code if there is any error on the component
            </summary>
        </member>
        <member name="T:BuddyOS.Face">
            <summary>
            Face of the robot. You can use this component to make Buddy smiling or crying, depending on your needs.
            Some events are also available like blinking, swallowing, yawning...
            If you use the Text to speech component, the robot face will automaticaly "talk".
            </summary>
        </member>
        <member name="P:BuddyOS.Face.ClickedMouth">
            <summary>
            Does is mouth is touched by the user ?
            </summary>
        </member>
        <member name="P:BuddyOS.Face.ClickedLeftEye">
            <summary>
            Does the left eye is touched by the user ?
            </summary>
        </member>
        <member name="P:BuddyOS.Face.ClickedRightEye">
            <summary>
            Does the right eye is touched by the user ?
            </summary>
        </member>
        <member name="M:BuddyOS.Face.SetExpression(MoodType)">
            <summary>
            Ask the face to switch to the specified mood.
            </summary>
            <param name="iMood">The name of the mood to switch to</param>
        </member>
        <member name="M:BuddyOS.Face.SetEyeEvent(EyeEvent)">
            <summary>
            Buddy will make an eye event
            </summary>
            <param name="iEvent">The eye event</param>
        </member>
        <member name="M:BuddyOS.Face.SetMouthEvent(MouthEvent)">
            <summary>
            Buddy will make a mouth event. Last until MouthEvent.NONE or speak
            </summary>
            <param name="iEvent">The mouth event</param>
        </member>
        <member name="M:BuddyOS.Face.LookAt(System.Int32,System.Int32)">
            <summary>
            Look at the specified location (bottom left => 0, 0)
            </summary>
            <param name="iX">X coordinate, max val = Screen.width</param>
            <param name="iY">Y coordinate, max val = Screen.height</param>
        </member>
        <member name="M:BuddyOS.Face.LookAt(FaceLookAt)">
            <summary>
            Facility to LookAt(X, Y) method
            </summary>
            <param name="iLookAt">The location to look at</param>
        </member>
        <member name="T:BuddyOS.IRSensor">
            <summary>
            Infra red sensor component of the robot. Use the IR sensor for directional and precise purpose like distance estimation.
            </summary>
        </member>
        <member name="P:BuddyOS.IRSensor.Value">
            <summary>
            The value (0 to 255) sent by the infrared sensor.
            </summary>
            <remarks>
            The value means the lightning measured by the infrared sensor.
            </remarks>
        </member>
        <member name="P:BuddyOS.IRSensor.Distance">
            <summary>
            The distance in meters calculated by the sensor.
            </summary>
            <remarks>
            The distance is calculated using the lightning value sent by the sensor.
            See "Value" to get this value.
            </remarks>
        </member>
        <member name="P:BuddyOS.IRSensor.MaxDistance">
            <summary>
            The maximum distance which can be measured by the sensor.
            </summary>
        </member>
        <member name="P:BuddyOS.IRSensor.MinDistance">
            <summary>
            The minimum distance which can be measured by the sensor.
            </summary>
        </member>
        <member name="P:BuddyOS.IRSensor.Angle">
            <summary>
            The angle in degrees of the sensor.
            </summary>
        </member>
        <member name="P:BuddyOS.IRSensor.Error">
            <summary>
            Error code if there is any error on the component
            </summary>
        </member>
        <member name="T:BuddyOS.IRSensors">
            <summary>
            Set of 3 infra red sensor components.
            </summary>
        </member>
        <member name="P:BuddyOS.IRSensors.Left">
            <summary>
            The left infrared sensor.
            </summary>
        </member>
        <member name="P:BuddyOS.IRSensors.Middle">
            <summary>
            The middle infrared sensor.
            </summary>
        </member>
        <member name="P:BuddyOS.IRSensors.Right">
            <summary>
            The right infrared sensor.
            </summary>
        </member>
        <member name="T:BuddyOS.LED">
            <summary>
            Light-Emitting Diode component of the robot. Corresponding to the left arm base light, 
            the right arm base light and the robot heart light.
            </summary>
        </member>
        <member name="M:BuddyOS.LED.SetBodyLight(LEDColor)">
            <summary>
            Set the body light based on the mood.
            </summary>
            <param name="iMoodColor">Color corresponding to the mood</param>
        </member>
        <member name="M:BuddyOS.LED.SetBodyLight(UnityEngine.Color,System.Single,System.Single)">
            <summary>
            Set the body light value and oscillation with UnityEngine Color.
            </summary>
            <param name="iColor">Color of the lights in RGB</param>
            <param name="iVariation">Amplitude of the oscillation in purcentage (0.0f to 1f with step of 0.01f)</param>
            <param name="iFrequency">Frequency of oscillation in Hertz (0.0f to 5.10f with step of 0.02f)</param>
        </member>
        <member name="M:BuddyOS.LED.SetBodyLight(System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Set the body light value and oscillation with HSV Color.
            </summary>
            <param name="iH">Hue value in degrees (0 to 360)</param>
            <param name="iS">Saturation purcentage (0 to 100)</param>
            <param name="iV">Brightness of the color  (0 to 100)</param>
            <param name="iVariation">>Amplitude of the oscillation in purcentage (0 to 1 with step of 0.01f)</param>
            <param name="iFrequency">Frequency of oscillation in Hertz (0.0 to 5.10 with step of 0.02)</param>
        </member>
        <member name="P:BuddyOS.LED.Error">
            <summary>
            Error code if there is any error on the component
            </summary>
        </member>
        <member name="T:BuddyOS.Micro">
            <summary>
            Micro of the robot. Currently not use. Will be used later when the robot will has many directional micros.
            </summary>
        </member>
        <member name="M:BuddyOS.Micro.StartMicro(System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Starts Recording. 
            Returns an AudioClip, or NULL if recording fails to start.
            </summary>
            <param name="iDeviceName">Name of the device</param>
            <param name="iLoop">Indicates whether the recording should continue recording if lengthSec is reached, and wrap around and record from the beginning of the AudioClip.</param>
            <param name="iLenghtSec">Time record in seconds</param>
            <param name="iFrequency">The sample rate of the AudioClip produced by the recording.</param>
        </member>
        <member name="M:BuddyOS.Micro.StopMicro(System.String)">
            <summary>
            Stops Recording.
            </summary>
            <param name="iDeviceName">Name of the device</param>
        </member>
        <member name="M:BuddyOS.Micro.IsRecordingMicro(System.String)">
            <summary>
            Asks if a device is currently recording.
            </summary>
            <param name="iDeviceName">Name of the device</param>
        </member>
        <member name="M:BuddyOS.Micro.GetPositionMicro(System.String)">
            <summary>
            Get the position in samples of the recording.
            </summary>
            <param name="iDeviceName">Name of the device</param>        
        </member>
        <member name="M:BuddyOS.Micro.GetDeviceCapsMicro(System.String)">
            <summary>
            Get the frequency capabilities of a device.
            Returns min and max frequency that the device supports.
            </summary>
            <param name="iDeviceName">Name of the device</param>
        </member>
        <member name="P:BuddyOS.Micro.Record">
            <summary>
            The current recording
            </summary>
        </member>
        <member name="T:BuddyOS.Hinge">
            <summary>
            Hinge component of the robot neck. 
            </summary>
        </member>
        <member name="P:BuddyOS.Hinge.DestinationAnglePosition">
            <summary>
            The setted angular position of the motor in degrees
            </summary>
        </member>
        <member name="P:BuddyOS.Hinge.CurrentAnglePosition">
            <summary>
            The current angular position of the motor in degrees
            </summary>
        </member>
        <member name="P:BuddyOS.Hinge.TargetSpeed">
            <summary>
            Current target velocity in degrees per second
            </summary>
        </member>
        <member name="P:BuddyOS.Hinge.MaximumAngle">
            <summary>
            Maximum possible angular position of the motor in degrees
            </summary>
        </member>
        <member name="P:BuddyOS.Hinge.MinimumAngle">
            <summary>
            Minimum possible angular position of the motor in degrees
            </summary>
        </member>
        <member name="P:BuddyOS.Hinge.MaximumSpeed">
            <summary>
            Maximum possible velocity of the motor in degrees per second
            </summary>
        </member>
        <member name="P:BuddyOS.Hinge.Error">
            <summary>
            Error code if there is any error on the component
            </summary>
        </member>
        <member name="M:BuddyOS.Hinge.SetPosition(System.Single,System.Single)">
            <summary>
            Set the angular position in degrees of the motor at a specific speed in degrees per second
            </summary>
            <param name="iAngleDeg">Angle in degrees of the angular</param>
            <param name="iSpeed">Speed in degrees/sec of the motor</param>
        </member>
        <member name="M:BuddyOS.Hinge.SetPosition(System.Single)">
            <summary>
            Set the angular position in degrees of the motor
            </summary>
            <param name="iAngleDeg">Angle in degrees of the angular position</param>
        </member>
        <member name="T:BuddyOS.YesHinge">
            <summary>
            Represents the yes axe hinge of the robot (Roll Euler axe)
            </summary>
        </member>
        <member name="M:BuddyOS.YesHinge.SetPosition(System.Single,System.Single)">
            <summary>
            Set the hinge at the specified position in degrees
            </summary>
            <param name="iAngleDeg">The angle in degrees</param>
            <param name="iSpeed">The speed in degrees per second</param>
        </member>
        <member name="M:BuddyOS.YesHinge.SetPosition(System.Single)">
            <summary>
            Set the hinge at the specified position in degrees
            </summary>
            <param name="iAngleDeg">The angle in degrees</param>
        </member>
        <member name="T:BuddyOS.NoHinge">
            <summary>
            Represents the no axe hinge of the robot (Yaw Euler axe)
            </summary>
        </member>
        <member name="M:BuddyOS.NoHinge.SetPosition(System.Single,System.Single)">
            <summary>
            Set the hinge at the specified position in degrees
            </summary>
            <param name="iAngleDeg">The angle in degrees</param>
            <param name="iSpeed">The speed in degrees per second</param>
        </member>
        <member name="M:BuddyOS.NoHinge.SetPosition(System.Single)">
            <summary>
            Set the hinge at the specified position in degrees
            </summary>
            <param name="iAngleDeg">The angle in degrees</param>
        </member>
        <member name="T:BuddyOS.Wheels">
            <summary>
            Wheels (right and left) of the robot.
            </summary>
        </member>
        <member name="P:BuddyOS.Wheels.LeftWheelAngle">
            <summary>
            Actual angle of left wheel, in degrees.
            </summary>
        </member>
        <member name="P:BuddyOS.Wheels.RightWheelAngle">
            <summary>
            Actual angle of right wheel, in degrees.
            </summary>
        </member>
        <member name="P:BuddyOS.Wheels.LeftWheelDeltaAngle">
            <summary>
            Rotation of left wheel since the last frame, in degrees.
            </summary>
        </member>
        <member name="P:BuddyOS.Wheels.RightWheelDeltaAngle">
            <summary>
            Rotation of right wheel since the last frame, in degrees.
            </summary>
        </member>
        <member name="P:BuddyOS.Wheels.LeftWheelAngularVelocity">
            <summary>
            Angular velocity of the left wheel, in degrees per seconds.
            </summary>
        </member>
        <member name="P:BuddyOS.Wheels.RightWheelAngularVelocity">
            <summary>
            Angular velocity of the right wheel, in degrees per seconds.
            </summary>
        </member>
        <member name="P:BuddyOS.Wheels.Radius">
            <summary>
            Radius of Buddy's wheels in meters.
            </summary>
        </member>
        <member name="P:BuddyOS.Wheels.Entrax">
            <summary>
            Buddy's mobile base's entrax : The distance between the center of the left wheel and the center of the right wheel, in meters.
            </summary>
        </member>
        <member name="P:BuddyOS.Wheels.MaxSpeed">
            <summary>
            The maximum speed, in degrees per seconds, possible for Buddy's wheels.
            </summary>
        </member>
        <member name="P:BuddyOS.Wheels.Speed">
            <summary>
            Current Speed in meters by second.
            </summary>
        </member>
        <member name="P:BuddyOS.Wheels.Status">
            <summary>
            Enumeration corresponding to the current wheel's status
            </summary>
        </member>
        <member name="P:BuddyOS.Wheels.Error">
            <summary>
            Error code if there is any error on the component
            </summary>
        </member>
        <member name="M:BuddyOS.Wheels.GetRobotPoseBelieves">
            <summary>
            Actual robot's pose estimated using odometry.
            </summary>
            <returns>Robot's pose (X, Y, Tetha), the position (X,Y) in meters and the orientation Theta in degrees</returns>
            <remarks>Motors is the use of data from motion sensors to estimate change in position over time</remarks>
            <remarks>The robot's pose is a 3D vector that contains (X, Y, Theta). (X, Y) being the robot's position in horizontal plane and Theta the orientation of the robot.</remarks>
        </member>
        <member name="M:BuddyOS.Wheels.SetWheelsSpeed(System.Single,System.Single,System.Int32)">
            <summary>
            Controls the speed of the wheels, stops after the timeout in milliseconds.
            </summary>
            <param name="iLeft">Desired left wheel speed, in degrees per seconds</param>
            <param name="iRight">Desired right wheel speed, in degrees per seconds</param>
            <param name="iTimeout">Timeout in milliseconds</param>
        </member>
        <member name="M:BuddyOS.Wheels.SetWheelsSpeedAtLow(System.Int32)">
            <summary>
            Apply wheels speed to low value (observation, human interaction, precision, docking...).
            </summary>
            <param name="iTimeout">Optional timeout (in milliseconds)</param>
        </member>
        <member name="M:BuddyOS.Wheels.SetWheelsSpeedAtMedium(System.Int32)">
            <summary>
            Apply wheels speed to medium value (roaming, navigation...).
            </summary>
            <param name="iTimeout">Optional timeout (in milliseconds)</param>
        </member>
        <member name="M:BuddyOS.Wheels.SetWheelsSpeedAtHigh(System.Int32)">
            <summary>
            Apply wheels speed to high value (games, alert...).
            </summary>
            <param name="iTimeout">Optional timeout (in milliseconds)</param>
        </member>
        <member name="M:BuddyOS.Wheels.TurnAbsoluteAngle(System.Single,System.Single,System.Single)">
            <summary>
            Turns until the desired angle is reached in world space (based Buddy's odometry).
            </summary>
            <param name="iAngle">Desired angle in degrees</param>
            <param name="iSpeed">Desired wheels speed in degrees per seconds</param>
            <param name="iTolerance">Tolerance, in degrees, around the final angle where the robot would stop</param>
            <remarks>The absolute target angle defines the robot orientation in world space (relative to the first position when the robot woke up)</remarks>
            <remarks>The robot's pose in world space at time = 0 is (x = 0, z = 0, theta = 0).</remarks>
        </member>
        <member name="M:BuddyOS.Wheels.TurnAngle(System.Single,System.Single,System.Single)">
            <summary>
            Turns with a target angle (in degrees) from the current orientation.
            </summary>
            <param name="iAngle">Desired angle in degrees</param>
            <param name="iSpeed">Desired wheels speed in degrees per seconds</param>
            <param name="iTolerance">Tolerance, in degrees, around the final angle where the robot would stop</param>
            <remarks>The target angle defines the robot orientation in local space (relative to its actual orientation)</remarks>
        </member>
        <member name="M:BuddyOS.Wheels.MoveToAbsolutePosition(UnityEngine.Vector2,System.Single,System.Single)">
            <summary>
            Makes the robot go to a target position in world space (relative to the first position when the robot woke up).
            </summary>
            <param name="iPosition">x and y coordinate in meters</param>
            <param name="iSpeed">Desired wheels speed in degrees per seconds</param>
            <param name="iTolerance">Tolerance, in meters, around the final position where the robot would stop</param>
            <remarks>The absolute target position defines the robot position in world space (relative to the first position when the robot woke up)</remarks>
            <remarks>The robot's pose in world space at time = 0 is (x = 0, z = 0, theta = 0).</remarks>
        </member>
        <member name="M:BuddyOS.Wheels.MoveToPosition(UnityEngine.Vector2,System.Single,System.Single)">
            <summary>
            Makes the robot go to a desired position relative to the actual position.
            </summary>
            <param name="iPosition">x and y coordinate in meter</param>
            <param name="iSpeed">Desired whees speed in degrees per seconds</param>
            <param name="iTolerance">Tolerance, in meters, around the final position where the robot would stop</param>
            <remarks>The target position defines the robot position in local space (relative to its actual orientation)</remarks>
            <remarks>The robot's pose in world space at time = 0 is (x = 0, z = 0, theta = 0).</remarks>
        </member>
        <member name="M:BuddyOS.Wheels.MoveDistance(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the speeds of the wheels for a desired distance.
            </summary>
            <param name="iLeft">Left wheel speed in degrees per seconds</param>
            <param name="iRight">Right wheel speed in degrees per seconds</param>
            <param name="iDistance">Distance to reach until the robot stops</param>
            <param name="iTolerance">Tolerance, in meters, around the final position where the robot would stop</param>
        </member>
        <member name="M:BuddyOS.Wheels.StopWheels">
            <summary>
            Stops the wheels by setting their speed values to 0f.
            </summary>
        </member>
        <member name="T:BuddyOS.Motors">
            <summary>
            Global class to access head axes and wheels
            </summary>
        </member>
        <member name="P:BuddyOS.Motors.Wheels">
            <summary>
            Accessor to control wheels
            </summary>
        </member>
        <member name="P:BuddyOS.Motors.NoHinge">
            <summary>
            Accessor to control the Head Hinge
            </summary>
        </member>
        <member name="P:BuddyOS.Motors.YesHinge">
            <summary>
            Accessor to control the Neck Hinge
            </summary>
        </member>
        <member name="T:BuddyOS.RGBCam">
            <summary>
            The robot Red-Green-Blue camera. You can easily open it with the Open() method.
            It automatically be Close() when quitting an application.
            See RGBCamResolution enumeration for more precision about resolution.
            </summary>
        </member>
        <member name="M:BuddyOS.RGBCam.Open">
            <summary>
            Open the camera device. 
            </summary>
            <remarks>
            Should be called only when the camera is closed.
            See "IsOpen" accessor to know this.
            </remarks>
        </member>
        <member name="M:BuddyOS.RGBCam.Close">
            <summary>
            Closes the current opened video stream. 
            </summary>
            <remarks>
            Must be called when you will not use the camera anymore. 
            </remarks>
        </member>
        <member name="P:BuddyOS.RGBCam.CameraID">
            <summary>
            ID of the selected Camera
            </summary>
        </member>
        <member name="P:BuddyOS.RGBCam.FieldOfView">
            <summary>
            Field of view of the webcam
            </summary>
        </member>
        <member name="P:BuddyOS.RGBCam.Orientation">
            <summary>
            Get the current angle of the camera around its normal axis in degrees.
            </summary>
            <returns>Angle in degrees</returns>
        </member>
        <member name="P:BuddyOS.RGBCam.FrameTexture2D">
            <summary>
            Returns the current frame.
            </summary>
            <returns>The current frame in a Texture2D format</returns>
        </member>
        <member name="P:BuddyOS.RGBCam.FrameMat">
            <summary>
            Returns the current frame as a Mat OpenCVUnity format.
            </summary>
            <returns>The current frame in a Mat OpenCVUnity format</returns>
        </member>
        <member name="P:BuddyOS.RGBCam.Width">
            <summary>
            Returns the width of the video stream output.
            </summary>
            <returns>The width of the video stream output in pixels</returns>
        </member>
        <member name="P:BuddyOS.RGBCam.Height">
            <summary>
            Returns the height of the video stream output.
            </summary>
            <returns>The height of the video stream output in pixels</returns>
        </member>
        <member name="P:BuddyOS.RGBCam.FrameID">
            <summary>
            Returns the ID of the current frame.
            </summary>
            <returns>ID of the frame</returns>
        </member>
        <member name="P:BuddyOS.RGBCam.IsOpen">
            <summary>
            Checks if the camera is opened.
            An opened video stream will update its frame depending to the input view.
            </summary>
            <returns>Return true if the video stream  is opened, and false if not.</returns>
        </member>
        <member name="P:BuddyOS.RGBCam.Resolution">
            <summary>
            The resolution of the webcam 640x480, 320x240 or 176x144
            When setted, close and re-open automaticaly the camera.
            </summary>
        </member>
        <member name="P:BuddyOS.RGBCam.Error">
            <summary>
            Error code if there is any error on the component
            </summary>
        </member>
        <member name="T:BuddyOS.SoundChannel">
            <summary>
            Sound channel for the robot speaker component.
            </summary>
        </member>
        <member name="M:BuddyOS.SoundChannel.Play(UnityEngine.AudioClip)">
            <summary>
            Play the current Audio Clip, or the selected AudioClip
            </summary>
            <param name="iAudioClip">Selected audio clip to play.</param>
        </member>
        <member name="M:BuddyOS.SoundChannel.Pause">
            <summary>
            Pause the audio clip.
            </summary>
        </member>
        <member name="M:BuddyOS.SoundChannel.Resume">
            <summary>
            If paused, replay the audio clip
            </summary>
        </member>
        <member name="M:BuddyOS.SoundChannel.Stop">
            <summary>
            Stop the current Audio Clip
            </summary>
        </member>
        <member name="M:BuddyOS.SoundChannel.Kill">
            <summary>
            Kill the Audio clip (stop + audio source = null)
            </summary>
        </member>
        <member name="M:BuddyOS.SoundChannel.LoadSource(System.String)">
            <summary>
            Load an audioclip from the folder Resources/Sounds/
            </summary>
            <param name="iUrlSource">Filename of the audio source without the extension</param>
        </member>
        <member name="P:BuddyOS.SoundChannel.Loop">
            <summary>
            Loop state of the audiosource
            </summary>
        </member>
        <member name="P:BuddyOS.SoundChannel.Volume">
            <summary>
            Volume of the audiosource
            </summary>
        </member>
        <member name="P:BuddyOS.SoundChannel.Mute">
            <summary>
            Mute state of the audiosource
            </summary>
        </member>
        <member name="T:BuddyOS.Speaker">
            <summary>
            Speaker component of the robot. Allow you to handle multiple channels. Not currently used.
            </summary>
        </member>
        <member name="P:BuddyOS.Speaker.Voice">
            <summary>
            Sound Chanel to manage the voice
            </summary>
        </member>
        <member name="P:BuddyOS.Speaker.Media">
            <summary>
            Sound Chanel to manage the media sounds
            </summary>
        </member>
        <member name="P:BuddyOS.Speaker.SoundFx">
            <summary>
            Sound Chanel to manage the FX sounds
            </summary>
        </member>
        <member name="M:BuddyOS.Speaker.GetVolume">
            <summary>
            The volume of the speaker. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:BuddyOS.Speaker.VolumeUp(System.Boolean)">
            <summary>
            Increases the volume by 1
            </summary>
            <param name="iSound">Whether to play sound when changing volume</param>
        </member>
        <member name="M:BuddyOS.Speaker.VolumeDown(System.Boolean)">
            <summary>
            Decreases the volume by 1
            </summary>
            <param name="iSound">Whether to play sound when changing volume</param>
        </member>
        <member name="M:BuddyOS.Speaker.ChangeVolume(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Changes the volume accordingly
            </summary>
            <param name="iVolume">Volume (1-100)</param>
            <param name="iSound">Whether to play sound when changin volume</param>
            <param name="iShowUI">Whether to show the Volume UI or not</param>
        </member>
        <member name="M:BuddyOS.Speaker.KillAllSounds">
            <summary>
            Kills the sound to all Sound Chanel
            </summary>
        </member>
        <member name="T:BuddyOS.SpeechToText">
            <summary>
            Speech to text layer that allows you to translate an input signal to a basic System.String.
            Only works on Android builds.
            </summary>
        </member>
        <member name="P:BuddyOS.SpeechToText.OnBestRecognition">
            <summary>
            Called after a voice recognition with the best recognized sentence
            </summary>
        </member>
        <member name="P:BuddyOS.SpeechToText.OnVolumeChange">
            <summary>
            Called after a volume modification
            </summary>
        </member>
        <member name="P:BuddyOS.SpeechToText.OnBeginning">
            <summary>
            Called when a recognition started
            </summary>
        </member>
        <member name="P:BuddyOS.SpeechToText.OnError">
            <summary>
            Called after any error
            </summary>
        </member>
        <member name="P:BuddyOS.SpeechToText.OnErrorEnum">
            <summary>
            Called after any error
            </summary>
        </member>
        <member name="P:BuddyOS.SpeechToText.OnEnd">
            <summary>
            Called at the end of the recogntion
            </summary>
        </member>
        <member name="P:BuddyOS.SpeechToText.OnPartial">
            <summary>
            Called when the recognizer has recognized a word, but the complete recognition is not finished
            </summary>
        </member>
        <member name="M:BuddyOS.SpeechToText.SetLanguage(Language)">
            <summary>
            Set the language of the Speech To Text
            </summary>
            <param name="iLanguage">The language to set in Locale Codes (e.g. "en-US" for english from United-States, "fr-FR" for french from France)</param>
        </member>
        <member name="M:BuddyOS.SpeechToText.Request">
            <summary>
            Launch the request call for the Speech To Text. Has to be done whenever you want the recognition to begin.
            </summary>
        </member>
        <member name="M:BuddyOS.SpeechToText.Stop">
            <summary>
            Launch the request call for the Speech To Text. Has to be done whenever you want the recognition to begin.
            </summary>
        </member>
        <member name="P:BuddyOS.SpeechToText.LastAnswer">
            <summary>
            Best answer heard by the Speech To Text
            </summary>
            <returns>String of the text recognized</returns>
        </member>
        <member name="P:BuddyOS.SpeechToText.LastRecoText">
            <summary>
            The answers list heard by the Speech To Text
            </summary>
            <returns>String of the text recognized. All the suggestions of what seemed to be heard are listed</returns>
        </member>
        <member name="P:BuddyOS.SpeechToText.LastRecoConfidence">
            <summary>
            Confidence of the best answer recognized by the Speech To Text 
            </summary>
            <returns>float from 0.0f to 1.0f specifying the amount of confidence in the suggested answer</returns>
        </member>
        <member name="P:BuddyOS.SpeechToText.HasFinished">
            <summary>
            Is the listening finished?
            </summary>
            <returns>Is the listening finished?</returns>
        </member>
        <member name="P:BuddyOS.SpeechToText.LastRMS">
            <summary>
            Get the last decibel listened
            </summary>
            <returns>DB in float</returns>
        </member>
        <member name="P:BuddyOS.SpeechToText.LastError">
            <summary>
            Retrieve the last error sent by the Speech To Text
            </summary>
            <returns>Returns the error in string</returns>
        </member>
        <member name="T:BuddyOS.SphinxTrigger">
            <summary>
            Sphinx is use as a trigger in voice recognition. You will need to use Sphinx before starting STT.Request() for example.
            </summary>
        </member>
        <member name="M:BuddyOS.SphinxTrigger.LaunchRecognition">
            <summary>
            Launches the voice recognition.
            </summary>
        </member>
        <member name="M:BuddyOS.SphinxTrigger.StopRecognition">
            <summary>
            Ends the voice recognition.
            </summary>
        </member>
        <member name="M:BuddyOS.SphinxTrigger.SetKeyphrase(System.String)">
            <summary>
            Set the trigger key phrase.
            </summary>
            <param name="iKeyphrase">The key phrase</param>
        </member>
        <member name="M:BuddyOS.SphinxTrigger.SetLanguage(Language)">
            <summary>
            Update the current detected language.
            </summary>
            <param name="iLanguage"></param>
        </member>
        <member name="M:BuddyOS.SphinxTrigger.ChangeThreshold(System.Single)">
            <summary>
            Set the threshold of the sphinx trigger
            Shouldn't be called continously
            </summary>
            <param name="iThreshold">Threshold of the trigger, default is 1e-30f</param>
        </member>
        <member name="M:BuddyOS.SphinxTrigger.HasTriggered">
            <summary>
            Detects if the trigger has been activated.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BuddyOS.SphinxTrigger.FinishedSetup">
            <summary>
            Update all new setup.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BuddyOS.TabletParameters">
            <summary>
            Allows you to access to tablet parameters and settings (WiFi, Bluetooth, accelerometers...).
            </summary>
        </member>
        <member name="M:BuddyOS.TabletParameters.ConnectToNetwork(System.String,System.String)">
            <summary>
            Connects to wanted Access Point
            </summary>
            <param name="iSSID">Name of the Access Point</param>
            <param name="iPassword">Password to this Access Point</param>
        </member>
        <member name="M:BuddyOS.TabletParameters.GetWifiAPName(System.Int32)">
            <summary>
            WiFi Access Point Name at index iPosition
            </summary>
            <param name="iPosition">Index of the Wifi Access Point</param>
            <returns>Name of the Access Point</returns>
        </member>
        <member name="M:BuddyOS.TabletParameters.GetWifiForce(System.Int32)">
            <summary>
            The Force of the Wifi Access Point at index iPosition
            </summary>
            <param name="iPosition">Index of the Wifi Access Point</param>
            <returns>Integer of the force</returns>
        </member>
        <member name="M:BuddyOS.TabletParameters.GetWifiCount">
            <summary>
            The number of Wifi Access Point
            </summary>
            <returns>Number of Wifi Access Point</returns>
        </member>
        <member name="M:BuddyOS.TabletParameters.EnableBluetooth">
            <summary>
            Enables Bluetooth connection
            </summary>
        </member>
        <member name="M:BuddyOS.TabletParameters.DisableBluetooth">
            <summary>
            Disables Bluetooth connection
            </summary>
        </member>
        <member name="M:BuddyOS.TabletParameters.StartWifiScan">
            <summary>
            Starts a Wifi Scan
            </summary>
        </member>
        <member name="M:BuddyOS.TabletParameters.HasScannedWifi">
            <summary>
            Has the Wifi finish scanning
            </summary>
            <returns>True if the wifi was scanned</returns>
        </member>
        <member name="M:BuddyOS.TabletParameters.GetAvailableInternalStorage">
            <summary>
            The available internal storage
            </summary>
            <returns>Value in bytes</returns>
        </member>
        <member name="M:BuddyOS.TabletParameters.GetAvailableExternalStorage">
            <summary>
            The available external storage
            </summary>
            <returns>Value in bytes</returns>
        </member>
        <member name="M:BuddyOS.TabletParameters.GetTotalInternalStorage">
            <summary>
            The total internal storage
            </summary>
            <returns>Value in bytes</returns>
        </member>
        <member name="M:BuddyOS.TabletParameters.GetTotalExternalStorage">
            <summary>
            The total external storage
            </summary>
            <returns>Value in bytes</returns>
        </member>
        <member name="M:BuddyOS.TabletParameters.GetXAccelerometer">
            <summary>
            The X axis force of the accelerometer, including gravity force
            </summary>
            <returns>Value in float</returns>
        </member>
        <member name="M:BuddyOS.TabletParameters.GetYAccelerometer">
            <summary>
            The Y axis force of the accelerometer, including gravity force
            </summary>
            <returns>Value in float</returns>
        </member>
        <member name="M:BuddyOS.TabletParameters.GetZAccelerometer">
            <summary>
            The Z axis force of the accelerometer, including gravity force
            </summary>
            <returns>Value in float</returns>
        </member>
        <member name="M:BuddyOS.TabletParameters.GetTabletBatteryPercentage">
            <summary>
            Tablet battery value
            </summary>
        </member>
        <member name="T:BuddyOS.TextToSpeech">
            <summary>
            Text to speech allows you to make Buddy talks an input System.String.
            The Windows version uses SAPI, the Android version uses Google API.
            So, available methods have not the same behaviour on difference devices.
            </summary>
        </member>
        <member name="M:BuddyOS.TextToSpeech.Say(System.String,System.Boolean)">
            <summary>
            Makes the robot speaking the input string in the set language and can add to queue
            </summary>
        </member>
        <member name="M:BuddyOS.TextToSpeech.Silence(System.Int32,System.Boolean)">
            <summary>
            Launch silence and can add to queue
            </summary>
        </member>
        <member name="M:BuddyOS.TextToSpeech.IsSpeaking">
            <summary>
            Checks if the TTS is currently speaking
            </summary>
            <returns>True if a sentence is spoken</returns>
        </member>
        <member name="M:BuddyOS.TextToSpeech.HasFinishedTalking">
            <summary>
            Checks if the TTS has stoped speaking and has finished queue
            </summary>
            <returns>True if a sentence is finished</returns>
        </member>
        <member name="M:BuddyOS.TextToSpeech.SetPitch(System.Single)">
            <summary>
            Sets the pitch
            </summary>
            <param name="iPitch">The pitch</param>
        </member>
        <member name="M:BuddyOS.TextToSpeech.SetSpeechRate(System.Single)">
            <summary>
            Sets the speech rate
            </summary>
            <param name="iSpeechRate">The rate</param>
        </member>
        <member name="M:BuddyOS.TextToSpeech.SetLanguage(Language)">
            <summary>
            Sets the speak language
            </summary>
            <param name="iLanguage">The language</param>
        </member>
        <member name="M:BuddyOS.TextToSpeech.Stop">
            <summary>
            Stop the current speech
            </summary>
        </member>
        <member name="T:BuddyOS.ThermalSensor">
            <summary>
            The thermal sensor component of Buddy. Not available in simulation.
            </summary>
        </member>
        <member name="P:BuddyOS.ThermalSensor.Matrix">
            <summary>
            The matrix of the thermal sensor. Currently 4x4 resolution.
            Each value represents the estimated temperature.
            </summary>
        </member>
        <member name="P:BuddyOS.ThermalSensor.Error">
            <summary>
            Error code if there is any error on the component
            </summary>
        </member>
        <member name="T:BuddyOS.USSensor">
            <summary>
            Ultrasound component of the robot. Use US for obstacle detection purpose because of reflectioness. 
            It is less precise than an IR sensor.
            </summary>
        </member>
        <member name="P:BuddyOS.USSensor.Value">
            <summary>
            The value (0 to 255) sent by the ultrasound sensor.
            </summary>
            <remarks>
            The value means the lightning measured by the ultrasound sensor.
            </remarks>
        </member>
        <member name="P:BuddyOS.USSensor.Distance">
            <summary>
            Distance calculated by the sensor.
            </summary>
            <remarks>
            The distance is calculated using the lightning value sent by the sensor.
            See "Value" to get this value.
            </remarks>
        </member>
        <member name="P:BuddyOS.USSensor.MaxDistance">
            <summary>
            Access to the maximum distance which can be measured by the sensor.
            </summary>
        </member>
        <member name="P:BuddyOS.USSensor.MinDistance">
            <summary>
            Access to the minimum distance which can be measured by the sensor.
            </summary>
        </member>
        <member name="P:BuddyOS.USSensor.Angle">
            <summary>
            Access to the angle in degrees of the sensor.
            </summary>
        </member>
        <member name="P:BuddyOS.USSensor.Error">
            <summary>
            Error code if there is any error on the component
            </summary>
        </member>
        <member name="T:BuddyOS.USSensors">
            <summary>
            Set of 3 ultra sound sensor components
            </summary>
        </member>
        <member name="P:BuddyOS.USSensors.Left">
            <summary>
            Access to structure data for the left ultrasound sensor.
            </summary>
        </member>
        <member name="P:BuddyOS.USSensors.Right">
            <summary>
            Access to structure data for the right ultrasound sensor.
            </summary>
        </member>
        <member name="P:BuddyOS.USSensors.Back">
            <summary>
            Access to structure data for the back ultrasound sensor.
            </summary>
        </member>
        <member name="T:BuddyOS.App.AStateMachineBehaviour">
            <summary>
            If you planned to make a State Machine for your application, you will probably need to make your states inherit from this class.
            Add the possibility to use Coroutines, easy access to the Buddy API and retrieve Game Objects and Components on the StateMachineAppLinker.
            </summary>
        </member>
        <member name="F:BuddyOS.App.AStateMachineBehaviour.mFace">
            <summary>
            Simple access to the face robot component
            </summary>
        </member>
        <member name="F:BuddyOS.App.AStateMachineBehaviour.mRGBCam">
            <summary>
            Simple access to the RGB camera robot component
            </summary>
        </member>
        <member name="F:BuddyOS.App.AStateMachineBehaviour.mDepthCam">
            <summary>
            Simple access to the depth camera robot component
            </summary>
        </member>
        <member name="F:BuddyOS.App.AStateMachineBehaviour.mIRSensors">
            <summary>
            Simple access to all infrared sensor robot components
            </summary>
        </member>
        <member name="F:BuddyOS.App.AStateMachineBehaviour.mUSSensors">
            <summary>
            Simple access to all ultrasound sensor robot components
            </summary>
        </member>
        <member name="F:BuddyOS.App.AStateMachineBehaviour.mCliffSensors">
            <summary>
            Simple access to all cliff sensor robot components
            </summary>
        </member>
        <member name="F:BuddyOS.App.AStateMachineBehaviour.mYesHinge">
            <summary>
            Simple access to the yes hinge robot component
            </summary>
        </member>
        <member name="F:BuddyOS.App.AStateMachineBehaviour.mNoHinge">
            <summary>
            Simple access to the no hinge robot component
            </summary>
        </member>
        <member name="F:BuddyOS.App.AStateMachineBehaviour.mWheels">
            <summary>
            Simple access to wheels robot component
            </summary>
        </member>
        <member name="F:BuddyOS.App.AStateMachineBehaviour.mTTS">
            <summary>
            Simple access to the text to speech
            </summary>
        </member>
        <member name="F:BuddyOS.App.AStateMachineBehaviour.mSTT">
            <summary>
            Simple access to the speech to text
            </summary>
        </member>
        <member name="F:BuddyOS.App.AStateMachineBehaviour.mSphinx">
            <summary>
            Simple access to the sphinx trigger
            </summary>
        </member>
        <member name="F:BuddyOS.App.AStateMachineBehaviour.mBattery">
            <summary>
            Simple access to the battery robot component
            </summary>
        </member>
        <member name="F:BuddyOS.App.AStateMachineBehaviour.mMicro">
            <summary>
            Simple access to the micro robot component
            </summary>
        </member>
        <member name="F:BuddyOS.App.AStateMachineBehaviour.mSpeaker">
            <summary>
            Simple access to the speaker robot component
            </summary>
        </member>
        <member name="F:BuddyOS.App.AStateMachineBehaviour.mLED">
            <summary>
            Simple access to the LED robot component
            </summary>
        </member>
        <member name="F:BuddyOS.App.AStateMachineBehaviour.mThermalSensor">
            <summary>
            Simple access to the thermal sensor robot component
            </summary>
        </member>
        <member name="F:BuddyOS.App.AStateMachineBehaviour.mTabletParameters">
            <summary>
            Simple access to tablet parameters
            </summary>
        </member>
        <member name="F:BuddyOS.App.AStateMachineBehaviour.mVocalActivation">
            <summary>
            Vocal activation wrapper for Sphinx/STT facilities
            </summary>
        </member>
        <member name="F:BuddyOS.App.AStateMachineBehaviour.mDictionary">
            <summary>
            The current language dictionnary
            </summary>
        </member>
        <member name="F:BuddyOS.App.AStateMachineBehaviour.mNotManager">
            <summary>
            Notification will be printed at the screen top
            </summary>
        </member>
        <member name="F:BuddyOS.App.AStateMachineBehaviour.mMood">
            <summary>
            Helper in order to easily change the robot mood (LED and Face [and moving behaviour])
            </summary>
        </member>
        <member name="M:BuddyOS.App.AStateMachineBehaviour.OnStateEnter(UnityEngine.Animator,UnityEngine.AnimatorStateInfo,System.Int32)">
            <summary>
            Method called when the current execution switch to the current state.
            You should not use this method, Use OnEnter instead.
            </summary>
            <param name="animator">The animator that the state belongs</param>
            <param name="stateInfo">Info about the current state (animation, triggers...)</param>
            <param name="layerIndex">Index of the current layer</param>
        </member>
        <member name="M:BuddyOS.App.AStateMachineBehaviour.OnStateUpdate(UnityEngine.Animator,UnityEngine.AnimatorStateInfo,System.Int32)">
            <summary>
            Repeat method called when the current execution is on the current state
            You should not use this method, Use OnUpdate instead.
            </summary>
            <param name="animator">The animator that the state belongs</param>
            <param name="stateInfo">Info about the current state (animation, triggers...)</param>
            <param name="layerIndex">Index of the current layer</param>
        </member>
        <member name="M:BuddyOS.App.AStateMachineBehaviour.OnStateExit(UnityEngine.Animator,UnityEngine.AnimatorStateInfo,System.Int32)">
            <summary>
            Method called after the end of the leaving animation when the execution is quitting this state.
            You should not use this method, Use OnExit instead.
            </summary>
            <param name="animator">The animator that the state belongs</param>
            <param name="stateInfo">Info about the current state (animation, triggers...)</param>
            <param name="layerIndex">Index of the current layer</param>
        </member>
        <member name="M:BuddyOS.App.AStateMachineBehaviour.StartCoroutine(System.Collections.IEnumerator)">
            <summary>
            Begin a coroutine.
            </summary>
            <param name="iFunc">Your coroutine to start</param>
        </member>
        <member name="M:BuddyOS.App.AStateMachineBehaviour.GetComponent``1">
            <summary>
            Retrieve the component (Monobehaviour) on the gameObject where the StateMachineAppLinker belongs.
            If the component doens't exist, it adds the component.
            </summary>
            <typeparam name="T">Type of monobehaviour component</typeparam>
            <returns>The component</returns>
        </member>
        <member name="M:BuddyOS.App.AStateMachineBehaviour.GetGameObject(System.Int32)">
            <summary>
            Retrieve the linked gameObject to the StateMachineLinker at the iIndex index.
            </summary>
            <param name="iIndex">The index of the linked gameobject</param>
            <returns>The gameobject</returns>
        </member>
        <member name="M:BuddyOS.App.AStateMachineBehaviour.Init">
            <summary>
            Method called once at the start of the application.
            </summary>
        </member>
        <member name="M:BuddyOS.App.AStateMachineBehaviour.OnEnter(UnityEngine.Animator,UnityEngine.AnimatorStateInfo,System.Int32)">
            <summary>
            Method called when the current execution switch to the current state.
            </summary>
            <param name="iAnimator">The animator that the state belongs</param>
            <param name="iStateInfo">Info about the current state (animation, triggers...)</param>
            <param name="iLayerIndex">Index of the current layer</param>
        </member>
        <member name="M:BuddyOS.App.AStateMachineBehaviour.OnUpdate(UnityEngine.Animator,UnityEngine.AnimatorStateInfo,System.Int32)">
            <summary>
            Repeat method called when the current execution is on the current state
            </summary>
            <param name="iAnimator">The animator that the state belongs</param>
            <param name="iStateInfo">Info about the current state (animation, triggers...)</param>
            <param name="iLayerIndex">Index of the current layer</param>
        </member>
        <member name="M:BuddyOS.App.AStateMachineBehaviour.OnExit(UnityEngine.Animator,UnityEngine.AnimatorStateInfo,System.Int32)">
            <summary>
            Method called after the end of the leaving animation when the execution is quitting this state
            </summary>
            <param name="iAnimator">The animator that the state belongs</param>
            <param name="iStateInfo">Info about the current state (animation, triggers...)</param>
            <param name="iLayerIndex">Index of the current layer</param>
        </member>
        <member name="T:BuddyOS.App.StateMachineAppLinker">
            <summary>
            If you planned to use a state machine for your application, and want to use provided AStateMachineBehaviour,
            you will need to put the StateMachineAppLinker as component of a gameobject in your scene.
            You can have as many Linker as you have state machine.
            </summary>
        </member>
        <member name="T:BuddyOS.App.AAppData">
            <summary>
            Your app data class must inherit from this class. They will be store here.
            The data object will be serialized when the application is quited and serialized the first that that GetInstance()
            will be called.
            </summary>
        </member>
        <member name="F:BuddyOS.App.AAppData.sInstance">
            <summary>
            Instance of your data (singleton).
            </summary>
        </member>
        <member name="M:BuddyOS.App.AAppData.GetInstance``1">
            <summary>
            Retrieve your last save version of your data.
            The file will be loaded from StreamingAssets path the first time, persistent data path otherwise.
            </summary>
            <typeparam name="T">Type of your data class</typeparam>
            <returns>Your data object</returns>
        </member>
        <member name="M:BuddyOS.App.AAppData.DeletePersitentData(System.String)">
            <summary>
            Remove the saved version in persistent data path.
            </summary>
            <param name="iFileName">File name of your serialized data</param>
        </member>
        <member name="M:BuddyOS.App.AAppData.SaveImpl">
            <summary>
            Custom Save method that will be called before the global serialization.
            </summary>
        </member>
        <member name="T:BuddyOS.App.AppInfo">
            <summary>
            Meta data of an application. External dev should never explicitly use this class.
            It's an internal class for app managing.
            </summary>
        </member>
        <member name="P:BuddyOS.App.AppInfo.DisplayName">
            <summary>
            The string that will be displayed in the menu. Error if NULL.
            </summary>
        </member>
        <member name="P:BuddyOS.App.AppInfo.Scene">
            <summary>
            Application main scene (entrypoint). Error if NULL.
            </summary>
        </member>
        <member name="P:BuddyOS.App.AppInfo.Company">
            <summary>
            The app company.
            </summary>
        </member>
        <member name="P:BuddyOS.App.AppInfo.Icon">
            <summary>
            Icon name inside the specified atlas. Error if NULL.
            </summary>
        </member>
        <member name="P:BuddyOS.App.AppInfo.VocalKeys">
            <summary>
            Strings for speech to text activation.
            </summary>
        </member>
        <member name="P:BuddyOS.App.AppInfo.Atlas">
            <summary>
            Applcation atlas. AtlasUI will be setted if NULL.
            </summary>
        </member>
        <member name="P:BuddyOS.App.AppInfo.OptionsLayoutStr">
            <summary>
            Application layout fullname. You should never use this. EmptyAppLayout will be setted if NULL.
            </summary>
        </member>
        <member name="P:BuddyOS.App.AppInfo.Assembly">
            <summary>
            Assembly name. Assembly-CSharp will be setted if NULL.
            </summary>
        </member>
        <member name="P:BuddyOS.App.AppInfo.DataFile">
            <summary>
            Name of your XML (with the extension) for the application data.
            </summary>
        </member>
        <member name="P:BuddyOS.App.AppInfo.OptionsLayout">
            <summary>
            The application menu layout that was created from OptionsLayoutStr.
            </summary>
        </member>
        <member name="P:BuddyOS.App.AppInfo.AppData">
            <summary>
            Application data. Automaticaly serialized after unload app, and deserialized after app loading.
            </summary>
        </member>
        <member name="M:BuddyOS.App.AppInfo.#ctor">
            <summary>
            AppInfo are build by deserialization inside the AppManager.
            </summary>
        </member>
        <member name="M:BuddyOS.App.AppInfo.SetLayout(System.String,System.String)">
            <summary>
            Create the layout of the appinfo from the assembly where the class should be.
            </summary>
            <param name="iAssembly"></param>
            <param name="iLayout"></param>
        </member>
        <member name="M:BuddyOS.App.AppInfo.SetData(BuddyOS.App.AAppData)">
            <summary>
            Set the deserialize data to the appinfo
            </summary>
            <param name="iData"></param>
        </member>
        <member name="T:BuddyOS.App.AppManager">
            <summary>
            Loads, unloads apps and store transited data
            </summary>
        </member>
        <member name="F:BuddyOS.App.AppManager.COMPANION_APP">
            <summary>
            Scene name of the Companion app
            </summary>
        </member>
        <member name="F:BuddyOS.App.AppManager.REMOTE_CONTROL_APP">
            <summary>
            Scene name of the Remote control app
            </summary>
        </member>
        <member name="F:BuddyOS.App.AppManager.DEFAULT_ASSEMBLY">
            <summary>
            Name of the default assembly in Unity3D
            </summary>
        </member>
        <member name="F:BuddyOS.App.AppManager.OS_ASSEMBLY">
            <summary>
            Name of the Operating System assembly
            </summary>
        </member>
        <member name="P:BuddyOS.App.AppManager.StringArgs">
            <summary>
            String arguments of the current application.
            NULL if not setted arg. Always reset after leaving app.
            Can be setted by using LoadAppBySceneCmd or LoadAppByVocalCmd
            </summary>
        </member>
        <member name="P:BuddyOS.App.AppManager.IntegerArgs">
            <summary>
            Integer arguments of the current application.
            NULL if not setted arg. Always reset after leaving app.
            /// Can be setted by using LoadAppBySceneCmd or LoadAppByVocalCmd
            </summary>
        </member>
        <member name="P:BuddyOS.App.AppManager.SingleArgs">
            <summary>
            Float arguments of the current application.
            NULL if not setted arg. Always reset after leaving app.
            Can be setted by using LoadAppBySceneCmd or LoadAppByVocalCmd
            </summary>
        </member>
        <member name="M:BuddyOS.App.AppManager.Quit">
            <summary>
            Quit the current app and load the default app
            </summary>
        </member>
        <member name="T:BuddyOS.BYOS">
            <summary>
            Core the BuddY Operating System (BYOS).
            Gave access to robot control and tools like cloud access, geolocation and managers.
            A Unique instance of the BYOS must be present in the whole application.
            </summary>
        </member>
        <member name="P:BuddyOS.BYOS.EnableLogs">
            <summary>
            Check if logs are enables
            </summary>
        </member>
        <member name="P:BuddyOS.BYOS.EnableLoadDefaultApp">
            <summary>
            Check if the OS must load a default app
            </summary>
        </member>
        <member name="P:BuddyOS.BYOS.EnableLoadApps">
            <summary>
            Check if the OS must load apps specified in input xml files
            </summary>
        </member>
        <member name="P:BuddyOS.BYOS.DefaultApp">
            <summary>
            Name of the default app, will be considered only if EnableLoadDefaultApp is true
            </summary>
        </member>
        <member name="P:BuddyOS.BYOS.DataBase">
            <summary>
            Buddy global data base, not used
            </summary>
        </member>
        <member name="P:BuddyOS.BYOS.AppManager">
            <summary>
            Manage apps. Handle loading, unloading and transmited info between apps 
            </summary>
        </member>
        <member name="P:BuddyOS.BYOS.VocalActivation">
            <summary>
            Layer using SpeechToText and SphinxTrigger
            </summary>
        </member>
        <member name="P:BuddyOS.BYOS.Geolocation">
            <summary>
            Geolocation allows you to know the robot current position
            </summary>
        </member>
        <member name="P:BuddyOS.BYOS.Scheduler">
            <summary>
            Allows to execute commands one by one
            </summary>
        </member>
        <member name="P:BuddyOS.BYOS.NotManager">
            <summary>
            Notifications are displayed on the screen top for misc info
            </summary>
        </member>
        <member name="P:BuddyOS.BYOS.FontManager">
            <summary>
            Use this to (un)load specific font
            </summary>
        </member>
        <member name="P:BuddyOS.BYOS.SpriteManager">
            <summary>
            Use this to (un)load specific atlas
            </summary>
        </member>
        <member name="P:BuddyOS.BYOS.Dictionary">
            <summary>
            Hosts all global_keyword -> currentlanguage_word matchings
            </summary>
        </member>
        <member name="P:BuddyOS.BYOS.Mood">
            <summary>
            Helper in order to easily change the robot mood (LED and Face [and moving behaviour])
            </summary>
        </member>
        <member name="P:BuddyOS.BYOS.Face">
            <summary>
            Want to make Buddy crying ? Here the access
            </summary>
        </member>
        <member name="P:BuddyOS.BYOS.TextToSpeech">
            <summary>
            Want to make Buddy speaking ? Here the access
            </summary>
        </member>
        <member name="P:BuddyOS.BYOS.SphinxTrigger">
            <summary>
            Want to know if Buddy say "Hello Buddy" or "Salut Buddy" ? Here the access
            </summary>
        </member>
        <member name="P:BuddyOS.BYOS.SpeechToText">
            <summary>
            Convert an input signal to a basic System.String
            </summary>
        </member>
        <member name="P:BuddyOS.BYOS.Speaker">
            <summary>
            Speaker component. Not used
            </summary>
        </member>
        <member name="P:BuddyOS.BYOS.Micro">
            <summary>
            Micro component. Not used
            </summary>
        </member>
        <member name="P:BuddyOS.BYOS.TabletParameters">
            <summary>
            Access to accelerometers, BlueTooth, WiFi ...
            </summary>
        </member>
        <member name="P:BuddyOS.BYOS.RGBCam">
            <summary>
            Basic webcam of the robot
            </summary>
        </member>
        <member name="P:BuddyOS.BYOS.USSensors">
            <summary>
            Set of robot ultrasounds sensors
            </summary>
        </member>
        <member name="P:BuddyOS.BYOS.ThermalSensor">
            <summary>
            Robot thermal sensor
            </summary>
        </member>
        <member name="P:BuddyOS.BYOS.Motors">
            <summary>
            Set of motors. Including wheels and hinges
            </summary>
        </member>
        <member name="P:BuddyOS.BYOS.LED">
            <summary>
            LED accessor to update body lights
            </summary>
        </member>
        <member name="P:BuddyOS.BYOS.IRSensors">
            <summary>
            Set of robot infrareds sensors
            </summary>
        </member>
        <member name="P:BuddyOS.BYOS.CliffSensors">
            <summary>
            Set of robot cliff sensors
            </summary>
        </member>
        <member name="P:BuddyOS.BYOS.Battery">
            <summary>
            Battery component of the robot, neve below 9.5V !
            </summary>
        </member>
        <member name="P:BuddyOS.BYOS.DepthCam">
            <summary>
            Depth camera of the robot
            </summary>
        </member>
        <member name="P:BuddyOS.BYOS.Instance">
            <summary>
            The unique instance of the BuddY Operating System
            </summary>
        </member>
        <member name="T:BuddyOS.Impl.Core">
            <summary>
            Core access to the API. Must never be used for robot application.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.ACommand">
            <summary>
            Atomic behaviour. You can define your own commands by inherit from ACommand.
            Parameters can be setted with the Parameters attributes.
            </summary>
        </member>
        <member name="P:BuddyOS.Command.ACommand.Parameters">
            <summary>
            Parameters of the command
            </summary>
        </member>
        <member name="M:BuddyOS.Command.ACommand.Execute">
            <summary>
            Execute the command behaviour defined in ExecuteImpl
            </summary>
        </member>
        <member name="M:BuddyOS.Command.ACommand.ExecuteWhenAvailable">
            <summary>
            Add the command on the scheduler queue to be executed
            </summary>
        </member>
        <member name="M:BuddyOS.Command.ACommand.UpdateParams(System.Int32[])">
            <summary>
            Update params in existing command. Allows to avoid recreate a new command for the same purpose.
            </summary>
            <param name="iIntegers">Integers that will replace existing Integers in Parameters</param>
            <returns>The updated command</returns>
        </member>
        <member name="M:BuddyOS.Command.ACommand.UpdateParams(System.Single[])">
            <summary>
            Update params in existing command. Allows to avoid recreate a new command for the same purpose.
            </summary>
            <param name="iSingles">Singles that will replace existing Singles in Parameters</param>
            <returns>The updated command</returns>
        </member>
        <member name="M:BuddyOS.Command.ACommand.UpdateParams(System.String[])">
            <summary>
            Update params in existing command. Allows to avoid recreate a new command for the same purpose.
            </summary>
            <param name="iStrings">Strings that will replace existing Strings in Parameters</param>
            <returns>The updated command</returns>
        </member>
        <member name="M:BuddyOS.Command.ACommand.UpdateParams(System.Object[])">
            <summary>
            Update params in existing command. Allows to avoid recreate a new command for the same purpose.
            </summary>
            <param name="iObjects">Objects that will replace existing Objects in Parameters</param>
            <returns>The updated command</returns>
        </member>
        <member name="M:BuddyOS.Command.ACommand.Serialize">
            <summary>
            Create a custom byte array representing the command.
            </summary>
            <returns>The command serialization</returns>
        </member>
        <member name="M:BuddyOS.Command.ACommand.Deserialize(System.String,System.String)">
            <summary>
            Create a command from a string containing successive bytes, separate by ","
            </summary>
            <param name="iBytes">The byte string</param>
            <param name="iAssembly">The assembly where the command belongs</param>
            <returns>The command, created and init</returns>
        </member>
        <member name="M:BuddyOS.Command.ACommand.Deserialize(System.Byte[],System.String)">
            <summary>
            Create a command from a byte array
            </summary>
            <param name="iBytes">The byte array</param>
            <param name="iAssembly">The assembly where the command belongs</param>
            <returns>The command, created and init</returns>
        </member>
        <member name="M:BuddyOS.Command.ACommand.ToString">
            <summary>
            String basic serialization of the command
            </summary>
            <returns>Command string value for debug</returns>
        </member>
        <member name="M:BuddyOS.Command.ACommand.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.ACommandExtention">
            <summary>
            Static command extention for IEnumerable of ACommand
            </summary>
        </member>
        <member name="M:BuddyOS.Command.ACommandExtention.Execute(System.Collections.Generic.IEnumerable{BuddyOS.Command.ACommand})">
            <summary>
            Execute all command behaviours defined in ExecuteImpl
            </summary>
        </member>
        <member name="M:BuddyOS.Command.ACommandExtention.ExecuteWhenAvailable(System.Collections.Generic.IEnumerable{BuddyOS.Command.ACommand})">
            <summary>
            Add all commands on the scheduler queue in order to be executed
            </summary>
        </member>
        <member name="M:BuddyOS.Command.ACommandExtention.UpdateParams(System.Collections.Generic.IEnumerable{BuddyOS.Command.ACommand},System.Int32[])">
            <summary>
            Update params in existing command. Allows to avoid recreate a new command for the same purpose.
            </summary>
            <param name="iIntegers">Integers that will replace existing Integers in Parameters</param>
            <returns>The updated command</returns>
        </member>
        <member name="M:BuddyOS.Command.ACommandExtention.UpdateParams(System.Collections.Generic.IEnumerable{BuddyOS.Command.ACommand},System.String[])">
            <summary>
            Update params in all commands. Allows to avoid recreate a new command for the same purpose.
            </summary>
            <param name="iStrings">Strings that will replace existing Strings in Parameters</param>
            <returns>The updated command</returns>
        </member>
        <member name="M:BuddyOS.Command.ACommandExtention.UpdateParams(System.Collections.Generic.IEnumerable{BuddyOS.Command.ACommand},System.Single[])">
            <summary>
            Update params in all commands. Allows to avoid recreate a new command for the same purpose.
            </summary>
            <param name="iSingles">Singles that will replace existing Singles in Parameters</param>
            <returns>The updated command</returns>
        </member>
        <member name="M:BuddyOS.Command.ACommandExtention.UpdateParams(System.Collections.Generic.IEnumerable{BuddyOS.Command.ACommand},System.Object[])">
            <summary>
            Update params in all commands. Allows to avoid recreate a new command for the same purpose.
            </summary>
            <param name="iObjects">Objects that will replace existing Objects in Parameters</param>
            <returns>The updated command</returns>
        </member>
        <member name="T:BuddyOS.Command.ClsDepthCamCmd">
            <summary>
            When executed : Closes the current opened camera. Must be call when you don't use the camera anymore. 
            </summary>
        </member>
        <member name="M:BuddyOS.Command.ClsDepthCamCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.ClsMicroCmd">
            <summary>
            When executed : Stops Recording.
            </summary>
        </member>
        <member name="M:BuddyOS.Command.ClsMicroCmd.#ctor(System.String)">
            <summary>
            When executed : Stops Recording.
            </summary>
            <param name="iDeviceName">Name of the device</param>
        </member>
        <member name="M:BuddyOS.Command.ClsMicroCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.ClsRGBCamCmd">
            <summary>
            When executed : Closes the current opened video stream. 
            </summary>
            <remarks>
            Must be called when you will not use the camera anymore. 
            </remarks>
        </member>
        <member name="M:BuddyOS.Command.ClsRGBCamCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.DownVolCmd">
            <summary>
            When executed : Decreases the volume by 1
            </summary>
        </member>
        <member name="M:BuddyOS.Command.DownVolCmd.#ctor(System.Boolean)">
            <summary>
            When executed : Decreases the volume by 1
            </summary>
            <param name="iSound">Whether to play sound when changin volume</param>
        </member>
        <member name="M:BuddyOS.Command.DownVolCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.KillSndsCmd">
            <summary>
            When executed : Kill the sound to all Sound Channels
            </summary>
        </member>
        <member name="M:BuddyOS.Command.KillSndsCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.MvAbsPosCmd">
            <summary>
            When executed : Make the robot go to a desired global position.
            </summary>
        </member>
        <member name="M:BuddyOS.Command.MvAbsPosCmd.#ctor(UnityEngine.Vector2,System.Single,System.Single)">
            <summary>
            When executed : Make the robot go to a desired global position.
            </summary>
            <param name="iPosition">x and y coordinate in meter</param>
            <param name="iSpeed">Speed desired in degrees per second</param>
            <param name="iTolerance">The distance tolerance to reach to stop command in meters</param>
        </member>
        <member name="M:BuddyOS.Command.MvAbsPosCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.MvDistCmd">
            <summary>
            When executed : Indicate speeds of wheels during a desired distance.
            </summary>
        </member>
        <member name="M:BuddyOS.Command.MvDistCmd.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            When executed : Indicate speeds of wheels during a desired distance.
            </summary>
            <param name="iLeft">Left speed in degrees per second</param>
            <param name="iRight">right speed in degrees per second</param>
            <param name="iDistance">distance to reach until the command is done in meter</param>
            <param name="iTolerance">distance tolerance in meter to stop the command</param>
        </member>
        <member name="M:BuddyOS.Command.MvDistCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.MvPosCmd">
            <summary>
            When executed : Make the robot go to a desired position.
            </summary>
        </member>
        <member name="M:BuddyOS.Command.MvPosCmd.#ctor(UnityEngine.Vector2,System.Single,System.Single)">
            <summary>
            When executed : Make the robot go to a desired position.
            </summary>
            <param name="iPosition">x and y coordinate in meter</param>
            <param name="iSpeed">Speed desired in degrees per second</param>
            <param name="iTolerance">The distance tolerance to reach to stop command in meters</param>
        </member>
        <member name="M:BuddyOS.Command.MvPosCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.OpDepthCamCmd">
            <summary>
            When executed : Opens the camera device. Should be called once by session.
            </summary>
        </member>
        <member name="M:BuddyOS.Command.OpDepthCamCmd.#ctor(System.Int32)">
            <summary>
            When executed : Opens the camera device. Should be called once by session.
            </summary>
            <param name="iMode">Mode of the camera</param>
        </member>
        <member name="M:BuddyOS.Command.OpDepthCamCmd.#ctor(DepthMode)">
            <summary>
            Opens the camera device. Should be called once by session.
            </summary>
            <param name="iMode">Mode of the camera</param>
        </member>
        <member name="M:BuddyOS.Command.OpDepthCamCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.OpMicroCmd">
            <summary>
            When executed : Starts Recording.
            </summary>
        </member>
        <member name="M:BuddyOS.Command.OpMicroCmd.#ctor(System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            When executed : Starts Recording. 
            </summary>
            <param name="iDeviceName">Name of the device</param>
            <param name="iLoop">Indicates whether the recording should continue recording if lengthSec is reached, and wrap around and record from the beginning of the AudioClip.</param>
            <param name="iLenghtSec">Time record in seconds</param>
            <param name="iFrequency">The sample rate of the AudioClip produced by the recording.</param>
        </member>
        <member name="M:BuddyOS.Command.OpMicroCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.OpRGBCamCmd">
            <summary>
            Open the camera device. 
            </summary>
            <remarks>
            Should be called only when the camera is closed.
            See "IsOpen" accessor to know this.
            </remarks>
        </member>
        <member name="M:BuddyOS.Command.OpRGBCamCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.SayTTSCmd">
            <summary>
            When executed : Makes the robot speaking the input string in the set language
            </summary>
        </member>
        <member name="M:BuddyOS.Command.SayTTSCmd.#ctor(System.String,System.Boolean)">
            <summary>
            When executed : Makes the robot speaking the input string in the set language
            </summary>
        </member>
        <member name="M:BuddyOS.Command.SayTTSCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.LookAtCmd">
            <summary>
            When executed : The robot changes its mood
            </summary>
        </member>
        <member name="M:BuddyOS.Command.LookAtCmd.#ctor(FaceLookAt)">
            <summary>
            When executed : The robot changes its mood
            </summary>
            <param name="iMode">The mood to switch to</param>
        </member>
        <member name="M:BuddyOS.Command.LookAtCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.SetMouthEvntCmd">
            <summary>
            When executed : The robot executes a mouth event
            </summary>
        </member>
        <member name="M:BuddyOS.Command.SetMouthEvntCmd.#ctor(MouthEvent)">
            <summary>
            When executed : The robot executes an mouth event
            </summary>
            <param name="iMode">The mouth to trigger</param>
        </member>
        <member name="M:BuddyOS.Command.SetMouthEvntCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.SetEyeEvntCmd">
            <summary>
            When executed : The robot executes an eye event
            </summary>
        </member>
        <member name="M:BuddyOS.Command.SetEyeEvntCmd.#ctor(EyeEvent)">
            <summary>
            When executed : The robot executes an eye event
            </summary>
            <param name="iMode">The event to trigger</param>
        </member>
        <member name="M:BuddyOS.Command.SetEyeEvntCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.SetHSVLEDCmd">
            <summary>
            When executed : Set the body light value and oscillation with HSV Color.
            </summary>
        </member>
        <member name="M:BuddyOS.Command.SetHSVLEDCmd.#ctor(System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Set the body light value and oscillation with HSV Color.
            </summary>
            <param name="iH">Hue value in degrees (0.0f to 360.0f)</param>
            <param name="iS">Saturation purcentage (0.0f to 100f)</param>
            <param name="iV">Brightness of the color  (0.0f to 100f)</param>
            <param name="iVariation">>Amplitude of the oscillation in purcentage (0.0f to 1f with step of 0.01f)</param>
            <param name="iFrequency">Frequency of oscillation in Hertz (0.0f to 5.10f with step of 0.02f)</param>
        </member>
        <member name="M:BuddyOS.Command.SetHSVLEDCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.SetIDRGBCamCmd">
            <summary>
            When executed : Set ID of the selected Camera
            </summary>
        </member>
        <member name="M:BuddyOS.Command.SetIDRGBCamCmd.#ctor(System.Int32)">
            <summary>
            When executed : Set ID of the selected Camera
            </summary>
        </member>
        <member name="M:BuddyOS.Command.SetIDRGBCamCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.SetKeyPhrSphinxCmd">
            <summary>
            When executed : Set the trigger key phrase.
            </summary>
        </member>
        <member name="M:BuddyOS.Command.SetKeyPhrSphinxCmd.#ctor(System.String)">
            <summary>
            When executed : Set the trigger key phrase.
            </summary>
            <param name="iKeyPhrase">The key phrase</param>
        </member>
        <member name="M:BuddyOS.Command.SetKeyPhrSphinxCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.SetLangSphinxCmd">
            <summary>
            When executed : Sets the recognized language
            </summary>
        </member>
        <member name="M:BuddyOS.Command.SetLangSphinxCmd.#ctor(Language)">
            <summary>
            When executed : Sets the recognized language
            </summary>
            <param name="iLang">The language</param>
        </member>
        <member name="M:BuddyOS.Command.SetLangSphinxCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.SetLangSTTCmd">
            <summary>
            When executed : Sets the recognized language
            </summary>
        </member>
        <member name="M:BuddyOS.Command.SetLangSTTCmd.#ctor(Language)">
            <summary>
            When executed : Sets the recognized language
            </summary>
            <param name="iLang">The language</param>
        </member>
        <member name="M:BuddyOS.Command.SetLangSTTCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.SetLangTTSCmd">
            <summary>
            When executed : Sets the speak language
            </summary>
        </member>
        <member name="M:BuddyOS.Command.SetLangTTSCmd.#ctor(Language)">
            <summary>
            When executed : Sets the speak language
            </summary>
            <param name="iLang">The language</param>
        </member>
        <member name="M:BuddyOS.Command.SetLangTTSCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.SetMoodFaceCmd">
            <summary>
            When executed : The robot changes its mood
            </summary>
        </member>
        <member name="M:BuddyOS.Command.SetMoodFaceCmd.#ctor(MoodType)">
            <summary>
            When executed : The robot changes its mood
            </summary>
            <param name="iMode">The mood to switch to</param>
        </member>
        <member name="M:BuddyOS.Command.SetMoodFaceCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.SetColorLEDCmd">
            <summary>
            When executed : Set the body light based on the mood.
            </summary>
        </member>
        <member name="M:BuddyOS.Command.SetColorLEDCmd.#ctor(LEDColor)">
            <summary>
            When executed : Set the body light based on the mood.
            </summary>
            <param name="iColor">Color coresponding to the mood</param>
        </member>
        <member name="M:BuddyOS.Command.SetColorLEDCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.SetPitchTTSCmd">
            <summary>
            When executed : Sets the pitch
            </summary>
        </member>
        <member name="M:BuddyOS.Command.SetPitchTTSCmd.#ctor(System.Single)">
            <summary>
            When executed : Sets the pitch
            </summary>
            <param name="iPitch">The pitch</param>
        </member>
        <member name="M:BuddyOS.Command.SetPitchTTSCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.SetPosNoCmd">
            <summary>
            When executed : Set the angular position of the motor at a specific speed
            </summary>
        </member>
        <member name="M:BuddyOS.Command.SetPosNoCmd.#ctor(System.Single,System.Single)">
            <summary>
            When executed : Set the angular position of the motor at a specific speed
            </summary>
            <param name="iAngle">Angle in degrees of the angular position</param>
            <param name="iSpeed">Speed in degrees/sec of the motor</param>
        </member>
        <member name="M:BuddyOS.Command.SetPosNoCmd.#ctor(System.Single)">
            <summary>
            When executed : Set the angular position of the motor at a specific speed
            </summary>
            <param name="iAngle">Angle in degrees of the angular position</param>
        </member>
        <member name="M:BuddyOS.Command.SetPosNoCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.SetPosYesCmd">
            <summary>
            When executed : Set the angular position of the motor at a specific speed
            </summary>
        </member>
        <member name="M:BuddyOS.Command.SetPosYesCmd.#ctor(System.Single,System.Single)">
            <summary>
            When executed : Set the angular position of the motor at a specific speed
            </summary>
            <param name="iAngle">Angle in degrees of the angular position</param>
            <param name="iSpeed">Speed in degrees/sec of the motor</param>
        </member>
        <member name="M:BuddyOS.Command.SetPosYesCmd.#ctor(System.Single)">
            <summary>
            When executed : Set the angular position of the motor at a specific speed
            </summary>
            <param name="iAngle">Angle in degrees of the angular position</param>
        </member>
        <member name="M:BuddyOS.Command.SetPosYesCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.SetPowerCmd">
            <summary>
            When executed : Let the battery provide power to the robot or not.
            </summary>
        </member>
        <member name="M:BuddyOS.Command.SetPowerCmd.#ctor(System.Boolean)">
            <summary>
            When executed : Let the battery provide power to the robot or not.
            </summary>
            <remarks> You have to put the value to true tu use Buddy's functionnalities.</remarks>
        </member>
        <member name="M:BuddyOS.Command.SetPowerCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.SetRateTTSCmd">
            <summary>
            When executed : Sets the speech rate
            </summary>
        </member>
        <member name="M:BuddyOS.Command.SetRateTTSCmd.#ctor(System.Single)">
            <summary>
            When executed : Sets the speech rate
            </summary>
            <param name="iRate">The rate</param>
        </member>
        <member name="M:BuddyOS.Command.SetRateTTSCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.SetResCmd">
            <summary>
            When executed : Set the resolution of the webcam 640x480, 320x240 or 176x144
            When setted, close and re-open automaticaly the camera.
            </summary>
        </member>
        <member name="M:BuddyOS.Command.SetResCmd.#ctor(RGBCamResolution)">
            <summary>
            When executed : Set the resolution of the webcam 640x480, 320x240 or 176x144
            When setted, close and re-open automaticaly the camera.
            </summary>
        </member>
        <member name="M:BuddyOS.Command.SetResCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.SetRGBLEDCmd">
            <summary>
            When executed : Set the body light value and oscillation with UnityEngine Color.
            </summary>
        </member>
        <member name="M:BuddyOS.Command.SetRGBLEDCmd.#ctor(UnityEngine.Color,System.Single,System.Single)">
            <summary>
            When executed : Set the body light value and oscillation with UnityEngine Color.
            </summary>
            <param name="iColor">Color of the lights in RGB</param>
            <param name="iVariation">Amplitude of the oscillation in purcentage (0.0f to 1f with step of 0.01f)</param>
            <param name="iFrequency">Frequency of oscillation in Hertz (0.0f to 5.10f with step of 0.02f)</param>
        </member>
        <member name="M:BuddyOS.Command.SetRGBLEDCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.SetThreshSphinxCmd">
            <summary>
            When executed : Set the threshold of the sphinx trigger
            Shouldn't be called continously
            </summary>
        </member>
        <member name="M:BuddyOS.Command.SetThreshSphinxCmd.#ctor(System.Single)">
            <summary>
            When executed : Set the threshold of the sphinx trigger
            Shouldn't be called continously
            </summary>
            <param name="iThreshold">Threshold of the trigger, default is 1e-30f</param>
        </member>
        <member name="M:BuddyOS.Command.SetThreshSphinxCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.SetVolCmd">
            <summary>
            When executed : Changes the volume accordingly
            </summary>
        </member>
        <member name="M:BuddyOS.Command.SetVolCmd.#ctor(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            When executed : Changes the volume accordingly
            </summary>
            <param name="iVolume">Volume (1-100)</param>
            <param name="iSound">Whether to play sound when changin volume</param>
            <param name="iShowUI">Whether to show the Volume UI or not</param>
        </member>
        <member name="M:BuddyOS.Command.SetVolCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.SetWheelsSpeedCmd">
            <summary>
            When executed : Controls the speed of the wheels, stops after the timeout.
            </summary>
        </member>
        <member name="M:BuddyOS.Command.SetWheelsSpeedCmd.#ctor(System.Single,System.Single,System.Int32)">
            <summary>
            When executed : Controls the speed of the wheels, stops after the timeout.
            </summary>
            <param name="iLeft">Desired left wheel speed, in degrees per seconds</param>
            <param name="iRight">Desired right wheel speed, in degrees per seconds</param>
            <param name="iTimeout">Timeout in milliseconds</param>
        </member>
        <member name="M:BuddyOS.Command.SetWheelsSpeedCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.SilenceTTSCmd">
            <summary>
            When executed : Makes the robot stop speaking
            </summary>
        </member>
        <member name="M:BuddyOS.Command.SilenceTTSCmd.#ctor(System.Int32,System.Boolean)">
            <summary>
            When executed : Makes the robot stop speaking
            </summary>
        </member>
        <member name="M:BuddyOS.Command.SilenceTTSCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.SpeakFaceCmd">
            <summary>
            When executed : Make the face speaking or not
            </summary>
        </member>
        <member name="M:BuddyOS.Command.SpeakFaceCmd.#ctor(System.Boolean)">
            <summary>
            When executed : Make the face speaking or not
            </summary>
            <param name="iSpeak">Should speak ?</param>
        </member>
        <member name="M:BuddyOS.Command.SpeakFaceCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.StartBluetoothCmd">
            <summary>
            When executed : Enables Bluetooth connection
            </summary>
        </member>
        <member name="M:BuddyOS.Command.StartBluetoothCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.StartNetworkCmd">
            <summary>
            When executed : Connects to wanted Access Point
            </summary>
        </member>
        <member name="M:BuddyOS.Command.StartNetworkCmd.#ctor(System.String,System.String)">
            <summary>
            When executed : Connects to wanted Access Point
            </summary>
            <param name="iSSID">Name of the Access Point</param>
            <param name="iPassword">Password to this Access Point</param>
        </member>
        <member name="M:BuddyOS.Command.StartNetworkCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.StartRecoSphinxCmd">
            <summary>
            When executed : Launches the voice recognition.
            </summary>
        </member>
        <member name="M:BuddyOS.Command.StartRecoSphinxCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.StartRecoSTTCmd">
            <summary>
            When executed : Launch the request call for the Speech To Text. Has to be done whenever you want the recognition to begin.
            </summary>
        </member>
        <member name="M:BuddyOS.Command.StartRecoSTTCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.StartWifiScanCmd">
            <summary>
            When executed : Starts a Wifi Scan
            </summary>
        </member>
        <member name="M:BuddyOS.Command.StartWifiScanCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.StpBluetoothCmd">
            <summary>
            When executed : Disables Bluetooth connection
            </summary>
        </member>
        <member name="M:BuddyOS.Command.StpBluetoothCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.StpRecoSphinxCmd">
            <summary>
            When executed : Ends the voice recognition.
            </summary>
        </member>
        <member name="M:BuddyOS.Command.StpRecoSphinxCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.StpTTSCmd">
            <summary>
            When executed : Stop the current speech of the TTS
            </summary>
        </member>
        <member name="M:BuddyOS.Command.StpTTSCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.StpSTTCmd">
            <summary>
            When executed : Launch the request call for the Speech To Text. Has to be done whenever you want the recognition to begin.
            </summary>
        </member>
        <member name="M:BuddyOS.Command.StpSTTCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.StpWheelsCmd">
            <summary>
            When executed : Stop wheels by setting their speed values to 0F.
            </summary>
        </member>
        <member name="M:BuddyOS.Command.StpWheelsCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.TurnAbsCmd">
            <summary>
            When executed : Turns until the desired angle is reached in world space (based Buddy's odometry).
            </summary>
        </member>
        <member name="M:BuddyOS.Command.TurnAbsCmd.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            When executed : Turns until the desired angle is reached in world space (based Buddy's odometry).
            </summary>
            <param name="iAngle">Desired angle in degrees</param>
            <param name="iSpeed">Desired wheels speed in degrees per seconds</param>
            <param name="iTolerance">Tolerance, in degrees, around the final angle where the robot would stop</param>
            <remarks>The absolute target angle defines the robot orientation in world space (relative to the first position when the robot woke up)
            The robot's pose in world space at time = 0 is (x = 0, z = 0, theta = 0).</remarks>
        </member>
        <member name="M:BuddyOS.Command.TurnAbsCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.TurnRelaCmd">
            <summary>
            When executed : Turns with a target angle (in degrees) from the current orientation.
            </summary>
        </member>
        <member name="M:BuddyOS.Command.TurnRelaCmd.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            When executed : Turns with a target angle (in degrees) from the current orientation.
            </summary>
            <param name="iAngle">Desired angle in degrees</param>
            <param name="iSpeed">Desired wheels speed in degrees per seconds</param>
            <param name="iTolerance">Tolerance, in degrees, around the final angle where the robot would stop</param>
            <remarks>The target angle defines the robot orientation in local space (relative to its actual orientation)</remarks>
        </member>
        <member name="M:BuddyOS.Command.TurnRelaCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.UpVolCmd">
            <summary>
            When executed : Increases the volume by 1
            </summary>
        </member>
        <member name="M:BuddyOS.Command.UpVolCmd.#ctor(System.Boolean)">
            <summary>
            When executed : Increases the volume by 1
            </summary>
            <param name="iSound">Whether to play sound when changin volume</param>
        </member>
        <member name="M:BuddyOS.Command.UpVolCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.HomeCmd">
            <summary>
            When executed : Quit the app and launch the DEFAULT_APP
            </summary>
        </member>
        <member name="M:BuddyOS.Command.HomeCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.LoadAppBySceneCmd">
            <summary>
            When executed : Launch the app defined by the scene name.
            </summary>
        </member>
        <member name="M:BuddyOS.Command.LoadAppBySceneCmd.#ctor(System.String,System.Int32[],System.Single[],System.String[])">
            <summary>
            When executed : Launch the app defined by the scene name.
            </summary>
            <param name="iSceneName">App scene name</param>
            <param name="iIntegers">Integer arguments, can be null if not needed</param>
            <param name="iSingles">Float arguments, can be null if not needed</param>
            <param name="iStrings">String arguments, can be null if not needed</param>
        </member>
        <member name="M:BuddyOS.Command.LoadAppBySceneCmd.#ctor(System.String)">
            <summary>
            When executed : Launch the app defined by the scene name.
            </summary>
        </member>
        <member name="M:BuddyOS.Command.LoadAppBySceneCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.LoadAppByVocalCmd">
            <summary>
            When executed : Launch the app defined by the vocal key.
            </summary>
        </member>
        <member name="M:BuddyOS.Command.LoadAppByVocalCmd.#ctor(System.String,System.Int32[],System.Single[],System.String[])">
            <summary>
            When executed : Launch the app defined by the vocal key.
            </summary>
            <param name="iVocalKey">The input vocal key</param>
            <param name="iIntegers">Integer arguments, can be null if not needed</param>
            <param name="iSingles">Float arguments, can be null if not needed</param>
            <param name="iStrings">String arguments, can be null if not needed</param>
        </member>
        <member name="M:BuddyOS.Command.LoadAppByVocalCmd.#ctor(System.String)">
            <summary>
            When executed : Launch the app defined by the vocal key.
            </summary>
            <param name="iVocalKey">The input vocal key</param>
        </member>
        <member name="M:BuddyOS.Command.LoadAppByVocalCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.UnLoadAppCmd">
            <summary>
            When executed : Unload the current app
            </summary>
        </member>
        <member name="M:BuddyOS.Command.UnLoadAppCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.Scheduler">
            <summary>
            As soon as commands are added to scheduler, these commands will be executed one after the other. 
            Commands have no particular priority.
            </summary>
        </member>
        <member name="F:BuddyOS.Command.Scheduler.MAX_COMMAND_IN_QUEUE">
            <summary>
            Max commands in the scheduled queue
            </summary>
        </member>
        <member name="M:BuddyOS.Command.Scheduler.Add(BuddyOS.Command.ACommand[])">
            <summary>
            Add commands to be executed
            </summary>
            <param name="iCommands">Commands to executed</param>
        </member>
        <member name="T:BuddyOS.Command.CommandTime">
            <summary>
            Represents the executed command timestamp
            </summary>
        </member>
        <member name="T:BuddyOS.Command.CommandParam">
            <summary>
            Represents parameters for command. Contains it own serialization implementation
            </summary>
        </member>
        <member name="P:BuddyOS.Command.CommandParam.Integers">
            <summary>
            Integer storage.
            </summary>
        </member>
        <member name="P:BuddyOS.Command.CommandParam.Singles">
            <summary>
            Float storage.
            </summary>
        </member>
        <member name="P:BuddyOS.Command.CommandParam.Strings">
            <summary>
            Unicode string storage.
            </summary>
        </member>
        <member name="P:BuddyOS.Command.CommandParam.Objects">
            <summary>
            Miscellaneous object storage. Won't be serialized.
            </summary>
        </member>
        <member name="M:BuddyOS.Command.CommandParam.Serialize">
            <summary>
            Serialization to byte array of the current param
            </summary>
            <returns>Parameter byte array equivalent</returns>
        </member>
        <member name="M:BuddyOS.Command.CommandParam.Deserialize(System.Byte[],System.Int32@)">
            <summary>
            Create a new CommandParam object from the input byte array
            </summary>
            <param name="iBytes">The byte array</param>
            <param name="ioIndex">The index at the end of the parameter area</param>
            <returns>The new CommandParam</returns>
        </member>
        <member name="M:BuddyOS.Command.CommandParam.ToString">
            <summary>
            String basic serialization of the commandparam
            </summary>
            <returns>CommandParam string value for debug</returns>
        </member>
        <member name="T:BuddyOS.Command.EmptyCmd">
            <summary>
            Useless command
            </summary>
        </member>
        <member name="M:BuddyOS.Command.EmptyCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.ExitCmd">
            <summary>
            When executed : Quit the Buddy app
            </summary>
        </member>
        <member name="T:BuddyOS.Command.ClsWinCmd">
            <summary>
            When executed : Close the current UI window 
            </summary>
        </member>
        <member name="M:BuddyOS.Command.ClsWinCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.Command.OpWinCmd">
            <summary>
            When executed : Open an UI window 
            </summary>
        </member>
        <member name="M:BuddyOS.Command.OpWinCmd.#ctor(System.Int32)">
            <summary>
            When executed : Open an UI window 
            </summary>
        </member>
        <member name="M:BuddyOS.Command.OpWinCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BuddyOS.DataBase">
            <summary>
            Class access for users data, not used
            </summary>
        </member>
        <member name="P:BuddyOS.DataBase.UserProfils">
            <summary>
            Robot known profils
            </summary>
        </member>
        <member name="P:BuddyOS.DataBase.TrackedObjects">
            <summary>
            Currently tracked objects by tracking algorithm like face tracker.
            </summary>
        </member>
        <member name="T:BuddyOS.ProfilMatcher">
            <summary>
            Matcher tool to merge profils
            </summary>
        </member>
        <member name="M:BuddyOS.ProfilMatcher.AutoMerge(System.Collections.Generic.List{BuddyOS.UserProfil})">
            <summary>
            Merge input profils. Merge is currently based on PCA-image face clustering with K-means algorithm.
            Merge iterations stops when 0 merge occured.
            </summary>
            <param name="iProfils">User profils to merge</param>
        </member>
        <member name="T:BuddyOS.TrackedObjectType">
            <summary>
            Tracked object kind
            </summary>
        </member>
        <member name="F:BuddyOS.TrackedObjectType.UNKNOWN">
            <summary>
            Unknown ROI in the frame
            </summary>
        </member>
        <member name="F:BuddyOS.TrackedObjectType.FACE">
            <summary>
            People face
            </summary>
        </member>
        <member name="F:BuddyOS.TrackedObjectType.QRCODE">
            <summary>
            Basic QRcode
            </summary>
        </member>
        <member name="F:BuddyOS.TrackedObjectType.EYE">
            <summary>
            Single eye
            </summary>
        </member>
        <member name="F:BuddyOS.TrackedObjectType.BODY">
            <summary>
            Entire body
            </summary>
        </member>
        <member name="F:BuddyOS.TrackedObjectType.OBJECT">
            <summary>
            Misc obj
            </summary>
        </member>
        <member name="F:BuddyOS.TrackedObjectType.HAND">
            <summary>
            A hand
            </summary>
        </member>
        <member name="T:BuddyOS.TrackedObject">
            <summary>
            Data class of currently tracked object
            </summary>
        </member>
        <member name="P:BuddyOS.TrackedObject.ID">
            <summary>
            Unique ID of the tracked object
            </summary>
        </member>
        <member name="P:BuddyOS.TrackedObject.Rect">
            <summary>
            Rect position of the object in the current frame in RGBCam
            </summary>
        </member>
        <member name="P:BuddyOS.TrackedObject.ObjectType">
            <summary>
            Kind of the object
            </summary>
        </member>
        <member name="P:BuddyOS.TrackedObject.IsNewTrackedObject">
            <summary>
            Is a new trakced object ?
            </summary>
        </member>
        <member name="M:BuddyOS.TrackedObject.#ctor">
            <summary>
            Create an unknown tracked object
            </summary>
        </member>
        <member name="M:BuddyOS.TrackedObject.#ctor(BuddyOS.TrackedObjectType,System.Boolean)">
            <summary>
            Create a specific tracked object
            </summary>
            <param name="iType">Type of the object</param>
            <param name="iIsNewTracked">True to specify that it's a new object</param>
        </member>
        <member name="M:BuddyOS.TrackedObject.#ctor(BuddyOS.TrackedObjectType,OpenCVUnity.Rect,System.Boolean)">
            <summary>
            Create a currently tracked object
            </summary>
            <param name="iType">Type of the object</param>
            <param name="iRect">Rect of the layout of the object in the frame</param>
            <param name="iIsNewTracked">True to specify that it's a new object</param>
        </member>
        <member name="T:BuddyOS.Gender">
            <summary>
            Gender of the user
            </summary>
        </member>
        <member name="F:BuddyOS.Gender.UNKNOWN">
            <summary>
            Unknown gender. Do not panic, just remove your glass. If the problem persist, go to the hairdresser
            </summary>
        </member>
        <member name="F:BuddyOS.Gender.MALE">
            <summary>
            Male gender
            </summary>
        </member>
        <member name="F:BuddyOS.Gender.FEMALE">
            <summary>
            Female gender
            </summary>
        </member>
        <member name="T:BuddyOS.UserProfil">
            <summary>
            User info, not used
            </summary>
        </member>
        <member name="P:BuddyOS.UserProfil.FirstName">
            <summary>
            The firstname
            </summary>
        </member>
        <member name="P:BuddyOS.UserProfil.LastName">
            <summary>
            The last name
            </summary>
        </member>
        <member name="P:BuddyOS.UserProfil.ID">
            <summary>
            Unique ID of the user
            </summary>
        </member>
        <member name="P:BuddyOS.UserProfil.Gender">
            <summary>
            Profil gender
            </summary>
        </member>
        <member name="P:BuddyOS.UserProfil.Age">
            <summary>
            Known age
            </summary>
        </member>
        <member name="P:BuddyOS.UserProfil.IDOfTrackedObject">
            <summary>
            Tracked object ID corresponding to the tracked user, -1 if not tracked
            </summary>
        </member>
        <member name="P:BuddyOS.UserProfil.Faces">
            <summary>
            User faces for learning
            </summary>
        </member>
        <member name="M:BuddyOS.UserProfil.#ctor(System.String,System.String,System.Collections.Generic.List{OpenCVUnity.Mat},System.Int32,BuddyOS.Gender)">
            <summary>
            Constructor
            </summary>
            <param name="iFirstname">The first name</param>
            <param name="iLastname">The last name</param>
            <param name="iFaces">User faces</param>
            <param name="iAge">User age</param>
            <param name="iGender">User gender</param>
        </member>
        <member name="M:BuddyOS.UserProfil.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:BuddyOS.UserProfil.Merge(BuddyOS.UserProfil)">
            <summary>
            Merge the input profil to the existing profil. 
            </summary>
            <param name="iOtherProfil">The input profil</param>
        </member>
        <member name="T:BuddyOS.Geolocation">
            <summary>
            Geolocation tool, should be called from BYOS. The geolocation authorization must be enabled by the user.
            Will be auto-updated at each 10800 seconds
            </summary>
        </member>
        <member name="P:BuddyOS.Geolocation.Latitude">
            <summary>
            Angular value in degrees in the North-South orientation. Latitude at Equator is 0°
            </summary>
        </member>
        <member name="P:BuddyOS.Geolocation.Longitude">
            <summary>
            Angular value in degrees in the East-West orientation. Longitude at the Greenwish meridian is 0°
            </summary>
        </member>
        <member name="P:BuddyOS.Geolocation.Altitude">
            <summary>
            Value in meters
            </summary>
        </member>
        <member name="P:BuddyOS.Geolocation.HorizontalAccuracy">
            <summary>
            Horizontal accuracy of the location
            </summary>
        </member>
        <member name="P:BuddyOS.Geolocation.VerticalAccuracy">
            <summary>
            Vertical accuracy of the location
            </summary>
        </member>
        <member name="P:BuddyOS.Geolocation.TimeStamp">
            <summary>
            Time when the geolocation was taken in seconds from 1970
            </summary>
        </member>
        <member name="T:BuddyOS.Lang.Dictionary">
            <summary>
            Hosts all global_keyword -> currentlanguage_word matchings
            </summary>
        </member>
        <member name="M:BuddyOS.Lang.Dictionary.AddWordsToDictionary(Language,System.String)">
            <summary>
            Add dictionary in given folder to the dictionary of the given language
            </summary>
            <param name="iLanguage">Language to fill</param>
            <param name="iFilePath">The directioary to load</param>
        </member>
        <member name="M:BuddyOS.Lang.Dictionary.AddWordsToDictionary(Language,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Add input dictionary to the dictionary of the given language
            </summary>
            <param name="iLanguage">Language to fill</param>
            <param name="iNewWords">The dictionary to add</param>
        </member>
        <member name="M:BuddyOS.Lang.Dictionary.WordFromKey(System.String)">
            <summary>
            Retrieve the corresponding word from the input key word
            </summary>
            <param name="iKey">The key word corresponding to the wished word</param>
            <returns>The word in the current language</returns>
        </member>
        <member name="T:BuddyOS.System.GarbageManager">
            <summary>
            Unloads unused assets, detects zombie scene and close them
            </summary>
        </member>
        <member name="T:BuddyOS.System.AnomalySearcher">
            <summary>
            Search for hardware error. Those anomalies will be logged by the AnomalyLogger class.
            </summary>
        </member>
        <member name="T:BuddyOS.Net.SharedAccessSignature">
            <summary>
            Inner class for asking a shared access signature to Microsoft Azure cloud. Signature are used by loggers.
            </summary>
        </member>
        <member name="T:BuddyOS.Net.AEventHubLogger">
            <summary>
            Abstract class that must be derived by a specific logger in order to log inside the BFR eventhub. 
            </summary>
        </member>
        <member name="F:BuddyOS.Net.AEventHubLogger.URL">
            <summary>
            URL of the BFR eventhub
            </summary>
        </member>
        <member name="F:BuddyOS.Net.AEventHubLogger.TIME_OUT">
            <summary>
            Time out count for request
            </summary>
        </member>
        <member name="F:BuddyOS.Net.AEventHubLogger.mHeaders">
            <summary>
            Header dictionnary for requests
            </summary>
        </member>
        <member name="M:BuddyOS.Net.AEventHubLogger.SendToEventHub">
            <summary>
            Must be implemented using the URL inside a WWW Unity request
            </summary>
            <returns>IEnumerator for yield return</returns>
        </member>
        <member name="T:BuddyOS.Net.AnomalyLogger">
            <summary>
            Auto log to the BFR event hub hardware anomalies
            </summary>
        </member>
        <member name="M:BuddyOS.Net.AnomalyLogger.SendToEventHub">
            <summary>
            Must be implemented using the URL inside a WWW Unity request
            </summary>
            <returns>IEnumerator for yield return</returns>
        </member>
        <member name="T:BuddyOS.Net.CommandLogger">
            <summary>
            Auto log to the BFR event hub logged command from the CommandManager
            </summary>
        </member>
        <member name="M:BuddyOS.Net.CommandLogger.SendToEventHub">
            <summary>
            Must be implemented using the URL inside a WWW Unity request
            </summary>
            <returns>IEnumerator for yield return</returns>
        </member>
        <member name="T:BuddyOS.Net.LaunchTelepresence">
            <summary>
            Behaviour for starting RemoteControlApp
            </summary>
        </member>
        <member name="T:BuddyOS.Net.NetworkDiscovery">
            <summary>
            Search for networks
            </summary>
        </member>
        <member name="T:BuddyOS.Net.NetworkLocalListener">
            <summary>
            Network listener for local network
            </summary>
        </member>
        <member name="T:BuddyOS.UI.ABaseView">
            <summary>
            Base class for menu component
            </summary>
        </member>
        <member name="F:BuddyOS.UI.ABaseView.mButton">
            <summary>
            Default button
            </summary>
        </member>
        <member name="P:BuddyOS.UI.ABaseView.LocalTransform">
            <summary>
            Retrieve the local transform of the component
            </summary>
        </member>
        <member name="M:BuddyOS.UI.ABaseView.Clear">
            <summary>
            Clear method when the component comes to desappeared
            </summary>
        </member>
        <member name="M:BuddyOS.UI.ABaseView.OnClick">
            <summary>
            Callback method that will be called when the mButton item will be clicked
            </summary>
        </member>
        <member name="M:BuddyOS.UI.ABaseView.PastRectTransformInfo(UnityEngine.RectTransform)">
            <summary>
            Inner purpose for Rect transform modification
            </summary>
            <param name="iRectTransformItem">The rect transform to set</param>
        </member>
        <member name="T:BuddyOS.UI.ClockPanel">
            <summary>
            Top-Right Clock panel
            </summary>
        </member>
        <member name="T:BuddyOS.UI.FrontPanel">
            <summary>
            Modal window
            </summary>
        </member>
        <member name="T:BuddyOS.UI.FontManager">
            <summary>
            Font tool for (un)load fonts
            </summary>
        </member>
        <member name="M:BuddyOS.UI.FontManager.AssignFont(UnityEngine.UI.Text,System.String)">
            <summary>
            Assign a font to the specified text
            </summary>
            <param name="iText">The text to set</param>
            <param name="iFontName">The font to set</param>
        </member>
        <member name="M:BuddyOS.UI.FontManager.GetFont(System.String)">
            <summary>
            Retrieve font from its name
            </summary>
            <param name="iFontName">Font name</param>
            <returns>The font</returns>
        </member>
        <member name="T:BuddyOS.UI.Pool">
            <summary>
            Pool manager for widget (UI) gameobject
            </summary>
        </member>
        <member name="T:BuddyOS.UI.SpriteManager">
            <summary>
            Tool for (un)load atlases
            </summary>
        </member>
        <member name="F:BuddyOS.UI.SpriteManager.DIRECTORY">
            <summary>
            All your atlases must be inside this folder. i.e. : Resources/Sprites/
            </summary>
        </member>
        <member name="F:BuddyOS.UI.SpriteManager.DEFAULT_ATLAS">
            <summary>
            The default atlas for the UI
            </summary>
        </member>
        <member name="M:BuddyOS.UI.SpriteManager.ExistAtlas(System.String)">
            <summary>
            Check if the named atlas exist
            </summary>
            <param name="iAtlas">The atlas name</param>
            <returns>True if the atlas has been loaded</returns>
        </member>
        <member name="M:BuddyOS.UI.SpriteManager.ExistSpriteInAtlas(System.String,System.String)">
            <summary>
            Check if a sprite exist inside an atlas
            </summary>
            <param name="iAtlas">The atlas name</param>
            <param name="iSprite">The sprite name</param>
            <returns>True if the sprite exist within the atlas</returns>
        </member>
        <member name="M:BuddyOS.UI.SpriteManager.SpriteFromAtlas(System.String,System.String)">
            <summary>
            Retrieve a sprite from the specified atlas
            </summary>
            <param name="iAtlas">The atlas name</param>
            <param name="iSprite">The sprite name</param>
            <returns></returns>
        </member>
        <member name="M:BuddyOS.UI.SpriteManager.AssignSprite(System.String,UnityEngine.UI.Image)">
            <summary>
            Assign the sprite (in DEFAULT_ATLAS) to the image
            </summary>
            <param name="iSprite">The sprite name</param>
            <param name="iImage">The image to assign</param>
        </member>
        <member name="M:BuddyOS.UI.SpriteManager.AssignSprite(System.String,System.String,UnityEngine.UI.Image)">
            <summary>
            Assign the sprite in atlas to the image 
            </summary>
            <param name="iAtlas">The atlas name</param>
            <param name="iSprite">The sprite name</param>
            <param name="iImage">The image to assign</param>
        </member>
        <member name="T:BuddyOS.UI.AccountElement">
            <summary>
            Represents an account element 
            </summary>
        </member>
        <member name="T:BuddyOS.UI.AppsContainer">
            <summary>
            Container for app icon
            </summary>
        </member>
        <member name="P:BuddyOS.UI.AppsContainer.Label">
            <summary>
            Label of the container
            </summary>
        </member>
        <member name="M:BuddyOS.UI.AppsContainer.Clear">
            <summary>
            Clear method when the component comes to desappeared
            </summary>
        </member>
        <member name="M:BuddyOS.UI.AppsContainer.IsEmpty">
            <summary>
            True if there is shortcut in the container
            </summary>
            <returns>True if there is shortcut in the container</returns>
        </member>
        <member name="T:BuddyOS.UI.AppShortcut">
            <summary>
            App shortcut that 
            </summary>
        </member>
        <member name="M:BuddyOS.UI.AppShortcut.Clear">
            <summary>
            Clear method when the component comes to desappeared
            </summary>
        </member>
        <member name="M:BuddyOS.UI.AppShortcut.OnClick">
            <summary>
            Callback method that will be called when the mButton item will be clicked
            </summary>
        </member>
        <member name="T:BuddyOS.UI.AWidget">
            <summary>
            Base Widget component class. Represent an user input an a menu layout. Must be used in a AWindowLayout derived class.
            </summary>
        </member>
        <member name="F:BuddyOS.UI.AWidget.DEFAULT_TEXT">
            <summary>
            Default text
            </summary>
        </member>
        <member name="F:BuddyOS.UI.AWidget.DEFAULT_INT">
            <summary>
            Default int
            </summary>
        </member>
        <member name="M:BuddyOS.UI.AWidget.IsEmpty">
            <summary>
            Must return true if the widget is considered as empty
            </summary>
            <returns></returns>
        </member>
        <member name="T:BuddyOS.UI.Button">
            <summary>
            Basic button for AWindowLayout, will be replaced by a classier button
            </summary>
        </member>
        <member name="P:BuddyOS.UI.Button.ClickCommands">
            <summary>
            Those commands will be called after a click
            </summary>
        </member>
        <member name="P:BuddyOS.UI.Button.Label">
            <summary>
            Label of the button
            </summary>
        </member>
        <member name="M:BuddyOS.UI.Button.OnClick">
            <summary>
            Callback method that will be called when the mButton item will be clicked
            </summary>
        </member>
        <member name="M:BuddyOS.UI.Button.Clear">
            <summary>
            Clear method when the component comes to desappeared
            </summary>
        </member>
        <member name="T:BuddyOS.UI.Gauge">
            <summary>
            Slider widget for AWindowLayout
            </summary>
        </member>
        <member name="P:BuddyOS.UI.Gauge.Label">
            <summary>
            Label of the slider
            </summary>
        </member>
        <member name="P:BuddyOS.UI.Gauge.Slider">
            <summary>
            The slider component
            </summary>
        </member>
        <member name="P:BuddyOS.UI.Gauge.UpdateCommands">
            <summary>
            Command that will be called after slider value modification.
            The Integers[] attribute of Parameters will be updated.
            </summary>
        </member>
        <member name="P:BuddyOS.UI.Gauge.DisplayPercentage">
            <summary>
            Specify if the slider value must be DISPLAYED in purcentage
            </summary>
        </member>
        <member name="M:BuddyOS.UI.Gauge.Clear">
            <summary>
            Clear method when the component comes to desappeared
            </summary>
        </member>
        <member name="M:BuddyOS.UI.Gauge.UpdateFeebackValue">
            <summary>
            Modification callback for the slider
            </summary>
        </member>
        <member name="T:BuddyOS.UI.GaugeOnOff">
            <summary>
            Slider with toggle activation widget for AWindowLayout
            </summary>
        </member>
        <member name="P:BuddyOS.UI.GaugeOnOff.Label">
            <summary>
            Label of the slider
            </summary>
        </member>
        <member name="P:BuddyOS.UI.GaugeOnOff.Slider">
            <summary>
            Slider component of the widget
            </summary>
        </member>
        <member name="P:BuddyOS.UI.GaugeOnOff.OnCommands">
            <summary>
            Commands that will be called after On switch
            </summary>
        </member>
        <member name="P:BuddyOS.UI.GaugeOnOff.OffCommands">
            <summary>
            Commands that will be called after Off switch
            </summary>
        </member>
        <member name="P:BuddyOS.UI.GaugeOnOff.UpdateCommands">
            <summary>
            Command that will be called after slider value modification.
            The Integers[] attribute of Parameters will be updated.
            </summary>
        </member>
        <member name="P:BuddyOS.UI.GaugeOnOff.DisplayPercentage">
            <summary>
            Specify if the slider value must be DISPLAYED in purcentage
            </summary>
        </member>
        <member name="P:BuddyOS.UI.GaugeOnOff.IsActive">
            <summary>
            Set if the toggle must be active when displayed
            </summary>
        </member>
        <member name="M:BuddyOS.UI.GaugeOnOff.Clear">
            <summary>
            Clear method when the component comes to desappeared
            </summary>
        </member>
        <member name="M:BuddyOS.UI.GaugeOnOff.StateChange">
            <summary>
            Modification callback for the toggle
            </summary>
        </member>
        <member name="M:BuddyOS.UI.GaugeOnOff.UpdateFeebackValue">
            <summary>
            Modification callback for the slider
            </summary>
        </member>
        <member name="T:BuddyOS.UI.OnOff">
            <summary>
            Toggle widget for AWindowLayout
            </summary>
        </member>
        <member name="P:BuddyOS.UI.OnOff.OnCommands">
            <summary>
            Commands that will be called after On switch
            </summary>
        </member>
        <member name="P:BuddyOS.UI.OnOff.OffCommands">
            <summary>
            Commands that will be called after Off switch
            </summary>
        </member>
        <member name="P:BuddyOS.UI.OnOff.Label">
            <summary>
            Label of the toggle
            </summary>
        </member>
        <member name="P:BuddyOS.UI.OnOff.IsActive">
            <summary>
            Set if the toggle must be active when displayed
            </summary>
        </member>
        <member name="M:BuddyOS.UI.OnOff.Clear">
            <summary>
            Clear method when the component comes to desappeared
            </summary>
        </member>
        <member name="M:BuddyOS.UI.OnOff.StateChange">
            <summary>
            Modification callback
            </summary>
        </member>
        <member name="T:BuddyOS.UI.SearchField">
            <summary>
            Text field widget for "search" purposes for AWindowLayout
            </summary>
        </member>
        <member name="P:BuddyOS.UI.SearchField.Label">
            <summary>
            Label of the field
            </summary>
        </member>
        <member name="P:BuddyOS.UI.SearchField.Field">
            <summary>
            The string input field
            </summary>
        </member>
        <member name="P:BuddyOS.UI.SearchField.UpdateCommands">
            <summary>
            Commands that will be called after any modification of the field.
            The Strings[] attribute of Parameters will be updated.
            </summary>
        </member>
        <member name="M:BuddyOS.UI.SearchField.Clear">
            <summary>
            Clear method when the component comes to desappeared
            </summary>
        </member>
        <member name="M:BuddyOS.UI.SearchField.OnUpdateField">
            <summary>
            Modification callback
            </summary>
        </member>
        <member name="T:BuddyOS.UI.TextField">
            <summary>
            Simple text field
            </summary>
        </member>
        <member name="P:BuddyOS.UI.TextField.Label">
            <summary>
            Label of the field
            </summary>
        </member>
        <member name="M:BuddyOS.UI.TextField.Clear">
            <summary>
            Clear method when the component comes to desappeared
            </summary>
        </member>
        <member name="T:BuddyOS.UI.AWindowLayout">
            <summary>
            Layout for left embedded menu in the OS interface. 
            Set base info in Init(), create your components in Build(), and set text in Labelize()
            </summary>
        </member>
        <member name="F:BuddyOS.UI.AWindowLayout.DEFAULT_LAYOUT">
            <summary>
            Default layout name. Contains a simple button for leave the app
            </summary>
        </member>
        <member name="F:BuddyOS.UI.AWindowLayout.FIRST_LINE">
            <summary>
            Menu first line index
            </summary>
        </member>
        <member name="F:BuddyOS.UI.AWindowLayout.SECOND_LINE">
            <summary>
            Menu second line index
            </summary>
        </member>
        <member name="F:BuddyOS.UI.AWindowLayout.THIRD_LINE">
            <summary>
            Menu third line index
            </summary>
        </member>
        <member name="F:BuddyOS.UI.AWindowLayout.FOURTH_LINE">
            <summary>
            Menu fourth line index
            </summary>
        </member>
        <member name="F:BuddyOS.UI.AWindowLayout.FIFTH_LINE">
            <summary>
            Menu fifth line index
            </summary>
        </member>
        <member name="F:BuddyOS.UI.AWindowLayout.SIXTH_LINE">
            <summary>
            Menu sixth line index
            </summary>
        </member>
        <member name="F:BuddyOS.UI.AWindowLayout.SEVENTH_LINE">
            <summary>
            Menu seventh line index
            </summary>
        </member>
        <member name="F:BuddyOS.UI.AWindowLayout.EIGHTH_LINE">
            <summary>
            Menu eighth line index
            </summary>
        </member>
        <member name="F:BuddyOS.UI.AWindowLayout.NINTH_LINE">
            <summary>
            Menu ninth line index
            </summary>
        </member>
        <member name="F:BuddyOS.UI.AWindowLayout.TENTH_LINE">
            <summary>
            Menu tenth line index
            </summary>
        </member>
        <member name="P:BuddyOS.UI.AWindowLayout.Title">
            <summary>
            Title of the menu that will be displayed when the window is opened, mostly the app name will be setted automaticaly
            </summary>
        </member>
        <member name="P:BuddyOS.UI.AWindowLayout.Description">
            <summary>
            Description of the menu, must not exced few words
            </summary>
        </member>
        <member name="P:BuddyOS.UI.AWindowLayout.MenuTitle">
            <summary>
            Short title in the menu. Can be the same as Title, or shorter for long Title
            </summary>
        </member>
        <member name="P:BuddyOS.UI.AWindowLayout.MenuIcon">
            <summary>
            Icon of the menu. Corresponds to the app icon defined in the XML manifest
            </summary>
        </member>
        <member name="M:BuddyOS.UI.AWindowLayout.Init">
            <summary>
            Called at the construction of the layout. Use it to set icon. Should not be used for app. Only for native OS menu
            </summary>
        </member>
        <member name="M:BuddyOS.UI.AWindowLayout.Build">
            <summary>
            Called each time you want to display a menu layout. Put here what you want to create for your app menu
            </summary>
        </member>
        <member name="M:BuddyOS.UI.AWindowLayout.Labelize">
            <summary>
            Called once per Build and when a language-relocalization is apply
            </summary>
        </member>
        <member name="M:BuddyOS.UI.AWindowLayout.Clear">
            <summary>
            Clear method when the component comes to desappeared
            </summary>
        </member>
        <member name="M:BuddyOS.UI.AWindowLayout.GetWidget``1(System.Int32)">
            <summary>
            Get the widget at the specified line. This widget must exists
            </summary>
            <typeparam name="T">Type of the widget</typeparam>
            <param name="iLine">Line index of the widget</param>
            <returns>The widget</returns>
        </member>
        <member name="M:BuddyOS.UI.AWindowLayout.AddWidget``1(System.Int32,BuddyOS.UI.WindowLineParam)">
            <summary>
            Create a new widget at the specified line.
            </summary>
            <typeparam name="T">Type of the widget</typeparam>
            <param name="iLine">Line index of the widget</param>
            <param name="iParam">Param of the line (height, width)</param>
            <returns></returns>
        </member>
        <member name="M:BuddyOS.UI.AWindowLayout.SwapWidgets(System.Int32,System.Int32)">
            <summary>
            Swap 2 widgets
            </summary>
            <param name="iFirstWidgetIndex">First widget line index</param>
            <param name="iSecondWidgetIndex">Second widget line index</param>
        </member>
        <member name="M:BuddyOS.UI.AWindowLayout.SwapWidgets(BuddyOS.UI.AWidget,BuddyOS.UI.AWidget)">
            <summary>
            Swap 2 widgets
            </summary>
            <param name="iFirstWidget">First widget</param>
            <param name="iSecondWidget">Second widget</param>
        </member>
        <member name="T:BuddyOS.UI.WindowLineParam">
            <summary>
            Param for the Window line. 
            </summary>
        </member>
        <member name="P:BuddyOS.UI.WindowLineParam.Height">
            <summary>
            Requested height for the line
            </summary>
        </member>
        <member name="P:BuddyOS.UI.WindowLineParam.Width">
            <summary>
            Requested with for the line
            </summary>
        </member>
        <member name="T:BuddyOS.UI.WindowLine">
            <summary>
            Line in a menu layout. Internal use only, developers must use AWidget components.
            </summary>
        </member>
        <member name="P:BuddyOS.UI.WindowLine.Width">
            <summary>
            Requested width
            </summary>
        </member>
        <member name="P:BuddyOS.UI.WindowLine.Height">
            <summary>
            Requested height
            </summary>
        </member>
        <member name="M:BuddyOS.UI.WindowLine.Clear">
            <summary>
            Clear method when the component comes to desappeared
            </summary>
        </member>
        <member name="M:BuddyOS.UI.WindowLine.IsEmpty">
            <summary>
            return true is the inner widget is null or if the widget is IsEmpty()
            </summary>
            <returns>True if the line is empty</returns>
        </member>
        <member name="M:BuddyOS.UI.WindowLine.AddWidget(BuddyOS.UI.AWidget)">
            <summary>
            Add a widget to the line. Can contains only one widget per line.
            </summary>
            <param name="iWidget"></param>
        </member>
        <member name="T:BuddyOS.UI.WindowPanel">
            <summary>
            Inner class that contains a AWindowLayout and line of the layout.
            </summary>
        </member>
        <member name="F:BuddyOS.UI.WindowPanel.mLines">
            <summary>
            Lines containing widget of the layout
            </summary>
        </member>
        <member name="P:BuddyOS.UI.WindowPanel.Layout">
            <summary>
            The layout to display
            </summary>
        </member>
        <member name="M:BuddyOS.UI.WindowPanel.Clear">
            <summary>
            Clear method when the component comes to desappeared
            </summary>
        </member>
        <member name="M:BuddyOS.UI.WindowPanel.BuildWindowView">
            <summary>
            Build the layout and convert the widgets inside the Layout to line that will be displayed in the panel
            </summary>
        </member>
        <member name="M:BuddyOS.UI.WindowPanel.OptimizeLines">
            <summary>
            Remove useless lines
            </summary>
        </member>
        <member name="T:BuddyOS.UI.WindowPanelWrapper">
            <summary>
            Inner class that will handle WindowPanel (lines + Layout)
            </summary>
        </member>
        <member name="M:BuddyOS.UI.WindowPanelWrapper.OpenWindow(BuddyOS.UI.WindowPanel)">
            <summary>
            Open the specified windows panel
            </summary>
            <param name="iContent">The panel to open and build</param>
        </member>
        <member name="M:BuddyOS.UI.WindowPanelWrapper.CloseWindow">
            <summary>
            Clear and close the current panel
            </summary>
        </member>
        <member name="M:BuddyOS.UI.WindowPanelWrapper.UpdateWindowInfo">
            <summary>
            Just update display info
            </summary>
        </member>
        <member name="T:BuddyOS.TimerNot">
            <summary>
            Display a notification on the Top of the robot screen
            </summary>
        </member>
        <member name="T:BuddyOS.ValidationNot">
            <summary>
            Display a notification on the Top of the robot screen
            </summary>
        </member>
        <member name="T:BuddyOS.MeteoNot">
            <summary>
            Display a notification on the Top of the robot screen
            </summary>
        </member>
        <member name="T:BuddyOS.ConfirmationNot">
            <summary>
            Display a notification on the Top of the robot screen
            </summary>
        </member>
        <member name="T:BuddyOS.MessageNot">
            <summary>
            Display a notification on the Top of the robot screen
            </summary>
        </member>
        <member name="T:BuddyOS.SimpleNot">
            <summary>
            Display a notification on the Top of the robot screen
            </summary>
        </member>
        <member name="T:BuddyOS.ANotification">
            <summary>
            Display a notification on the Top of the robot screen
            </summary>
        </member>
        <member name="T:BuddyOS.NotificationManager">
            <summary>
            Display a notification on the Top of the robot screen
            </summary>
        </member>
        <member name="T:BuddyOS.VocalActivation">
            <summary>
            Vocal layer for easiest control for STT and Sphinx.
            Set the VocalProcessing attribute for STT callback.
            You can also set StartListenBehaviour and StopListenBehaviour.
            </summary>
        </member>
        <member name="P:BuddyOS.VocalActivation.StartListenBehaviour">
            <summary>
            Action will be called when STT starts listening
            </summary>
        </member>
        <member name="P:BuddyOS.VocalActivation.StopListenBehaviour">
            <summary>
            Action will be called when STT stops listening
            </summary>
        </member>
        <member name="P:BuddyOS.VocalActivation.VocalProcessing">
            <summary>
            Action will be called with the recognized string after STT listening
            </summary>
        </member>
        <member name="M:BuddyOS.VocalActivation.StartRecoWithTrigger">
            <summary>
            Set Vocal activation on Trigger Mode. Now, Buddy will need to here "Salut Buddy" or "Hello Buddy", before starting STT
            </summary>
        </member>
        <member name="M:BuddyOS.VocalActivation.StartInstantReco">
            <summary>
            Stop Trigger Mode and immediately starts STT request for instant listening
            </summary>
        </member>
        <member name="M:BuddyOS.VocalActivation.StopReco">
            <summary>
            Stop Trigger Mode
            </summary>
        </member>
    </members>
</doc>
